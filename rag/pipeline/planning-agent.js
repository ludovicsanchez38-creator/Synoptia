/**
 * @fileoverview Planning Agent - First stage of multi-agent workflow generation
 *
 * This agent analyzes user requests and creates detailed execution plans before generation.
 * It verifies that all required nodes exist in the RAG database and proposes alternatives
 * for missing nodes. Uses Anthropic Claude Haiku 4.5 for fast, cost-effective planning.
 *
 * @module rag/pipeline/planning-agent
 * @requires @anthropic-ai/sdk
 * @author Synoptia Workflow Builder Team
 * @since v1.0.0
 * @lastModified 2025-10-16
 *
 * Key improvements (Oct 2025):
 * - XML tags in user messages (Anthropic best practices)
 * - Hardcoded email node rules (sendemail lowercase)
 * - Rate limiting with exponential backoff
 * - JSON extraction with regex fallback
 */

const Anthropic = require('@anthropic-ai/sdk');
const config = require('../config');
const costTracker = require('../../utils/cost-tracker');
const { LANGCHAIN_ARCHITECTURE, FORBIDDEN_NODE_PATTERNS } = require('../../prompts/shared-rules');

/**
 * Planning Agent - Analyzes user requests and creates execution plans
 *
 * First agent in the multi-agent pipeline. Responsible for:
 * - Understanding user intent
 * - Identifying required nodes from RAG database
 * - Detecting missing nodes and proposing alternatives
 * - Creating execution flow
 * - Determining workflow complexity
 *
 * @class PlanningAgent
 * @example
 * const retriever = new WorkflowContextRetriever();
 * const planningAgent = new PlanningAgent(retriever);
 * const plan = await planningAgent.createPlan(
 *   "cr√©er un webhook et envoyer sur Slack",
 *   ragContext,
 *   sessionId
 * );
 */
class PlanningAgent {
  /**
   * Creates a new Planning Agent instance
   *
   * @constructor
   * @param {WorkflowContextRetriever} retriever - RAG retriever instance
   * @throws {Error} If ANTHROPIC_API_KEY is not set in environment
   */
  constructor(retriever) {
    this.anthropic = new Anthropic({
      apiKey: process.env.ANTHROPIC_API_KEY,
      timeout: config.anthropic.timeout // Timeout par d√©faut
    });

    this.retriever = retriever;
    this.model = config.anthropic.generationModel;
  }

  /**
   * Retourne le timeout adapt√© √† la complexit√©
   */
  getTimeoutForComplexity(complexity) {
    const timeouts = config.anthropic.timeouts;
    return timeouts[complexity] || timeouts.medium;
  }

  /**
   * Analyse la demande et cr√©e un plan d√©taill√©
   * FORCE le raisonnement √©tape par √©tape
   */
  async createPlan(userRequest, ragContext, sessionId = null) {
    console.log('  üß† Planning Agent - Analyse de la demande...');

    // Broadcast SSE start
    if (global.broadcastSSE) {
      global.broadcastSSE('planning_start', {
        agent: 'El Planificator',
        icon: 'üß†',
        message: 'Analyse de la demande utilisateur...',
        timestamp: Date.now()
      });
    }

    const planningPrompt = this.buildPlanningPrompt(userRequest, ragContext);

    try {
      if (global.broadcastSSE) {
        global.broadcastSSE('planning_progress', {
          agent: 'El Planificator',
          icon: 'üß†',
          message: 'Identification des fonctionnalit√©s requises',
          timestamp: Date.now()
        });
      }

      let response;
      let retryCount = 0;
      const maxRetries = 3;

      while (retryCount <= maxRetries) {
        try {
          response = await this.anthropic.messages.create({
            model: this.model,
            max_tokens: config.anthropic.maxTokens,
            system: planningPrompt,
            messages: [{
              role: 'user',
              content: `<user_request>${userRequest}</user_request>\n\nG√©n√®re le plan d'ex√©cution pour cette demande utilisateur (JSON uniquement):`
            }],
            temperature: 0.3 // Haiku 4.5 supporte temperature (vs GPT-5)
          });
          break; // Success, sortir de la boucle
        } catch (error) {
          // D√©tecter rate limit 429
          if (error.status === 429 && retryCount < maxRetries) {
            // Extraire le d√©lai depuis le message d'erreur
            const waitMatch = error.message.match(/try again in ([\d.]+)s/);
            const waitTime = waitMatch ? Math.ceil(parseFloat(waitMatch[1]) * 1000) : 5000;

            console.warn(`  ‚è≥ Rate limit atteint, retry ${retryCount + 1}/${maxRetries} dans ${waitTime/1000}s...`);

            if (global.broadcastSSE) {
              global.broadcastSSE('planning_progress', {
                agent: 'El Planificator',
                icon: '‚è≥',
                message: `Rate limit - Retry dans ${waitTime/1000}s`,
                timestamp: Date.now()
              });
            }

            await new Promise(resolve => setTimeout(resolve, waitTime));
            retryCount++;
          } else {
            throw error; // Autre erreur ou max retries atteint
          }
        }
      }

      let responseText = response.content[0].text;

      // Retirer markdown code blocks si pr√©sents (Claude Haiku 4.5 wrap souvent en ```json)
      responseText = responseText.replace(/```json\s*/g, '').replace(/```\s*$/g, '').trim();

      // ‚úÖ FIX OCT 2025: Extraire UNIQUEMENT le premier objet JSON valide
      // Le mod√®le peut g√©n√©rer du texte apr√®s le JSON, causant "Unexpected non-whitespace character"
      let plan;
      try {
        plan = JSON.parse(responseText);
      } catch (parseError) {
        // Si le parsing √©choue, essayer d'extraire le JSON avec une regex
        // REGEX AM√âLIOR√âE: Mode NON-GREEDY pour capturer le premier objet JSON seulement
        // Match pattern: { ... } en s'arr√™tant au premier } qui ferme le premier {
        let jsonMatch = responseText.match(/\{[\s\S]*?\}/);

        // Si √ßa ne marche pas, essayer greedy (pour les JSON tr√®s longs)
        if (!jsonMatch || jsonMatch[0].length < 50) {
          jsonMatch = responseText.match(/\{[\s\S]*\}/);
        }

        if (jsonMatch) {
          try {
            plan = JSON.parse(jsonMatch[0]);
            console.log('  ‚ö†Ô∏è JSON extrait avec regex (texte superflu d√©tect√©)');

            // DEBUG: V√©rifier si le plan a les champs requis
            if (!plan.requiredNodes || plan.requiredNodes.length === 0) {
              console.error('  üö® DEBUG: Plan extrait sans requiredNodes!');
              console.error(`  üìÑ JSON brut (premiers 500 chars): ${jsonMatch[0].substring(0, 500)}`);
              console.error(`  üìÑ R√©ponse compl√®te (premiers 1000 chars): ${responseText.substring(0, 1000)}`);
            }
          } catch (regexError) {
            console.error(`  ‚ùå JSON invalide apr√®s extraction regex`);
            console.error(`  üìÑ JSON extrait (premiers 500 chars): ${jsonMatch[0].substring(0, 500)}`);
            throw new Error(`JSON invalide m√™me apr√®s extraction: ${parseError.message}`);
          }
        } else {
          console.error(`  ‚ùå Aucun JSON trouv√© dans la r√©ponse`);
          console.error(`  üìÑ R√©ponse compl√®te (premiers 1000 chars): ${responseText.substring(0, 1000)}`);
          throw new Error(`Impossible de trouver un objet JSON dans la r√©ponse: ${parseError.message}`);
        }
      }

      // Track API costs
      if (sessionId && response.usage) {
        costTracker.recordCall(
          sessionId,
          'planning',
          this.model,
          response.usage.input_tokens,
          response.usage.output_tokens
        );
      }

      console.log(`  üìã Plan cr√©√©:`);
      console.log(`     - Nodes requis: ${plan.requiredNodes?.length || 0}`);
      console.log(`     - Nodes disponibles: ${plan.availableNodes?.length || 0}`);
      console.log(`     - Nodes manquants: ${plan.missingNodes?.length || 0}`);

      // ‚õî INTERRUPTION: Si aucun node n'est trouv√©, ARR√äTER
      const availableCount = plan.availableNodes?.length || 0;
      const requiredCount = plan.requiredNodes?.length || 0;

      if (requiredCount > 0 && availableCount === 0) {
        const errorMsg = `‚ùå √âCHEC: Aucun node n8n trouv√© dans le RAG. Impossible de g√©n√©rer le workflow.`;
        console.error(`  ${errorMsg}`);
        console.error(`     - Nodes requis: ${requiredCount}`);
        console.error(`     - Documents RAG: ${ragContext.documents?.length || 0}`);
        console.error(`     - Exemples workflows: ${ragContext.workflowExamplesCount || 0}`);

        if (global.broadcastSSE) {
          global.broadcastSSE('planning_error', {
            agent: 'El Planificator',
            icon: '‚ùå',
            message: errorMsg,
            details: {
              requiredNodes: plan.requiredNodes,
              ragDocuments: ragContext.documents?.length || 0,
              workflowExamples: ragContext.workflowExamplesCount || 0
            },
            timestamp: Date.now()
          });
        }

        throw new Error(errorMsg);
      }

      if (plan.missingNodes && plan.missingNodes.length > 0) {
        console.warn(`  ‚ö†Ô∏è ATTENTION: ${plan.missingNodes.length} nodes manquants!`);
        plan.missingNodes.forEach(node => {
          console.warn(`     - ${node.name}: ${node.alternative}`);
        });

        if (global.broadcastSSE) {
          global.broadcastSSE('planning_progress', {
            agent: 'Planning Agent',
            icon: 'üß†',
            message: `Proposition d'alternatives pour ${plan.missingNodes.length} nodes manquants`,
            timestamp: Date.now()
          });
        }
      }

      // D√©terminer la complexit√© pour l'UI (sera aussi calcul√©e dans le generator)
      const nodeCount = plan.requiredNodes?.length || 0;
      const missingCount = plan.missingNodes?.length || 0;
      let complexity = 'medium';
      if (nodeCount <= 3 && missingCount === 0) {
        complexity = 'simple';
      } else if (nodeCount >= 8 || missingCount >= 2) {
        complexity = 'complex';
      }

      // Broadcast completion avec complexit√©
      if (global.broadcastSSE) {
        global.broadcastSSE('planning_complete', {
          agent: 'El Planificator',
          icon: 'üß†',
          message: 'Plan cr√©√© avec succ√®s',
          nodesCount: nodeCount,
          missingCount: missingCount,
          complexity: complexity,
          timestamp: Date.now()
        });
      }

      return plan;

    } catch (error) {
      console.error('‚ùå Erreur Planning Agent:', error.message);

      if (global.broadcastSSE) {
        global.broadcastSSE('planning_error', {
          agent: 'El Planificator',
          icon: '‚ùå',
          message: `Erreur: ${error.message}`,
          timestamp: Date.now()
        });
      }

      throw error;
    }
  }

  /**
   * Construit le prompt de planification avec Chain-of-Thought
   */
  buildPlanningPrompt(userRequest, ragContext) {
    // Liste des nodes disponibles depuis la RAG
    const availableNodesList = ragContext.detectedNodes && ragContext.detectedNodes.length > 0
      ? ragContext.detectedNodes.join(', ')
      : 'Aucun node sp√©cifique d√©tect√©';

    // Documentation disponible avec TYPES EXACTS
    let docsContext = '';
    const nodeTypesMap = new Map(); // nom ‚Üí type exact

    if (ragContext.documents && ragContext.documents.length > 0) {
      docsContext = '\n\nüìö NODES DOCUMENT√âS DISPONIBLES (AVEC TYPES EXACTS):\n';
      docsContext += '‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n';

      // ‚¨áÔ∏è OPTIMISATION: 25 ‚Üí 20 docs (moins de bruit avec SmartChunker)
      ragContext.documents.slice(0, 20).forEach(doc => {
        // ‚úÖ FIX 1: Extraire les types depuis le contenu avec regex corrig√©
        // Supporte BOTH formats: @n8n/n8n-nodes-langchain.* ET n8n-nodes-base.*
        if (doc.content) {
          // Regex corrig√© pour capturer le pr√©fixe @n8n/ aussi
          const nodeTypeMatches = doc.content.match(/(`?)(@n8n\/n8n-nodes-langchain\.[a-zA-Z0-9_]+|n8n-nodes-base\.[a-zA-Z0-9_]+)\1/g);
          if (nodeTypeMatches) {
            nodeTypeMatches.forEach(match => {
              // Enlever les backticks si pr√©sents
              const type = match.replace(/`/g, '');
              const name = doc.title || type;
              nodeTypesMap.set(name, type);
            });
          }
        }

        // ‚úÖ FIX 2: Utiliser doc.nodeType TEL QUEL (sans guessing!)
        // Le champ doc.nodeType CONTIENT D√âJ√Ä le type complet et exact
        if (doc.nodeType) {
          // V√©rifier que c'est un nodeType valide (commence par n8n-nodes-base. ou @n8n/)
          if (doc.nodeType.startsWith('n8n-nodes-base.') || doc.nodeType.startsWith('@n8n/')) {
            const name = doc.title || doc.nodeType;
            nodeTypesMap.set(name, doc.nodeType); // ‚úÖ Utiliser TEL QUEL - pas de transformation!
          }
        }

        // Workflow examples (d√©j√† correct)
        if (doc.workflowInfo && doc.workflowInfo.integrations) {
          doc.workflowInfo.integrations.forEach(integration => {
            if (integration.startsWith('@n8n/n8n-nodes-langchain.')) {
              // Garder le type exact avec @n8n/ et la casse correcte
              const cleanName = integration.replace('@n8n/n8n-nodes-langchain.', '');
              nodeTypesMap.set(cleanName, integration);
            }
          });
        }
      });

      // Afficher la liste avec types exacts
      Array.from(nodeTypesMap.entries()).forEach(([name, type]) => {
        docsContext += `  - ${name}\n`;
        docsContext += `    TYPE EXACT: "${type}"\n`;
      });

      docsContext += '‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n';
    }

    return `Tu es un expert n8n charg√© de PLANIFIER un workflow MINIMAL et EFFICACE.

üéØ MISSION CRITIQUE:
Analyser la demande utilisateur et cr√©er un plan avec le MINIMUM de nodes n√©cessaires.
Privil√©gie la SIMPLICIT√â et l'EFFICACIT√â. √âvite les nodes redondants.
Tu DOIS UTILISER EN PRIORIT√â les nodes document√©s ci-dessous.

${docsContext}

üìã NODES SUGG√âR√âS PAR RAG (√Ä UTILISER EN PRIORIT√â):
${availableNodesList}

‚ö†Ô∏è R√àGLES ABSOLUES:

0. **MINIMALISME** : G√©n√®re le MINIMUM de nodes n√©cessaires. N'ajoute PAS de nodes "Set" ou "Code" sauf si EXPLICITEMENT demand√©.
   - ‚úÖ CORRECT: Webhook ‚Üí Slack (2 nodes)
   - ‚ùå INCORRECT: Webhook ‚Üí Set ‚Üí Code ‚Üí Slack (4 nodes)

0bis. **TRIGGERS PRIORITAIRES** : Si la demande mentionne "quand", "trigger", "nouveau", "nouvelle", utilise le trigger natif correspondant:
   - "quand nouvelle ligne Google Sheets" ‚Üí googleSheetsTrigger (PAS googleSheets)
   - "nouveau deal Pipedrive" ‚Üí pipedriveTrigger (PAS pipedrive)
   - "trigger Discord" ‚Üí discordTrigger (PAS discord)
   - "nouveau message Slack" ‚Üí slackTrigger (PAS slack)

0ter. **NODES EMAIL** : Pour envoyer des emails via SMTP, utilise TOUJOURS:
   - TYPE EXACT: "n8n-nodes-base.sendemail" (tout en minuscules!)
   - ‚ùå INCORRECT: sendEmail, emailSend, SendEmail
   - ‚úÖ CORRECT: sendemail (lowercase)

1. **PRIORIT√â ABSOLUE** : Si un node est list√© dans "NODES DOCUMENT√âS DISPONIBLES" ci-dessus, tu DOIS l'utiliser
   - Exemple: Si OpenAI est document√©, utilise le node OpenAI natif (n8n-nodes-langchain.openai)
   - Exemple: Si LinkedIn est document√©, utilise le node LinkedIn natif
   - N'utilise HTTP Request QUE si le node natif n'existe pas dans la documentation

2. **V√âRIFICATION STRICTE** : Chaque node list√© dans "NODES DOCUMENT√âS DISPONIBLES" existe et est utilisable
   - Ces nodes ont √©t√© r√©cup√©r√©s depuis la base de documentation officielle n8n
   - Tu peux leur faire CONFIANCE √† 100%

3. **HTTP Request = DERNIER RECOURS** : N'utilise HTTP Request que pour :
   - Les APIs sans node natif (ex: VEO 3, APIs custom)
   - Les services non couverts par la documentation

4. **EXEMPLES CONCRETS** :
   ‚úÖ CORRECT : "OpenAI est document√© ‚Üí J'utilise n8n-nodes-langchain.openai"
   ‚ùå INCORRECT : "OpenAI est document√© ‚Üí J'utilise HTTP Request vers OpenAI API"

   ‚úÖ CORRECT : "LinkedIn est document√© ‚Üí J'utilise n8n-nodes-base.linkedIn"
   ‚ùå INCORRECT : "LinkedIn est document√© ‚Üí J'utilise HTTP Request vers LinkedIn API"

${LANGCHAIN_ARCHITECTURE}

${FORBIDDEN_NODE_PATTERNS}

üîç PROCESSUS DE D√âCISION:

1. **COMPRENDRE** la demande utilisateur (fournie dans le message utilisateur)
2. **IDENTIFIER** les fonctionnalit√©s requises (ex: "appel LLM", "r√©cup√©ration LinkedIn")
3. **CHERCHER DANS LA DOCUMENTATION** : Pour chaque fonctionnalit√©, regarder si un node existe dans "NODES DOCUMENT√âS DISPONIBLES"
4. **D√âCISION** :
   - Node trouv√© dans la doc ‚Üí ‚úÖ UTILISER CE NODE NATIF
   - Node absent de la doc ‚Üí ‚ö†Ô∏è Utiliser HTTP Request en alternative
5. **LISTER** tous les nodes s√©lectionn√©s avec leur justification
6. **CR√âER** le flux d'ex√©cution √©tape par √©tape
7. **VALIDER** que les nodes natifs document√©s sont bien utilis√©s

‚ö†Ô∏è La demande utilisateur sera fournie dans le message utilisateur avec le tag <user_request>.
Analyse cette demande et g√©n√®re le plan correspondant.

üì§ FORMAT DE R√âPONSE (JSON UNIQUEMENT):
{
  "analysis": {
    "description": "Description courte de ce que fait le workflow",
    "functionalities": ["fonctionnalit√© 1", "fonctionnalit√© 2"],
    "complexity": "simple|medium|complex"
  },
  "reasoning": {
    "step1_understand": "Explication de la demande",
    "step2_identify": "Liste des fonctionnalit√©s identifi√©es",
    "step3_nodes_needed": ["node1", "node2"],
    "step4_verification": "V√©rification de disponibilit√© des nodes",
    "step5_alternatives": "Nodes remplac√©s par des alternatives si n√©cessaire",
    "step6_flow": "Description du flux d'ex√©cution"
  },
  "requiredNodes": [
    {
      "name": "Node Name",
      "type": "n8n-nodes-base.nodeType",
      "purpose": "Pourquoi ce node",
      "exists": true|false,
      "verified": true|false
    }
  ],
  "availableNodes": [
    {
      "name": "Node Name",
      "type": "n8n-nodes-base.nodeType"
    }
  ],
  "missingNodes": [
    {
      "name": "Node Name Original",
      "reason": "Pourquoi manquant",
      "alternative": "Utiliser HTTP Request + API XXX"
    }
  ],
  "executionFlow": [
    "√âtape 1: Trigger webhook",
    "√âtape 2: Transformer donn√©es",
    "√âtape 3: Envoyer email"
  ],
  "recommendations": [
    "Recommandation 1",
    "Recommandation 2"
  ],
  "readyToGenerate": true|false,
  "warnings": ["Warning si nodes manquants ou probl√®mes d√©tect√©s"]
}`;
  }

  /**
   * Valide le plan cr√©√©
   */
  validatePlan(plan) {
    const validation = {
      valid: true,
      errors: [],
      warnings: []
    };

    // V√©rifier que le plan est complet
    if (!plan.requiredNodes || plan.requiredNodes.length === 0) {
      validation.errors.push('Aucun node requis identifi√© dans le plan');
      validation.valid = false;
    }

    // V√©rifier les nodes manquants
    if (plan.missingNodes && plan.missingNodes.length > 0) {
      validation.warnings.push(`${plan.missingNodes.length} nodes manquants - alternatives propos√©es`);
    }

    // V√©rifier que tous les nodes sont v√©rifi√©s
    const unverifiedNodes = plan.requiredNodes?.filter(n => !n.verified) || [];
    if (unverifiedNodes.length > 0) {
      validation.warnings.push(`${unverifiedNodes.length} nodes non v√©rifi√©s`);
    }

    // V√©rifier le flux d'ex√©cution
    if (!plan.executionFlow || plan.executionFlow.length === 0) {
      validation.warnings.push('Aucun flux d\'ex√©cution d√©fini');
    }

    return validation;
  }
}

module.exports = PlanningAgent;
