/**
 * Gestionnaire des codes SAV et syst√®me de support client
 * Version s√©curis√©e avec base de donn√©es SQLite chiffr√©e
 */

const SecureSAVDatabase = require('./secure-db');

class SecureSAVManager {
    constructor() {
        // Base de donn√©es s√©curis√©e
        this.db = new SecureSAVDatabase();
        this.knowledgeBase = this.initializeKnowledgeBase();

        // Nettoyage automatique des codes expir√©s toutes les heures
        this.cleanupInterval = setInterval(() => {
            this.db.cleanupExpiredCodes();
        }, 60 * 60 * 1000); // 1 heure

        console.log('üõ°Ô∏è SAV Manager s√©curis√© initialis√©');
    }

    /**
     * G√©n√®re un nouveau code SAV pour un client
     */
    async generateSupportCode(clientId, validityHours = 24) {
        try {
            return await this.db.generateCode(clientId, validityHours, {
                generatedBy: 'admin',
                source: 'web-interface'
            });
        } catch (error) {
            console.error('‚ùå Erreur g√©n√©ration code SAV:', error);
            throw new Error('Erreur lors de la g√©n√©ration du code SAV');
        }
    }

    /**
     * V√©rifie un code SAV pour l'authentification
     */
    async validateSupportCode(code) {
        try {
            return await this.db.authenticateCode(code);
        } catch (error) {
            console.error('‚ùå Erreur validation code SAV:', error);
            return {
                success: false,
                error: 'Erreur lors de la validation du code'
            };
        }
    }

    /**
     * R√©voque un code SAV sp√©cifique
     */
    async revokeCode(code) {
        try {
            return await this.db.revokeCode(code);
        } catch (error) {
            console.error('‚ùå Erreur r√©vocation code SAV:', error);
            return {
                success: false,
                error: 'Erreur lors de la r√©vocation du code'
            };
        }
    }

    /**
     * R√©voque tous les codes d'un client
     */
    async revokeClientCodes(clientId) {
        try {
            const activeCodes = await this.db.listActiveCodes();
            const clientCodes = activeCodes.filter(code => code.clientId === clientId);

            let revokedCount = 0;
            const revokedCodes = [];

            for (const codeData of clientCodes) {
                const result = await this.db.revokeCode(codeData.code);
                if (result.success) {
                    revokedCount++;
                    revokedCodes.push({
                        code: codeData.code,
                        used: codeData.used,
                        createdAt: codeData.createdAt
                    });
                }
            }

            return {
                success: true,
                message: `${revokedCount} code(s) r√©voqu√©(s) pour le client ${clientId}`,
                revokedCount,
                revokedCodes
            };

        } catch (error) {
            console.error('‚ùå Erreur r√©vocation codes client:', error);
            return {
                success: false,
                error: 'Erreur lors de la r√©vocation des codes client'
            };
        }
    }

    /**
     * Liste tous les codes actifs
     */
    async listActiveCodes() {
        try {
            return await this.db.listActiveCodes();
        } catch (error) {
            console.error('‚ùå Erreur listing codes actifs:', error);
            return [];
        }
    }

    /**
     * Traite une demande de support client
     */
    async processUserRequest(clientId, message) {
        try {
            // Analyser la demande avec la base de connaissances
            const analysis = this.analyzeRequest(message);

            // G√©n√©rer une r√©ponse intelligente
            const response = this.generateResponse(analysis, message);

            // Logger l'interaction (chiffr√©)
            await this.logInteraction(clientId, message, response);

            return {
                success: true,
                response: response,
                analysis: analysis
            };

        } catch (error) {
            console.error('‚ùå Erreur traitement demande:', error);
            return {
                success: false,
                response: "D√©sol√©, je rencontre une difficult√© technique. Un expert va prendre le relais."
            };
        }
    }

    /**
     * Log s√©curis√© des interactions
     */
    async logInteraction(clientId, message, response) {
        // Utiliser le syst√®me d'audit de la DB pour logger les interactions
        this.db.logAudit('INTERACTION', 'CHAT', {
            clientId,
            messageLength: message.length,
            responseLength: response.length,
            timestamp: new Date().toISOString()
        });
    }

    /**
     * Fermeture propre
     */
    destroy() {
        if (this.cleanupInterval) {
            clearInterval(this.cleanupInterval);
        }
        if (this.db) {
            this.db.close();
        }
        console.log('üîí SAV Manager s√©curis√© ferm√©');
    }

    /**
     * Initialise la base de connaissances du support
     */
    initializeKnowledgeBase() {
        return {
            // Probl√®mes de workflow
            workflow: {
                patterns: [
                    /workflow(?:s)?\s+(?:ne\s+)?(?:fonctionne(?:nt)?|marche(?:nt)?)\s*(?:pas|plus)?/i,
                    /erreur(?:s)?\s+(?:dans|avec|sur)\s+(?:le\s+|les\s+)?workflow(?:s)?/i,
                    /workflow(?:s)?\s+(?:interrompu(?:s)?|arr√™t√©(?:s)?|bloqu√©(?:s)?)/i,
                    /probl√®me(?:s)?\s+(?:avec|sur)\s+(?:l'|les?\s+)?automatisation(?:s)?/i
                ],
                responses: [
                    "Je vais v√©rifier l'√©tat de vos workflows. Pouvez-vous me pr√©ciser quel workflow pose probl√®me et depuis quand vous avez remarqu√© cette situation ?",
                    "Un probl√®me de workflow peut avoir plusieurs causes. Laissez-moi examiner les logs r√©cents de vos automatisations.",
                    "Pour diagnostiquer efficacement ce probl√®me de workflow, j'ai besoin de quelques informations : le nom du workflow concern√© et le message d'erreur exact si il y en a un."
                ]
            },

            // Probl√®mes de connexion/API
            connection: {
                patterns: [
                    /(?:ne\s+)?(?:peux|peut|arrive)\s*(?:pas|plus)?\s+(?:√†\s+)?(?:me\s+)?connecter/i,
                    /connexion(?:\s+impossible|\s+√©choue|\s+refuse)/i,
                    /erreur(?:s)?\s+(?:de\s+)?connexion/i,
                    /(?:probl√®me(?:s)?|souci(?:s)?)\s+(?:d'|de\s+)?(?:acc√®s|connexion)/i,
                    /api(?:\s+key)?\s+(?:invalide|expir√©(?:e)?|ne\s+fonctionne\s+pas)/i
                ],
                responses: [
                    "Un probl√®me de connexion peut venir de plusieurs √©l√©ments. V√©rifiez d'abord que vos identifiants API sont toujours valides et que votre connexion internet est stable.",
                    "Je vais v√©rifier l'√©tat de nos serveurs. En attendant, pouvez-vous essayer de vous reconnecter ? Si le probl√®me persiste, nous regarderons vos tokens d'authentification.",
                    "Les erreurs de connexion sont souvent li√©es aux cl√©s API. Quand avez-vous r√©g√©n√©r√© vos tokens pour la derni√®re fois ?"
                ]
            },

            // Questions sur la facturation
            billing: {
                patterns: [
                    /factur(?:e|ation)/i,
                    /(?:combien|prix|co√ªt|tarif)/i,
                    /(?:paiement|abonnement)/i,
                    /(?:gratuit|payant)/i
                ],
                responses: [
                    "Pour toute question concernant la facturation, je peux vous expliquer notre syst√®me de tarification : setup unique + abonnement mensuel de 30‚Ç¨. Que souhaitez-vous savoir pr√©cis√©ment ?",
                    "Votre facture Synopt√Øa comprend les frais de setup (selon votre package) et l'abonnement mensuel pour l'h√©bergement et la maintenance. Puis-je vous aider avec un point particulier ?",
                    "Concernant la facturation, nous pratiquons une tarification transparente. Avez-vous une question sur votre derni√®re facture ou sur nos tarifs ?"
                ]
            },

            // Demande de contact humain
            human: {
                patterns: [
                    /(?:parler\s+(?:√†|avec)|contacter)\s+(?:un\s+)?(?:humain|personne|quelqu'un)/i,
                    /(?:expert|technicien|d√©veloppeur)\s+(?:humain|r√©el)/i,
                    /escalade(?:r)?/i,
                    /(?:√©quipe|support)\s+(?:technique|humain)/i
                ],
                responses: [
                    "Je comprends que vous souhaitez parler √† un expert humain. Je transf√®re imm√©diatement votre demande √† notre √©quipe technique qui va prendre le relais.",
                    "Pas de probl√®me, je fais appel √† un expert de notre √©quipe. Quelqu'un va vous contacter dans les plus brefs d√©lais.",
                    "Votre demande n√©cessite effectivement l'intervention d'un expert. Je notifie imm√©diatement l'√©quipe technique Synopt√Øa."
                ]
            },

            // R√©ponses par d√©faut
            default: {
                responses: [
                    "Je vais analyser votre demande et vous proposer une solution adapt√©e. Pouvez-vous me donner plus de contexte sur votre probl√®me ?",
                    "Pour mieux vous aider, pourriez-vous pr√©ciser la nature exacte de votre demande ? Je dispose d'une base de connaissances compl√®te sur nos services.",
                    "Je suis l√† pour vous accompagner sur tous les aspects techniques de Synopt√Øa. D√©crivez-moi votre situation en d√©tail."
                ]
            }
        };
    }

    /**
     * Analyse une demande utilisateur
     */
    analyzeRequest(message) {
        const analysis = {
            type: 'general',
            urgency: 'normal',
            keywords: [],
            needsHuman: false
        };

        const lowerMessage = message.toLowerCase();

        // D√©tection du type de probl√®me
        for (const [category, data] of Object.entries(this.knowledgeBase)) {
            if (category === 'default') continue;

            for (const pattern of data.patterns) {
                if (pattern.test(lowerMessage)) {
                    analysis.type = category;
                    break;
                }
            }

            if (analysis.type === category) break;
        }

        // D√©tection urgence
        const urgentKeywords = ['urgent', 'critique', 'bloqu√©', 'production', 'imm√©diatement'];
        if (urgentKeywords.some(keyword => lowerMessage.includes(keyword))) {
            analysis.urgency = 'high';
        }

        // D√©tection demande humaine
        if (analysis.type === 'human') {
            analysis.needsHuman = true;
        }

        return analysis;
    }

    /**
     * G√©n√®re une r√©ponse bas√©e sur l'analyse
     */
    generateResponse(analysis, originalMessage) {
        const category = this.knowledgeBase[analysis.type] || this.knowledgeBase.default;
        const responses = category.responses;

        // S√©lectionner une r√©ponse al√©atoire pour plus de naturel
        const selectedResponse = responses[Math.floor(Math.random() * responses.length)];

        // Ajouter des informations selon le contexte
        let finalResponse = selectedResponse;

        if (analysis.urgency === 'high') {
            finalResponse = "‚ö° **Demande urgente d√©tect√©e** - " + finalResponse;
        }

        if (analysis.needsHuman) {
            finalResponse += "\n\nüßë‚Äçüíª **Escalade automatique vers un expert humain activ√©e.**";
        }

        return finalResponse;
    }
}

module.exports = SecureSAVManager;