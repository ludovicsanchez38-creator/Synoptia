{
  "title": "Logging in n8n",
  "url": "https://docs.n8n.io/hosting/logging-monitoring/logging",
  "content": "---\ncontentType: howto\n---\n\n Logging in n8n\n\nLogging is an important feature for debugging. n8n uses the winston logging library.\n\n/// note | Log streaming\nn8n Self-hosted Enterprise tier includes Log streaming, in addition to the logging options described in this document.\n///\n Setup\n\nTo set up logging in n8n, you need to set the following environment variables (you can also set the values in the configuration file)\n\n| Setting in the configuration file | Using environment variables | Description |\n|-----------------------------------|-----------------------------|-------------|\n| n8n.log.level | N8NLOGLEVEL | The log output level. The available options are (from lowest to highest level) are error, warn, info, and debug. The default value is info. You can learn more about these options here. |\n| n8n.log.output | N8NLOGOUTPUT | Where to output logs. The available options are console and file. Multiple values can be used separated by a comma (,). console is used by default. |\n| n8n.log.file.location | N8NLOGFILELOCATION | The log file location, used only if log output is set to file. By default, <n8nFolderPath>/logs/n8n.log is used. |\n| n8n.log.file.maxsize | N8NLOGFILESIZEMAX | The maximum size (in MB) for each log file. By default, n8n uses 16 MB. |\n| n8n.log.file.maxcount | N8NLOGFILECOUNTMAX | The maximum number of log files to keep. The default value is 100. This value should be set when using workers. |\n\n Log levels\n\nn8n uses standard log levels to report:\n\n- silent: outputs nothing at all\n- error: outputs only errors and nothing else\n- warn: outputs errors and warning messages\n- info: contains useful information about progress\n- debug: the most verbose output. n8n outputs a lot of information to help you debug issues.\n\n Development\n\nDuring development, adding log messages is a good practice. It assists in debugging errors. To configure logging for development, follow the guide below.\n\n Implementation details\n\nn8n uses the LoggerProxy class, located in the workflow package. Calling the LoggerProxy.init() by passing in an instance of Logger, initializes the class before the usage.\n\nThe initialization process happens only once. The start.ts file already does this process for you. If you are creating a new command from scratch, you need to initialize the LoggerProxy class.\n\nOnce the Logger implementation gets created in the cli package, it can be obtained by calling the getInstance convenience method from the exported module.\n\nCheck the start.ts file to learn more about how this process works.\n\n Adding logs\n\nOnce the LoggerProxy class gets initialized in the project, you can import it to any other file and add logs.\n\nConvenience methods are provided for all logging levels, so new logs can be added whenever needed using the format Logger.<logLevel>('<message>', ...meta), where meta represents any additional properties desired beyond message.\n\nIn the example above, we use the standard log levels described above. The message argument is a string, and meta is a data object.\n\nWhen creating new loggers, some useful standards to keep in mind are:\n\n- Craft log messages to be as human-readable as possible. For example, always wrap names in quotes.\n- Duplicating information in the log message and metadata, like workflow name in the above example, can be useful as messages are easier to search and metadata enables easier filtering.\n- Include multiple IDs (for example, executionId, workflowId, and sessionId) throughout all logs.\n- Use node types instead of node names (or both) as this is more consistent, and so easier to search.\n\n Front-end logs\n\nAs of now, front-end logs aren't available. Using Logger or LoggerProxy would yield errors in the editor-ui package. This functionality will get implemented in the future versions.",
  "category": "hosting",
  "nodeType": null,
  "keywords": [
    "logging",
    "file",
    "logs",
    "this",
    "output",
    "default",
    "loggerproxy",
    "uses",
    "options",
    "using"
  ],
  "fetchedAt": "2025-10-07T16:16:01.547Z",
  "hash": "92cb4e7cae12fd69426c3619ba4ca981"
}