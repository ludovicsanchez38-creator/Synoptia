{
  "title": "Queue mode",
  "url": "https://docs.n8n.io/hosting/scaling/queue-mode",
  "content": "---\ncontentType: howto\n---\n\n Queue mode\n\nYou can run n8n in different modes depending on your needs. The queue mode provides the best scalability.\n\n/// note | Binary data storage\nn8n doesn't support queue mode with binary data storage in filesystem. If your workflows need to persist binary data in queue mode, you can use S3 external storage.\n///\n\n How it works\n\nWhen running in queue mode, you have multiple n8n instances set up, with one main instance receiving workflow information (such as triggers) and the worker instances performing the executions. \n\nEach worker is its own Node.js instance, running in main mode, but able to handle multiple simultaneous workflow executions due to their high IOPS (input-output operations per second). \n\nBy using worker instances and running in queue mode, you can scale n8n up (by adding workers) and down (by removing workers) as needed to handle the workload.\n\nThis is the process flow:\n\n1. The main n8n instance handles timers and webhook calls, generating (but not running) a workflow execution. \n1. It passes the execution ID to a message broker, Redis, which maintains the queue of pending executions and allows the next available worker to pick them up.\n1. A worker in the pool picks up message from Redis.\n1. The worker uses the execution ID to get workflow information from the database.\n1. After completing the workflow execution, the worker:\n\t- Writes the results to the database.\n\t- Posts to Redis, saying that the execution has finished.\n1. Redis notifies the main instance.\n\n!\"Diagram showing the flow of data between the main n8n instance, Redis, the n8n workers, and the n8n database\"\n\n Configuring workers\n\nWorkers are n8n instances that do the actual work. They receive information from the main n8n process about the workflows that have to get executed, execute the workflows, and update the status after each execution is complete.\n\n Set encryption key\n\nn8n automatically generates an encryption key upon first startup. You can also provide your own custom key using environment variable if desired.\n\nThe encryption key of the main n8n instance must be shared with all worker and webhooks processor nodes to ensure these worker nodes are able to access credentials stored in the database.\n\nSet the encryption key for each worker node in a configuration file or by setting the corresponding environment variable:\n\n Set executions mode\n\n/// note | Database considerations\nn8n recommends using Postgres 13+. Running n8n with execution mode set to queue with an SQLite database isn't recommended.\n///\n\nSet the environment variable EXECUTIONSMODE to queue on the main instance and any workers using the following command.\n\nAlternatively, you can set executions.mode to queue in the configuration file.\n\n Start Redis\n\n/// note | Running Redis on a separate machine\nYou can run Redis on a separate machine, just make sure that it's accessible by the n8n instance.\n///\n\nTo run Redis in a Docker container, follow the instructions below:\n\nRun the following command to start a Redis instance:\n\nBy default, Redis runs on localhost on port 6379 with no password. Based on your Redis configuration, set the following configurations for the main n8n process. These will allow n8n to interact with Redis.\n\n| Using configuration file | Using environment variables | Description |\n| ------ | ------ | ----- |\n| queue.bull.redis.host:localhost | QUEUEBULLREDISHOST=localhost | By default, Redis runs on localhost. |\n| queue.bull.redis.port:6379 | QUEUEBULLREDISPORT=6379 | The default port is 6379. If Redis is running on a different port, configure the value. |\n\nYou can also set the following optional configurations:\n\n| Using configuration file | Using environment variables | Description |\n| ------ | ------ | ----- |\n| queue.bull.redis.username:USERNAME | QUEUEBULLREDISUSERNAME | By default, Redis doesn't require a username. If you're using a specific user, configure it variable. |\n| queue.bull.redis.password:PASSWORD | QUEUEBULLREDISPASSWORD | By default, Redis doesn't require a password. If you're using a password, configure it variable. |\n| queue.bull.redis.db:0 | QUEUEBULLREDISDB | The default value is 0. If you change this value, update the configuration. |\n| queue.bull.redis.timeoutThreshold:10000ms | QUEUEBULLREDISTIMEOUTTHRESHOLD | Tells n8n how long it should wait if Redis is unavailable before exiting. The default value is 10000 (ms). |\n| queue.bull.gracefulShutdownTimeout:30 | N8NGRACEFULSHUTDOWNTIMEOUT | A graceful shutdown timeout for workers to finish executing jobs before terminating the process. The default value is 30 seconds. |\n\nNow you can start your n8n instance and it will connect to your Redis instance.\n\n Start workers\n\nYou will need to start worker processes to allow n8n to execute workflows. If you want to host workers on a separate machine, install n8n on the machine and make sure that it's connected to your Redis instance and the n8n database.\n\nStart worker processes by running the following command from the root directory:\n\nIf you're using Docker, use the following command:\n\nYou can set up multiple worker processes. Make sure that all the worker processes have access to Redis and the n8n database.\n\n Worker server\n\nEach worker process runs a server that exposes optional endpoints:\n\n- /healthz: returns whether the worker is up, if you enable the QUEUEHEALTHCHECKACTIVE environment variable\n- /healthz/readiness: returns whether worker's DB and Redis connections are ready, if you enable the QUEUEHEALTHCHECKACTIVE environment variable\n- credentials overwrite endpoint\n- /metrics\n\n View running workers \n\n/// info | Feature availability\n Available on Self-hosted Enterprise plans.\n If you want access to this feature on Cloud Enterprise, contact n8n.\n///\n\nYou can view running workers and their performance metrics in n8n by selecting Settings > Workers.\n\n Running n8n with queues\n\nWhen running n8n with queues, all the production workflow executions get processed by worker processes. This means that even the webhook calls get delegated to the worker processes, which might add some overhead and extra latency.\n\nRedis acts as the message broker, and the database persists data, so access to both is required. Running a distributed system with this setup over SQLite isn't supported.\n\n/// note | Migrate data\nIf you want to migrate data from one database to another, you can use the Export and Import commands. Refer to the CLI commands for n8n documentation to learn how to use these commands.\n///\n\n Webhook processors\n\n/// note | Keep in mind\nWebhook processes rely on Redis and need the EXECUTIONSMODE environment variable set too. Follow the configure the workers section above to setup webhook processor nodes.\n///\n\nWebhook processors are another layer of scaling in n8n. Configuring the webhook processor is optional, and allows you to scale the incoming webhook requests.\n\nThis method allows n8n to process a huge number of parallel requests. All you have to do is add more webhook processes and workers accordingly. The webhook process will listen to requests on the same port (default: 5678). Run these processes in containers or separate machines, and have a load balancing system to route requests accordingly.\n\nn8n doesn't recommend adding the main process to the load balancer pool. If you add the main process to the pool, it will receive requests and possibly a heavy load. This will result in degraded performance for editing, viewing, and interacting with the n8n UI.\n\nYou can start the webhook processor by executing the following command from the root directory:\n\nIf you're using Docker, use the following command:\n\n Configure webhook URL\n\nTo configure your webhook URL, execute the following command on the machine running the main n8n instance:\n\nYou can also set this value in the configuration file.\n\n Configure load balancer\n\nWhen using multiple webhook processes you will need a load balancer to route requests. If you are using the same domain name for your n8n instance",
  "category": "hosting",
  "nodeType": null,
  "keywords": [
    "queue",
    "mode",
    "main",
    "redis",
    "webhook",
    "worker",
    "process",
    "running",
    "using",
    "workers",
    "processes"
  ],
  "fetchedAt": "2025-10-07T16:16:03.014Z",
  "hash": "94fefbe8763da885b50070477355caab"
}