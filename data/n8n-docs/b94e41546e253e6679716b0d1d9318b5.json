{
  "title": "Merge",
  "url": "https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.merge",
  "content": "---\ntitle: Merge\ndescription: Documentation for the Merge node in n8n, a workflow automation platform. Includes guidance on usage, and links to examples.\ncontentType: [integration, reference]\npriority: critical\n---\n\n Merge\n\nUse the Merge node to combine data from multiple streams, once data of all streams is available.\n\n/// note | Major changes in 0.194.0\nThe n8n team overhauled this node in n8n 0.194.0. This document reflects the latest version of the node. If you're using an older version of n8n, you can find the previous version of this document here.\n///\n\n/// note | Minor changes in 1.49.0\nn8n version 1.49.0 introduced the option to add more than two inputs. Older versions only support up to two inputs. If you're running an older version and want to combine multiple inputs in these versions, use the Code node.\n\nThe Mode > SQL Query feature was also added in n8n version 1.49.0 and isn't available in older versions.\n///\n\n Node parameters\n\nYou can specify how the Merge node should combine data from different data streams by choosing a Mode: \n\n Append\n\nKeep data from all inputs. Choose a Number of Inputs to output items of each input, one after another. The node waits for the execution of all connected inputs. \n\n<figure markdown=\"span\">\n!Sample Append mode inputs and output. Two separate data sources are on the left, one with items A, B, C and one with items D, E, F. The final data source combines both and lists A, B, C, D, E, F.\n<figcaption>Append mode inputs and output</figcaption>\n</figure>\n\n Combine\n\nCombine data from two inputs. Select an option in Combine By to determine how you want to merge the input data.\n\n Matching Fields\n\nCompare items by field values. Enter the fields you want to compare in Fields to Match. \n\nn8n's default behavior is to keep matching items. You can change this using the Output Type setting:\n\n Keep Matches: Merge items that match. This is like an inner join.\n Keep Non-Matches: Merge items that don't match.\n Keep Everything: Merge items together that do match and include items that don't match. This is like an outer join.\n Enrich Input 1: Keep all data from Input 1, and add matching data from Input 2. This is like a left join.\n Enrich Input 2: Keep all data from Input 2, and add matching data from Input 1. This is like a right join.\n\n<figure markdown=\"span\">\n!Sample Combine mode inputs and output. Two separate data sources are on the left. The final data source combines these data sources by matching fields.\n<figcaption>Combine by Matching Fields mode inputs and output</figcaption>\n</figure>\n\n Position\n\nCombine items based on their order. The item at index 0 in Input 1 merges with the item at index 0 in Input 2, and so on.\n\n<figure markdown=\"span\">\n!Sample Combine mode inputs and output. Two separate data sources are on the left. The final data source combines these data sources by index position.\n<figcaption>Combine by Position mode inputs and output</figcaption>\n</figure>\n\n All Possible Combinations\n\nOutput all possible item combinations, while merging fields with the same name.\n\n<figure markdown=\"span\">\n!Sample Combine mode inputs and output. Two separate data sources are on the left. The final data source combines these data sources by all possible combinations.\n<figcaption>Combine by All Possible Combinations mode inputs and output</figcaption>\n</figure>\n\n Combine mode options\n\nWhen merging data by Mode > Combine, you can set these Options:\n\n Clash Handling: Choose how to merge when data streams clash, or when there are sub-fields. Refer to Clash handling for details.\n Fuzzy Compare: Whether to tolerate type differences when comparing fields (enabled), or not (disabled, default). For example, when you enable this, n8n treats \"3\" and 3 as the same.\n Disable Dot Notation: This prevents accessing child fields using parent.child in the field name.\n Multiple Matches: Choose how n8n handles multiple matches when comparing data streams.\n     Include All Matches: Output multiple items if there are multiple matches, one for each match.\n     Include First Match Only: Keep the first item per match and discard the remaining multiple matches.\n Include Any Unpaired Items: Choose whether to keep or discard unpaired items when merging by position. The default behavior is to leave out the items without a match. \n\n Clash Handling\n\n--8<-- \"snippets/integrations/builtin/core-nodes/merge/field-value-clash.md\"\n\n SQL Query\n\nWrite a custom SQL Query to merge the data. \n\nExample: \n\nData from previous nodes are available as tables and you can use them in the SQL query as input1, input2, input3, and so on, based on their order. Refer to AlaSQL GitHub page for a full list of supported SQL statements. \n\n Choose Branch\n\nChoose which input to keep. This option always waits until the data from both inputs is available. You can choose to Output:\n\n The Input 1 Data\n The Input 2 Data\n A Single, Empty Item\n\nThe node outputs the data from the chosen input, without changing it.\n\n Templates and examples\n\n<!-- see https://www.notion.so/n8n/Pull-in-templates-for-the-integrations-pages-37c716837b804d30a33b47475f6e3780 -->\n[[ templatesWidget(page.title, 'merge') ]]\n\n Merging data streams with uneven numbers of items\n\nThe items passed into Input 1 of the Merge node will take precedence. For example, if the Merge node receives five items in Input 1 and 10 items in Input 2, it only processes five items. The remaining five items from Input 2 aren't processed.\n\n Branch execution with If and Merge nodes\n\n--8<-- \"snippets/integrations/builtin/core-nodes/merge/if-merge-branch-execution.md\"\n\n Try it out: A step by step example\n\nCreate a workflow with some example input data to try out the Merge node.\n\n Set up sample data using the Code nodes\n\n1. Add a Code node to the canvas and connect it to the Start node.\n2. Paste the following JavaScript code snippet in the JavaScript Code field:\n\n3. Add a second Code node, and connect it to the Start node.\n4. Paste the following JavaScript code snippet in the JavaScript Code field:\n\n Try out different merge modes\n\nAdd the Merge node. Connect the first Code node to Input 1, and the second Code node to Input 2. Run the workflow to load data into the Merge node.\n\nThe final workflow should look like this:\n\n[[ workflowDemo(\"https://api.n8n.io/workflows/templates/655\") ]]\n\nNow try different options in Mode to see how it affects the output data.\n\n Append\n\nSelect Mode > Append, then select Execute step.\n\nYour output in table view should look like this:\n<!-- vale off -->\n| name | language | greeting |\n| --- | --- | --- |\n| Stefan | de |  |\n| Jim | en |  |\n| Hans | de |  |\n|   | en | Hello |\n|   | de | Hallo |\n<!-- vale on -->\n\n Combine by Matching Fields\n\nYou can merge these two data inputs so that each person gets the correct greeting for their language.\n\n1. Select Mode > Combine.\n2. Select Combine by > Matching Fields.\n3. In both Input 1 Field and Input 2 Field, enter language. This tells n8n to combine the data by matching the values in the language field in each data set.\n4. Select Execute step.\n\nYour output in table view should look like this:\n<!-- vale off -->\n\n| name | language | greeting |\n| --- | --- | --- |\n| Stefan | de | Hallo |\n| Jim | en | Hello  |\n| Hans | de | Hallo |\n<!-- vale on -->\n\n Combine by Position\n\nSelect Mode > Combine, Combine by > Position, then select Execute step.\n\nYour output in table view should look like this:\n<!-- vale off -->\n| name | language | greeting |\n| --- | --- | --- |\n| Stefan | en | Hello |\n| Jim | de | Hallo  |\n<!-- vale on -->\n\n Keep unpaired items\n\nIf you want to keep all items, select Add Option > Include Any Unpaired Items, then turn on Include Any Unpaired Items.\n\nYour output in table view should look like this:\n<!-- vale off -->\n| name | language | greeting |\n| --- | --- | --- |\n| Stefan | en | Hello |\n| Jim | de | Hallo  |\n| Hans | de |  |\n<!-- vale on -->\n\n Combine by All Possible Combinations \n\nSelect Mode > Combine, Combine by > All Possible Combinations, then select Execute step.\n\nY",
  "category": "core-nodes",
  "nodeType": "n8n-nodes-base.merge.md",
  "keywords": [
    "merge",
    "data",
    "combine",
    "items",
    "input",
    "node",
    "output",
    "this",
    "inputs",
    "mode"
  ],
  "fetchedAt": "2025-10-07T16:14:08.820Z",
  "hash": "b94e41546e253e6679716b0d1d9318b5"
}