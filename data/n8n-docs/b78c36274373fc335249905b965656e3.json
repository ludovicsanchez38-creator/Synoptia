{
  "title": "Simple Vector Store node",
  "url": "https://docs.n8n.io/integrations/builtin/cluster-nodes/root-nodes/n8n-nodes-langchain.vectorstoreinmemory",
  "content": "---\ntitle: Simple Vector Store node documentation\ndescription: Learn how to use the Simple Vector Store node in n8n. Follow technical documentation to integrate Simple Vector Store node into your workflows.\ncontentType: [integration, reference]\npriority: medium\n---\n\n Simple Vector Store node\n\nUse the Simple Vector Store node to store and retrieve embeddings in n8n's in-app memory. \n\nOn this page, you'll find the node parameters for the Simple Vector Store node, and links to more resources.\n\n--8<-- \"snippets/integrations/builtin/cluster-nodes/sub-node-expression-resolution.md\"\n\n/// note | This node is different from AI memory nodes\nThe simple vector storage described here is different to the AI memory nodes such as Simple Memory.\n\nThis node creates a vector database in the app memory.\n///\n\n Data safety limitations\n\nBefore using the Simple Vector Store node, it's important to understand its limitations and how it works.\n\n/// warning\nn8n recommends using Simple Vector store for development use only.\n///\n\n Vector store data isn't persistent\n\nThis node stores data in memory only. All data is lost when n8n restarts and may also be purged in low-memory conditions.\n\n All instance users can access vector store data\n\nMemory keys for the Simple Vector Store node are global, not scoped to individual workflows.\n\nThis means that all users of the instance can access vector store data by adding a Simple Vector Store node and selecting the memory key, regardless of the access controls set for the original workflow. Take care not to expose sensitive information when ingesting data with the Simple Vector Store node.\n\n Node usage patterns\n\nYou can use the Simple Vector Store node in the following patterns.\n\n Use as a regular node to insert and retrieve documents\n\nYou can use the Simple Vector Store as a regular node to insert or get documents. This pattern places the Simple Vector Store in the regular connection flow without using an agent.\n\nYou can see an example of in step 2 of this template.\n\n Connect directly to an AI agent as a tool\n\nYou can connect the Simple Vector Store node directly to the tool connector of an AI agent to use a vector store as a resource when answering queries.\n\nHere, the connection would be: AI agent (tools connector) -> Simple Vector Store node.\n\n Use a retriever to fetch documents\n\nYou can use the Vector Store Retriever node with the Simple Vector Store node to fetch documents from the Simple Vector Store node. This is often used with the Question and Answer Chain node to fetch documents from the vector store that match the given chat input.\n\nAn example of the connection flow (the linked example uses Pinecone, but the pattern is the same) would be: Question and Answer Chain (Retriever connector) -> Vector Store Retriever (Vector Store connector) -> Simple Vector Store.\n\n Use the Vector Store Question Answer Tool to answer questions\n\nAnother pattern uses the Vector Store Question Answer Tool to summarize results and answer questions from the Simple Vector Store node. Rather than connecting the Simple Vector Store directly as a tool, this pattern uses a tool specifically designed to summarizes data in the vector store.\n\nThe connections flow in this case would look like this: AI agent (tools connector) -> Vector Store Question Answer Tool (Vector Store connector) -> Simple Vector store.\n\n Memory Management\n\nThe Simple Vector Store implements memory management to prevent excessive memory usage:\n\n- Automatically cleans up old vector stores when memory pressure increases\n- Removes inactive stores that haven't been accessed for a configurable amount of time\n\n Configuration Options\n\nYou can control memory usage with these environment variables:\n\n | Variable                      | Type   | Default | Description                                                                         |\n |-------------------------------|--------|---------|-------------------------------------------------------------------------------------|\n | N8NVECTORSTOREMAXMEMORY | Number | -1      | Maximum memory in MB allowed for all vector stores combined (-1 to disable limits). |\n | N8NVECTORSTORETTLHOURS  | Number | -1      | Hours of inactivity after which a store gets removed (-1 to disable TTL).           |\n\nOn n8n Cloud, these values are preset to 100MB (about 8,000 documents, depending on document size and metadata) and 7 days respectively. For self-hosted instances, both values default to -1(no memory limits or time-based cleanup).\n\n Node parameters\n\n--8<-- \"snippets/integrations/builtin/cluster-nodes/vector-store-mode.md\"\n\n Rerank Results\n\n--8<-- \"snippets/integrations/builtin/cluster-nodes/vector-store-rerank-results.md\"\n\n<!-- vale from-write-good.Weasel = NO -->\n Get Many parameters\n<!-- vale from-write-good.Weasel = YES -->\n\n Memory Key: Select or create the key containing the vector memory you want to query.\n Prompt: Enter the search query.\n Limit: Enter how many results to retrieve from the vector store. For example, set this to 10 to get the ten best results.\n\n Insert Documents parameters\n\n Memory Key: Select or create the key you want to store the vector memory as.\n Clear Store: Use this parameter to control whether to wipe the vector store for the given memory key for this workflow before inserting data (turned on).\n\n Retrieve Documents (As Vector Store for Chain/Tool) parameters\n\n Memory Key: Select or create the key containing the vector memory you want to query.\n\n Retrieve Documents (As Tool for AI Agent) parameters\n\n Name: The name of the vector store.\n Description: Explain to the LLM what this tool does. A good, specific description allows LLMs to produce expected results more often.\n Memory Key: Select or create the key containing the vector memory you want to query.\n Limit: Enter how many results to retrieve from the vector store. For example, set this to 10 to get the ten best results.\n\n Templates and examples\n\n<!-- see https://www.notion.so/n8n/Pull-in-templates-for-the-integrations-pages-37c716837b804d30a33b47475f6e3780 -->\n[[ templatesWidget(page.title, 'in-memory-vector-store') ]]\n\n Related resources\n\nRefer to LangChains's Memory Vector Store documentation for more information about the service.\n\n--8<-- \"snippets/integrations/builtin/cluster-nodes/langchain-overview-link.md\"",
  "category": "cluster-nodes",
  "nodeType": "n8n-nodes-langchain.vectorstoreinmemory.md",
  "keywords": [
    "simple",
    "vector",
    "store",
    "node",
    "memory",
    "this",
    "tool",
    "data",
    "documents",
    "from"
  ],
  "fetchedAt": "2025-10-07T16:15:26.260Z",
  "hash": "b78c36274373fc335249905b965656e3"
}