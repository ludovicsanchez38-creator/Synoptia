{
  "title": "Notion node common issues",
  "url": "https://docs.n8n.io/integrations/builtin/app-nodes/n8n-nodes-base.notion/common-issues",
  "content": "---\ntitle: Notion node common issues\ndescription: Documentation for common issues and questions in the Notion node in n8n, a workflow automation platform. Includes details of the issue and suggested solutions.\ncontentType: [integration, reference]\npriority: high\n---\n\n Notion node common issues\n\nHere are some common errors and issues with the Notion node and steps to resolve or troubleshoot them.\n\n Relation property not displaying\n\nThe Notion node only supports displaying the data relation property for two-way relations. When you connect two Notion databases with a two-way relationship, you can select or filter by the relation property when working with the Notion node's Database Page resource.\n\nTo enable two-way relations, edit the relation property in Notion and enable the Show on [name of related database] option to create a reverse relation. Select a name to use for the relation in the new context. The relation is now accessible in n8n when filtering or selecting.\n\nIf you need to work with Notion databases with one-way relationship, you can use the HTTP Request with your existing Notion credentials. For example, to update a one-way relationship, you can send a PATCH request to the following URL:\n\nEnable Send Body, set the Body Content Type to JSON, and set Specify Body to Using JSON.  Afterward, you can enter a JSON object like the following into the JSON field:\n\n Create toggle heading\n\nThe Notion node allows you to create headings and toggles when adding blocks to Page, Database Page, or Block resources. Creating toggleable headings isn't yet supported by the Notion node itself.\n\nYou can work around this be creating a regular heading and then modifying it to enable the istoggleable property:\n\n1. Add a heading with Notion node.\n2. Select the resource you want to add a heading to:\n\t To add a new page with a heading, select the Page or Database Page resources with the Create operation.\n\t To add a heading to an existing page, select the Block resource with the Append After operation.\n3. Select Add Block and set the Type Name or ID to either Heading 1, Heading 2, or Heading 3.\n4. Add an HTTP Request node connected to the Notion node and select the GET method.\n5. Set the URL to https://api.notion.com/v1/blocks/<blockID>. For example, if your added the heading to an existing page, you could use the following URL: https://api.notion.com/v1/blocks/{{ $json.results[0].id }}. If you created a new page instead of appending a block, you may need to discover the block ID by querying the page contents first.\n6. Select Predefined Credential Type and connect your existing Notion credentials.\n7. Add an Edit Fields (Set) node after the HTTP Request node.\n8. Add heading1.istoggleable as a new Boolean field set to true. Swap heading1 for a different heading number as necessary.\n9. Add a second HTTP Request node after the Edit Fields (Set) node.\n10. Set the Method to PATCH and use https://api.notion.com/v1/blocks/{{ $json.id }} as the URL value.\n11. Select Predefined Credential Type and connect your existing Notion credentials.\n12. Enable Send Body and set a parameter.\n13. Set the parameter Name to heading1 (substitute heading1 for the heading level you are using).\n14. Set the parameter Value to {{ $json.heading1 }} (substitute heading1 for the heading level you are using).\n\nThe above sequence will create a regular heading block. It will query the newly created header, add the istoggleable property, and update the heading block.\n\n Handle null and empty values\n\nYou may receive a validation error when working with the Notion node if you submit fields with empty or null values. This can occur any time you populate fields from previous nodes when that data is missing.\n\nTo work around this, check for the existence of the field data before sending it to Notion or use a default value.\n\nTo check for the data before executing the Notion node, use an If node to check whether the field is unset. This allows you to use the Edit Fields (Set) node to conditionally remove the field when it doesn't have a valid value.\n\nAs an alternative, you can set a default value if the incoming data doesn't provide one.",
  "category": "app-nodes",
  "nodeType": "notion",
  "keywords": [
    "notion",
    "node",
    "common",
    "issues",
    "heading",
    "with",
    "page",
    "select",
    "relation",
    "when",
    "json",
    "block"
  ],
  "fetchedAt": "2025-10-07T16:14:45.133Z",
  "hash": "b1f74741c4af7c1f1836f0e173ca4080"
}