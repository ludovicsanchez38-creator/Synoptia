{
  "title": "Task runners",
  "url": "https://docs.n8n.io/hosting/configuration/task-runners",
  "content": "---\ntitle: Task runners\ndescription: How to configure task runners to execute tasks using internal or external runner processes.\ncontentType: howto\n---\n\n Task runners\n\nTask runners are a generic mechanism to execute tasks in a secure and performant way. They're used to execute user-provided JavaScript and Python code in the Code node.\n\n/// note | In beta\nTask runner support for native Python and the n8nio/runners image are in beta. Until this feature is stable, you must use the N8NNATIVEPYTHONRUNNER=true environment variable to enable the Python runner.\n///\n\nThis document describes how task runners work and how you can configure them.\n\n How it works\n\nThe task runner feature consists of these components: one or more task runners, a task broker, and a task requester.\n\n!Task runner overview\n\nTask runners connect to the task broker using a websocket connection. A task requester submits a task request to the broker where an available task runner can pick it up for execution.\n\nThe runner executes the task and submits the results to the task requester. The task broker coordinates communication between the runner and the requester.\n\nThe n8n instance (main and worker) acts as the broker. The Code node in this case is the task requester.\n\n Task runner modes\n\nYou can use task runners in two different modes: internal and external.\n\n Internal mode\n\nIn internal mode, the n8n instance launches the task runner as a child process. The n8n process monitors and manages the life cycle of the task runner. The task runner process shares the same uid and gid as n8n. This is not recommended for production.\n\n External mode\n\nIn external mode, a launcher application launches task runners on demand and manages their lifecycle. Typically, this means that next to n8n you add a sidecar container running the n8nio/runners image containing the launcher, the JS task runner and the Python task runner. This sidecar container is independent from the n8n instance.\n\n!Task runner deployed as a side-car container\n\nWhen using Queue mode, each worker needs to have its own sidecar container for task runners. \n\nIn addition, if you haven't enabled offloading manual executions to workers (if you aren't setting OFFLOADMANUALEXECUTIONSTOWORKERS=true in your configuration), then your main instance will run manual executions and needs its own sidecar container for task runners as well. Please note that running n8n with offloading disabled isn't recommended for production.\n\n Setting up external mode\n\nIn external mode, you run the n8nio/runners image as a sidecar container next to n8n. Below you will find a docker compose as a reference. Keep in mind that the n8nio/runners image version must match that of the n8nio/n8n image, and the n8n version must be >=1.111.0.\n\n Configuring n8n container in external mode\n\nThese are the main environment variables that you can set on the n8n container running in external mode:\n\n| Environment variables                                  | Description                                                |\n|--------------------------------------------------------|------------------------------------------------------------|\n| N8NRUNNERSENABLED=true                             | Enables task runners.                                      |\n| N8NRUNNERSMODE=external                            | Use task runners in external mode.                         |\n| N8NRUNNERSAUTHTOKEN=<random secure shared secret> | A shared secret task runners use to connect to the broker. |\n| N8NRUNNERSBROKERLISTENADDRESS=0.0.0.0 | By default, the task broker only listens to localhost. When using multiple containers (for example, with Docker Compose), it needs to be able to accept external connections. |\n\nFor full list of environment variables see task runner environment variables.\n\n Configuring runners container in external mode\n\nThese are the main environment variables that you can set on the runners container running in external mode:\n\n| Environment variables | Description |\n| ------ | ----- |\n| N8NRUNNERSAUTHTOKEN=<random secure shared secret> | The shared secret the task runner uses to connect to the broker. |\n| N8NRUNNERSTASKBROKERURI=localhost:5679 | The address of the task broker server within the n8n instance. |\n| N8NRUNNERSAUTOSHUTDOWNTIMEOUT=15 | Number of seconds of inactivity to wait before shutting down the task runner process. The launcher will automatically start the runner again when there are new tasks to execute. Set to 0 to disable automatic shutdown. |\n\nFor full list of environment variables see task runner environment variables.\n\n Configuring launcher in runners container in external mode\n\nThe launcher will read environment variables from runners container environment, and will pass them along to each runner as defined in the default launcher configuration file, located in the container at /etc/task-runners.json. The default launcher configuration file is locked down, but you will likely want to edit this file, for example, to allowlist first- or third-party modules. To customize the launcher configuration file, mount to this path:\n\nFor further information about the launcher config file, see here.\n\n Adding extra dependencies \n\nYou can customize the n8nio/runners image. To do so, you will find the runners Dockerfile at this directory in the n8n repository. The manifests referred to below are also found in this directory.\n\nTo make additional packages available on the Code node, you can bake extra packages into your custom runners image at build time:\n\n JavaScript: edit docker/images/runners/package.json\n  (package.json manifest used to install runtime-only deps into the JS runner)\n Python (Native): edit docker/images/runners/extras.txt\n  (requirements.txt-style list installed into the Python runner venv)\n\n> Important: for security, any external libraries must be explicitly allowed for Code node use. Update n8n-task-runners.json to allowlist what you add.\n\n 1) JavaScript packages\n\nEdit the runtime extras manifest docker/images/runners/package.json:\n\nAdd any packages you want under \"dependencies\" (pin them for reproducibility), e.g.:\n\n 2) Python packages\n\nEdit the requirements file docker/images/runners/extras.txt:\n\nPin versions (for example, ==2.3.2) for deterministic builds.\n\n 3) Allowlist packages for the Code node\n\nOpen docker/images/runners/n8n-task-runners.json and add your packages to the env overrides:\n\n NODEFUNCTIONALLOWBUILTIN: comma-separated list of allowed node builtin modules.\n NODEFUNCTIONALLOWEXTERNAL: comma-separated list of allowed JS packages.\n N8NRUNNERSSTDLIBALLOW: comma-separated list of allowed Python standard library packages.\n N8NRUNNERSEXTERNALALLOW: comma-separated list of allowed Python packages.\n\n 4) Build your custom image\n\nFor example, from the n8n repository root:\n\n 5) Run it\n\nFor example:",
  "category": "hosting",
  "nodeType": null,
  "keywords": [
    "task",
    "runners",
    "runner",
    "external",
    "mode",
    "container",
    "environment",
    "this",
    "packages",
    "python"
  ],
  "fetchedAt": "2025-10-07T16:15:58.980Z",
  "hash": "15606ad8b397b4f5f738d573faf7b28f"
}