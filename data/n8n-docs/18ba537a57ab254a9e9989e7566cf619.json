{
  "title": "n8n Form node",
  "url": "https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.form",
  "content": "---\ntitle: n8n Form node documentation\ndescription: Documentation for the n8n Form node in n8n, a workflow automation platform. Includes guidance on usage and links to examples.\ncontentType: [integration, reference]\n---\n\n n8n Form node\n\nUse the n8n Form node to create user-facing forms with multiple steps. You can add other nodes with custom logic between to process user input. You must start the workflow with the n8n Form Trigger node.\n\n[[ workflowDemo(\"file:///integrations/builtin/core-nodes/n8n-nodes-base.form/mutually-exclusive-branching.json\") ]]\n\n Setting up the node\n\n Set default selections with query parameters\n\nYou can set the initial values for fields by using query parameters with the initial URL provided by the n8n Form Trigger node. Every page in the form receives the same query parameters sent to the n8n Form Trigger node URL.\n\n/// note | Only for production\nQuery parameters are only available when using the form in production mode. n8n won't populate field values from query parameters in testing mode.\n///\n\n<!-- vale from-microsoft.Percentages = NO -->\nWhen using query parameters, percent-encode any field names or values that use special characters. This ensures n8n uses the initial values for the given fields. You can use tools like URL Encode/Decode to format your query parameters using percent-encoding.\n\nAs an example, imagine you have a form with the following properties:\n\n Production URL: https://my-account.n8n.cloud/form/my-form\n Fields:\n\t name: Jane Doe\n\t email: jane.doe@example.com\n\nWith query parameters and percent-encoding, you could use the following URL to set initial field values to the data above:\n\nHere, percent-encoding replaces the at-symbol (@) with the string %40 and the space character ( ) with the string %20. This will set the initial value for these fields no matter which page of the form they appear on.\n<!-- vale from-microsoft.Percentages = YES -->\n\n Displaying custom HTML\n\nYou can display custom HTML on your form by adding a Custom HTML field to your form. This provides an HTML box where you can insert arbitrary HTML code to display as part of the form page.\n\nYou can use the HTML field to enrich your form page by including things like links, images, videos, and more. n8n will render the content with the rest of the form fields in the normal document flow.\n\nBecause custom HTML content is read-only, these fields aren't included in the form output data by default. To include the raw HTML content in the node output, provide a name for the data using the Element Name field.\n\nThe HTML field doesn't support <script>, <style>, or <input> elements.\n\nIf you're using the Form Ending Page Type, you can fully customize the final page that you send users (including the use of <script>, <style>, and <input> elements) by selecting the On n8n Form Submission parameter to Show Text.\n\n Including hidden fields\n\nIt's possible to include fields in a form without displaying them to users. This is useful when you want to pass extra data to the form that doesn't require interactive user input.\n\nTo add fields that won't show up on the form, use the Hidden Field form element. There, you can define the Field Name and optionally provide a default value by filling out the Field Value.\n\nWhen serving the form, you can pass values for hidden fields using query parameters.\n\n Defining the form using JSON\n\nUse Define Form > Using JSON to define the fields of your form with a JSON array of objects. Each object defines a single field by using a combination of these keys:\n\n- fieldLabel: The label that appears above the input field. \n- fieldType: Choose from checkbox, date, dropdown, email, file, hiddenField, html, number, password, radio, text, or textarea.\n    - Use date to include a date picker in the form. Refer to Date and time with Luxon for more information on formatting dates.\n\t- When using dropdown, set the choices with fieldOptions (reference the example below). By default, the dropdown is single-choice. To make it multiple-choice, set multiselect to true. As an alternative, you can use checkbox or radio together with fieldOptions too.\n\t- When using file, set multipleFiles to true to allow users to select more than one file. To define the file types to allow, set acceptFileTypes to a string containing a comma-separated list of file extensions (reference the example below).\n\t- Use hiddenField to add a hidden field to your form. Refer to Including hidden fields for more information.\n\t- Use html to display custom HTML on your form. Refer to Displaying custom HTML for more information.\n- placeholder: Specify placeholder data for the field. You can use this for every fieldType except dropdown, date, and file.\n- requiredField: Require users to complete this field on the form.\n\nAn example JSON that shows the general format required and the keys available:\n\n Form Ending\n\nUse the Form Ending Page Type to end a form and either show a completion page, redirect the user to a URL, or display custom HTML or text. Only one Form Ending page displays per execution, even when n8n executes multiple branches that contain Form Ending nodes.\n\nChoose between these options when using On n8n Form Submission:\n\n- Show Completion Screen: Shows users a final screen to confirm that they submitted the form.\n\t- Fill in Completion Title to set the h1 title on the form.\n\t- n8n displays the Completion Message as a subtitle below the main h1 title on the form. Use \\n or <br> to add a line break. \n\t- Select Add option and fill in Completion Page Title to set the page's title in the browser tab.\n- Redirect to URL: Redirect the user to a specified URL when the form completes.\n\t- Fill in the URL field with the page you want to redirect to when users complete the form.\n- Show Text: Display a final page defined by arbitrary plain text and HTML.\n\t- Fill in the Text field with the HTML or plain text content you wish to show.\n- Return Binary File: Return a binary file upon completion.\n\t- Fill in Completion Title to set the h1 title on the form.\n\t- n8n displays the Completion Message as a subtitle below the main h1 title on the form. Use \\n or <br> to add a line break. \n\t- Provide the Input Data Field Name containing the binary file to return to the user.\n\n Forms with branches\n\nThe n8n Form node executes and displays its associated form page whenever it receives data from a previous node. When building forms with n8n, to avoid confusion, it's important to understand how forms behave when branching occurs.\n\n Workflows with mutually exclusive branches\n\nForm workflows containing mutually exclusive branches work as expected. n8n will execute a single branch according to the submitted data and conditions you outline. As it executes, n8n will display each page in the branch, ending with an n8n Form node with the Form Ending page type.\n\nThis workflow demonstrates mutually exclusive branching. Each selection can only execute a single branch.\n\n[[ workflowDemo(\"file:///integrations/builtin/core-nodes/n8n-nodes-base.form/mutually-exclusive-branching.json\") ]]\n\n Workflows that may execute multiple branches\n\nForm workflows that send data to multiple branches at the same time require more care. When multiple branches receive data during an execution (for example, from a switch node), n8n executes each branch that receives data sequentially. Upon reaching the end of one branch, the execution will move to the next branch with data.\n\nn8n only executes a single Form Ending n8n Form node for each execution. When multiple branches of a form workflow receive data, n8n ignores all Form Ending nodes except for the one associated with the final branch.\n\nThis workflow may execute more than one branch during an execution. Here, n8n executes all valid branches sequentially. This impacts which n8n Form nodes n8n executes (in particular, which Form Ending node displays):\n\n[[ workflowDemo(\"file:///integrations/builtin/core-nodes/n8n-nodes-base.form/multiple-branch-execution.json\") ]]\n\n Node options\n\nSelect Add Opti",
  "category": "core-nodes",
  "nodeType": "n8n-nodes-base.form.md",
  "keywords": [
    "form",
    "node",
    "with",
    "page",
    "field",
    "when",
    "title",
    "html",
    "using",
    "data"
  ],
  "fetchedAt": "2025-10-07T16:14:06.416Z",
  "hash": "18ba537a57ab254a9e9989e7566cf619"
}