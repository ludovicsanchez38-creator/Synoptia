{
  "title": "KoboToolbox node",
  "url": "https://docs.n8n.io/integrations/builtin/app-nodes/n8n-nodes-base.kobotoolbox",
  "content": "---\ntitle: KoboToolbox node documentation\ndescription: Learn how to use the KoboToolbox node in n8n. Follow technical documentation to integrate KoboToolbox node into your workflows.\ncontentType: [integration, reference]\n---\n\n KoboToolbox node\n\nUse the KoboToolbox node to automate work in KoboToolbox, and integrate KoboToolbox with other applications. n8n has built-in support for a wide range of KoboToolbox features, including creating, updating, deleting, and getting files, forms, hooks, and submissions. \n\nOn this page, you'll find a list of operations the KoboToolbox node supports and links to more resources.\n\n/// note | Credentials\nRefer to KoboToolbox credentials for guidance on setting up authentication. \n///\n\n Operations\n\n File\n\t Create\n\t Delete\n\t Get\n\t Get Many\n Form\n     Get\n     Get Many\n\t\t Redeploy\n Hook\n     Get\n     Get Many\n     Logs\n     Retry All\n     Retry One\n Submission\n     Delete\n     Get\n     Get Many\n     Get Validation Status\n     Update Validation Status\n\n Templates and examples\n\n<!-- see https://www.notion.so/n8n/Pull-in-templates-for-the-integrations-pages-37c716837b804d30a33b47475f6e3780 -->\n[[ templatesWidget(page.title, 'kobotoolbox') ]]\n\n Options\n\n Query Options\n\nThe Query Submission operation supports query options:\n\n In the main section of the Parameters panel:\n     Start controls the index offset to start the query from (to use the API pagination logic).\n     Limit sets the maximum number of records to return. Note that the API always has a limit of 30,000 returned records, whatever value you provide.\n In the Query Options section, you can activate the following parameters:\n     Query lets you specify filter predicates in MongoDB's JSON query format. For example: {\"status\": \"success\", \"submissiontime\": {\"$lt\": \"2021-11-01T01:02:03\"}} queries for all submissions with the value success for the field status, and submitted before November 1st, 2021, 01:02:03.\n     Fields lets you specify the list of fields you want to fetch, to make the response lighter.\n     Sort lets you provide a list of sorting criteria in MongoDB JSON format. For example, {\"status\": 1, \"submissiontime\": -1} specifies a sort order by ascending status, and then descending submission time.\n\nMore details about these options can be found in the Formhub API docsapi-parameters)\n\n Submission options\n\nAll operations that return form submission data offer options to tweak the response. These include:\n\n- Download options lets you download any attachment linked to each particular form submissions, such as pictures and videos. It also lets you select the naming pattern, and the file size to download (if available - typically for images). \n- Formatting options perform some reformatting as described in About reformatting.\n\n About reformatting\n\nThe default JSON format for KoboToolbox submission data is sometimes hard to deal with, because it's not schema-aware, and all fields are therefore returned as strings.\n\nThis node provides a lightweight opinionated reformatting logic, enabled with the Reformat? parameter, available on all operations that return form submissions: the submission query, get, and the attachment download operations.\n\nWhen enabled, the reformatting:\n\n- Reorganizes the JSON into a multi-level hierarchy following the form's groups. By default, question grouping hierarchy is materialized by a / character in the field names, for example Group1/Question1. With reformatting enabled, n8n reorganizes these into Group1.Question1, as nested JSON objects.\n- Renames fields to trim  (not supported by many downstream systems).\n- Parses all geospatial fields (Point, Line, and Area question types) into their standard GeoJSON equivalent.\n- Splits all fields matching any of the Multiselect Mask wildcard masks into an array. Since the multi-select fields appear as space-separated strings, they can't be guessed algorithmically, so you must provide a field naming mask. Format the masks as a comma-separated list. Lists support the  wildcard.\n- Converts all fields matching any of the Number Mask wildcard masks into a JSON float.\n\nHere's a detailed example in JSON:\n\nWith reformatting enabled, and the appropriate masks for multi-select and number formatting (for example, Crops and sqm respectively), n8n parses it into:\n\n--8<-- \"snippets/integrations/builtin/app-nodes/operation-not-supported.md\"",
  "category": "app-nodes",
  "nodeType": "n8n-nodes-base.kobotoolbox.md",
  "keywords": [
    "kobotoolbox",
    "node",
    "options",
    "query",
    "fields",
    "into",
    "submission",
    "json",
    "reformatting",
    "with"
  ],
  "fetchedAt": "2025-10-07T16:14:37.378Z",
  "hash": "931ee2475f10ffeaa6267092aacedb65"
}