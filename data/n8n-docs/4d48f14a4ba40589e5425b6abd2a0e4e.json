{
  "title": "Supabase node common issues",
  "url": "https://docs.n8n.io/integrations/builtin/app-nodes/n8n-nodes-base.supabase/common-issues",
  "content": "---\ntitle: Supabase node common issues\ndescription: Documentation for common issues and questions in the Supabase node in n8n, a workflow automation platform. Includes details of the issue and suggested solutions.\ncontentType: [integration, reference]\npriority: high\n---\n\n Supabase node common issues\n\nHere are some common errors and issues with the Supabase node and steps to resolve or troubleshoot them.\n\n Filtering rows by metadata\n\nTo filter rows by Supabase metadata, set the Select Type to String.\n\nFrom there, you can construct a query in the Filters (String) parameter to filter the metadata using the Supabase metadata query language, inspired by the MongoDB selectors format. Access the metadata properties using the Postgres ->> arrow JSON operator like this (curly brackets denote components to fill in):\n\nFor example to access an age property in the metadata and return results greater than or equal to 21, you could enter the following in the Filters (String) field:\n\nYou can combine these operators to construct more complex queries.\n\n Can't connect to a local Supabase database when using Docker\n\nWhen you run Supabase in Docker, you need to configure the network so that n8n can connect to Supabase.\n\nThe solution depends on how you're hosting the two components.\n\n If only Supabase is in Docker\n\nIf only Supabase is running in Docker, the Docker Compose file used by the self-hosting guide already runs Supabase bound to the correct interfaces.\n\nWhen configuring Supabase credentials, the localhost address should work without a problem (set the Host to localhost).\n\n If Supabase and n8n are running in separate Docker containers\n\nIf both n8n and Supabase are running in Docker in separate containers, you can use Docker networking to connect them.\n\nConfigure Supabase to listen on all interfaces by binding to 0.0.0.0 inside of the container (the official Docker compose configuration already does this this). Add both the Supabase and n8n components to the same user-defined bridge network if you aren't already managing them together in the same Docker Compose file.\n\nWhen configuring Supabase credentials, use the Supabase API gateway container's name (supabase-kong by default) as the host address instead of localhost. For example, if you use the default configuration, you would set the Host to http://supabase-kong:8000.\n\n Records are accessible through Postgres but not Supabase\n\nIf queries for records return empty using the Supabase node, but are available through the Postgres node or with a Postgres client, there may be a conflict with Supabase's Row Level Security (RLS) policy.\n\nSupabase always enables RLS when you create a table in a public schema with the Table Editor. When RLS is active, the API doesn't return any data with the public anon key until you create policies. This is a security measure to ensure that you only expose data you intend to.\n\nTo access data from a table with RLS enabled as the anon role, create a policy to enable the access patterns you intend to use.",
  "category": "app-nodes",
  "nodeType": "supabase",
  "keywords": [
    "supabase",
    "node",
    "common",
    "issues",
    "docker",
    "with",
    "metadata",
    "when",
    "using",
    "access"
  ],
  "fetchedAt": "2025-10-07T16:14:54.388Z",
  "hash": "4d48f14a4ba40589e5425b6abd2a0e4e"
}