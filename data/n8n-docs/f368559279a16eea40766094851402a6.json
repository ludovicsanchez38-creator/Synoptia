{
  "title": "Query JSON with JMESPath",
  "url": "https://docs.n8n.io/code/cookbook/jmespath",
  "content": "---\ntitle: Query JSON with JMESPath\ndescription: n8n supports the JMESPath library, to simplify working with JSON formatted data.\ncontentType: howto\n---\n\n Query JSON with JMESPath\n\nJMESPath is a query language for JSON that you can use to extract and transform elements from a JSON document. For full details of how to use JMESPath, refer to the JMESPath documentation.\n\n The jmespath() method\n\nn8n provides a custom method, jmespath(). Use this method to perform a search on a JSON object using the JMESPath query language.\n\nThe basic syntax is: \n\n=== \"JavaScript\"\n\t\n=== \"Python\"\n\t\n\nTo help understand what the method does, here is the equivalent longer JavaScript:\n\n/// note | Expressions must be single-line\nThe longer code example doesn't work in Expressions, as they must be single-line.\n///\n\nobject is a JSON object, such as the output of a previous node. searchString is an expression written in the JMESPath query language. The JMESPath Specification provides a list of supported expressions, while their Tutorial and Examples provide interactive examples.\n\n/// warning | Search parameter order\nThe examples in the JMESPath Specification follow the pattern search(searchString, object). The JMESPath JavaScript library, which n8n uses, supports search(object, searchString) instead. This means that when using examples from the JMESPath documentation, you may need to change the order of the search function parameters.\n///\n\n Common tasks\n\nThis section provides examples for some common operations. More examples, and detailed guidance, are available in JMESPath's own documentation.\n\nWhen trying out these examples, you need to set the Code node Mode to Run Once for Each Item.\n\n Apply a JMESPath expression to a collection of elements with projections\n\nFrom the JMESPath projections documentation:\n\n> Projections are one of the key features of JMESPath. Use it to apply an expression to a collection of elements. JMESPath supports five kinds of projections:\n> \n>  List Projections\n>  Slice Projections\n>  Object Projections\n>  Flatten Projections\n>  Filter Projections\n\nThe following example shows basic usage of list, slice, and object projections. Refer to the JMESPath projections documentation for detailed explanations of each projection type, and more examples.\n\nGiven this JSON from a webhook node:\n\nRetrieve a list of all the people's first names:\n\n=== \"Expressions (JavaScript)\"\n\n\t\n\n=== \"Code node (JavaScript)\"\n\n\t\n=== \"Code node (Python)\"\n\t\n\nGet a slice of the first names:\n\n=== \"Expressions (JavaScript)\"\n\n\t\n\n=== \"Code node (JavaScript)\"\n\t\n=== \"Code node (Python)\"\n\t\n\nGet a list of the dogs' ages using object projections:\n\n=== \"Expressions (JavaScript)\"\n\n\t\n\n=== \"Code node (JavaScript)\"\n\t\n=== \"Code node (Python)\"\n\t\n\n Select multiple elements and create a new list or object\n\nUse Multiselect to select elements from a JSON object and combine them into a new list or object.\n\nGiven this JSON from a webhook node:\n\n<!-- vale off -->\nUse multiselect list to get the first and last names and create new lists containing both names:\n<!-- vale on -->\n=== \"Expressions (JavaScript)\"\n\n\t[[% raw %]]\n\t\n\t[[% endraw %]]\n\n=== \"Code node (JavaScript)\"\n\n\t\n=== \"Code node (Python)\"\n\t\n\n An alternative to arrow functions in expressions\n\nFor example, generate some input data by returning the below code from the Code node:\n\nYou could do a search like \"find the item with the name Lenovo and tell me their category ID.\"",
  "category": "code",
  "nodeType": null,
  "keywords": [
    "query",
    "json",
    "with",
    "jmespath",
    "node",
    "code",
    "projections",
    "object",
    "javascript",
    "expressions",
    "list",
    "examples"
  ],
  "fetchedAt": "2025-10-07T16:15:50.701Z",
  "hash": "f368559279a16eea40766094851402a6"
}