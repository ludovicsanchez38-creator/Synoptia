{
  "title": "Edit Fields (Set)",
  "url": "https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.set",
  "content": "---\ntitle: Edit Fields (Set)\ndescription: Documentation for the Edit Fields node in n8n, a workflow automation platform. Includes guidance on usage, and links to examples.\ncontentType: [integration, reference]\npriority: critical\n---\n\n Edit Fields (Set)\n\nUse the Edit Fields node to set workflow data. This node can set new data as well as overwrite data that already exists. This node is crucial in workflows which expect incoming data from previous nodes, such as when inserting values to Google Sheets or databases.\n\n Node parameters\n\nThese are the settings and options available in the Edit Fields node.\n\n Mode\n\nYou can either use Manual Mapping to edit fields using the GUI or JSON Output to write JSON that n8n adds to the input data.\n\n Fields to Set\n\nIf you select Mode > Manual Mapping, you can configure the fields by dragging and dropping values from INPUT.\n\nThe default behavior when you drag a value is:\n\n n8n sets the value's name as the field name.\n The field value contains an expression which accesses the value.\n\nIf you don't want to use expressions:\n\n1. Hover over a field. n8n displays the Fixed | Expressions toggle. \n1. Select Fixed.\n\nYou can do this for both the name and value of the field.\n\n!A gif showing the drag and drop action, as well as changing a field to fixed\n\n Keep Only Set Fields\n\nEnable this to discard any input data that you don't use in Fields to Set.\n\n Include in Output\n\nChoose which input data to include in the node's output data.\n\n Node options\n\nUse these options to customize the behavior of the node.\n\n Include Binary Data\n\nIf the input data includes binary data, choose whether to include it in the Edit Fields node's output data.\n\n Ignore Type Conversion Errors\n\nManual Mapping only.\n\nEnabling this allows n8n to ignore some data type errors when mapping fields.\n\n Support Dot Notation\n\nBy default, n8n supports dot notation.\n\nFor example, when using manual mapping, the node follows the dot notation for the Name field. That means if you set the name in the Name field as number.one and the value in the Value field as 20, the resulting JSON is:\n\nYou can prevent this behavior by selecting Add Option > Support Dot Notation, and setting the Dot Notion field to off. Now the resulting JSON is:\n\n Templates and examples\n\n<!-- see https://www.notion.so/n8n/Pull-in-templates-for-the-integrations-pages-37c716837b804d30a33b47475f6e3780 -->\n[[ templatesWidget(page.title, 'set') ]]\n\n Arrays and expressions in JSON Output mode\n\nYou can use arrays and expressions when creating your JSON Output.\n\nFor example, given this input data generated by the Customer Datastore node:\n\nAdd the following JSON in the JSON Output field, with Include in Output set to All Input Fields:\n\nYou get this output:",
  "category": "core-nodes",
  "nodeType": "n8n-nodes-base.set.md",
  "keywords": [
    "edit",
    "fields",
    "(set)",
    "data",
    "node",
    "field",
    "output",
    "this",
    "json",
    "input",
    "value"
  ],
  "fetchedAt": "2025-10-07T16:14:11.246Z",
  "hash": "ec3864c084978ad25d138cb4303789dc"
}