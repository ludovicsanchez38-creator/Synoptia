{
  "title": "Date and time with Luxon",
  "url": "https://docs.n8n.io/code/cookbook/luxon",
  "content": "---\ntitle: Date and time with Luxon\ndescription: Use Luxon to work with date and time in n8n.\ncontentType: howto\n---\n\n Date and time with Luxon\n\nLuxon is a JavaScript library that makes it easier to work with date and time. For full details of how to use Luxon, refer to Luxon's documentation. \n\nn8n passes dates between nodes as strings, so you need to parse them. Luxon makes this easier.\n\n/// note | Python support\nLuxon is a JavaScript library. The two convenience variables created by n8n are available when using Python in the Code node, but their functionality is limited:\n\n You can't perform Luxon operations on these variables. For example, there is no Python equivalent for $today.minus(...).\n The generic Luxon functionality, such as Convert date string to Luxon, isn't available for Python users.\n///\t\n\n Date and time behavior in n8n\n\nBe aware of the following:\n\n In a workflow, n8n converts dates and times to strings between nodes. Keep this in mind when doing arithmetic on dates and times from other nodes.\n With vanilla JavaScript, you can convert a string to a date with new Date('2019-06-23'). In Luxon, you must use a function explicitly stating the format, such as DateTime.fromISO('2019-06-23') or DateTime.fromFormat(\"23-06-2019\", \"dd-MM-yyyy\").\n\n Setting the timezone in n8n\n\nLuxon uses the n8n timezone. This value is either:\n\n Default: America/New York\n A custom timezone for your n8n instance, set using the GENERICTIMEZONE environment variable.\n A custom timezone for an individual workflow, configured in workflow settings.\n\n Common tasks\n\nThis section provides examples for some common operations. More examples, and detailed guidance, are available in Luxon's own documentation.\n\n Get the current datetime or date\n\nUse the $now and $today Luxon objects to get the current time or day:\n\n now: a Luxon object containing the current timestamp. Equivalent to DateTime.now().\n today: a Luxon object containing the current timestamp, rounded down to the day. Equivalent to DateTime.now().set({ hour: 0, minute: 0, second: 0, millisecond: 0 }).\n\nNote that these variables can return different time formats when cast as a string:\n\n=== \"Expressions (JavaScript)\"\n\t\n\n=== \"Code node (JavaScript)\"\n\t\n=== \"Code node (Python)\"\n\t\n\nn8n provides built-in convenience functions to support data transformation in expressions for dates. Refer to Data transformation functions | Dates for more information.\n\n Convert JavaScript dates to Luxon\n\nTo convert a native JavaScript date to a Luxon date:\n\n In expressions, use the .toDateTime() method. For example, {{ (new Date()).ToDateTime() }}.\n In the Code node, use DateTime.fromJSDate(). For example, let luxondate = DateTime.fromJSDate(new Date()).\n\n Convert date string to Luxon\n\nYou can convert date strings and other date formats to a Luxon DateTime object. You can convert from standard formats and from arbitrary strings.\n\n/// note | A difference between Luxon DateTime and JavaScript Date\nWith vanilla JavaScript, you can convert a string to a date with new Date('2019-06-23'). In Luxon, you must use a function explicitly stating the format, such as DateTime.fromISO('2019-06-23') or DateTime.fromFormat(\"23-06-2019\", \"dd-MM-yyyy\").\n///\n If you have a date in a supported standard technical format: \n\nMost dates use fromISO(). This creates a Luxon DateTime from an ISO 8601 string. For example:\n\n=== \"Expressions (JavaScript)\"\n\n\t\n\n=== \"Code node (JavaScript)\"\n\n\t\n\nLuxon's API documentation has more information on fromISO.\n\nLuxon provides functions to handle conversions for a range of formats. Refer to Luxon's guide to Parsing technical formats for details.\n\n If you have a date as a string that doesn't use a standard format: \n\nUse Luxon's Ad-hoc parsing. To do this, use the fromFormat() function, providing the string and a set of tokens that describe the format.\n\nFor example, you have n8n's founding date, 23rd June 2019, formatted as 23-06-2019. You want to turn this into a Luxon object:\n\n=== \"Expressions (JavaScript)\"\n\n\t\n\n=== \"Code node (JavaScript)\"\n\n\t\n\nWhen using ad-hoc parsing, note Luxon's warning about Limitations. If you see unexpected results, try their Debugging guide.\n\n Get n days from today\n\nGet a number of days before or after today. \n\n=== \"Expressions (JavaScript)\"\n\n\tFor example, you want to set a field to always show the date seven days before the current date.\n\n\tIn the expressions editor, enter:\n\n\t\n\n\tOn the 23rd June 2019, this returns [Object: \"2019-06-16T00:00:00.000+00:00\"].\n\n\tThis example uses n8n's custom variable $today for convenience. It's the equivalent of DateTime.now().set({ hour: 0, minute: 0, second: 0, millisecond: 0 }).minus({days: 7}).\n\n=== \"Code node (JavaScript)\"\n\n\tFor example, you want a variable containing the date seven days before the current date.\n\n\tIn the code editor, enter:\n\n\t\n\n\tOn the 23rd June 2019, this returns [Object: \"2019-06-16T00:00:00.000+00:00\"].\n\n\tThis example uses n8n's custom variable $today for convenience. It's the equivalent of DateTime.now().set({ hour: 0, minute: 0, second: 0, millisecond: 0 }).minus({days: 7}).\n\nFor more detailed information and examples, refer to:\n\n Luxon's guide to math\n Their API documentation on DateTime plus and DateTime minus\n\n Create human-readable dates\n\nIn Get n days from today, the example gets the date seven days before the current date, and returns it as [Object: \"yyyy-mm-dd-T00:00:00.000+00:00\"] (for expressions) or yyyy-mm-dd-T00:00:00.000+00:00 (in the Code node). To make this more readable, you can use Luxon's formatting functions.\n\nFor example, you want the field containing the date to be formatted as DD/MM/YYYY, so that on the 23rd June 2019, it returns 23/06/2019.\n\nThis expression gets the date seven days before today, and converts it to the DD/MM/YYYY format.\n\n=== \"Expressions (JavaScript)\"\n\n\t\n\n=== \"Code node (JavaScript)\"\n\n\t\n\nYou can alter the format. For example:\n\n=== \"Expressions (JavaScript)\"\n\n\t\n\n\tOn 23rd June 2019, this returns \"16 June 2019\".\n\n=== \"Code node (JavaScript)\"\n\n\t\n\n\tOn 23rd June 2019, this returns \"16 June 2019\".\n\nRefer to Luxon's guide on toLocaleString (strings for humans) for more information.\n\n Get the time between two dates\n\nTo get the time between two dates, use Luxon's diffs feature. This subtracts one date from another and returns a duration.\n\nFor example, get the number of months between two dates:\n\n=== \"Expressions (JavaScript)\"\n\n\t\n\n\tThis returns [Object: {\"months\":1}].\n\n=== \"Code node (JavaScript)\"\n\n\t\n\n\tThis returns {\"months\":1}.\n\nRefer to Luxon's Diffs for more information.\n\n A longer example: How many days to Christmas?\n\nThis example brings together several Luxon features, uses JMESPath, and does some basic string manipulation. \n\nThe scenario: you want a countdown to 25th December. Every day, it should tell you the number of days remaining to Christmas. You don't want to update it for next year - it needs to seamlessly work for every year.\n\n=== \"Expressions (JavaScript)\"\n\n\t\n\n\tThis outputs \"There are <number of days> days to Christmas!\". For example, on 9th March, it outputs \"There are 291 days to Christmas!\".\n\n\tA detailed explanation of what the expression does:\n\n\t {{: indicates the start of the expression.\n\t \"There are \": a string. \n\t +: used to join two strings.\n\t $today.diff(): This is similar to the example in Get the time between two dates, but it uses n8n's custom $today variable.\n\t DateTime.fromISO($today.year + '-12-25'), 'days': this part gets the current year using $today.year, turns it into an ISO string along with the month and date, and then takes the whole ISO string and converts it to a Luxon DateTime data structure. It also tells Luxon that you want the duration in days.\n\t toObject() turns the result of diff() into a more usable object. At this point, the expression returns [Object: {\"days\":-<number-of-days>}]. For example, on 9th March, [Object: {\"days\":-291}].\n\t .days uses JMESPath syntax to retrieve just the number of days from the object. For more information on using JMESPath with n8n, refer to our JM",
  "category": "code",
  "nodeType": null,
  "keywords": [
    "date",
    "time",
    "with",
    "luxon",
    "days",
    "this",
    "javascript",
    "example",
    "string",
    "datetime",
    "today",
    "object"
  ],
  "fetchedAt": "2025-10-07T16:15:50.846Z",
  "hash": "4d99e2536aa253191ad6c7e29d4f2179"
}