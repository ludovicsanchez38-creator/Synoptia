{
  "title": "Hosting n8n on Azure",
  "url": "https://docs.n8n.io/hosting/installation/server-setups/azure",
  "content": "---\ncontentType: tutorial\n---\n\n Hosting n8n on Azure\n\nThis hosting guide shows you how to self-host n8n on Azure. It uses n8n with Postgres as a database backend using Kubernetes to manage the necessary resources and reverse proxy.\n\n Prerequisites\n\nYou need The Azure command line tool\n\n--8<-- \"snippets/self-hosting/warning.md\"\n\n--8<-- \"snippets/self-hosting/installation/latest-next-version.md\"\n\n Hosting options\n\nAzure offers several ways suitable for hosting n8n, including Azure Container Instances (optimized for running containers), Linux Virtual Machines, and Azure Kubernetes Service (containers running with Kubernetes).\n\nThis guide uses the Azure Kubernetes Service (AKS) as the hosting option. Using Kubernetes requires some additional complexity and configuration, but is the best method for scaling n8n as demand changes.\n\nThe steps in this guide use a mix of the Azure UI and command line tool, but you can use either to accomplish most tasks.\n\n Open the Azure Kubernetes Service\n\nFrom the Azure portal select Kubernetes services.\n\n Create a cluster\n\nFrom the Kubernetes services page, select Create > Create a Kubernetes cluster.\n\nYou can select any of the configuration options that suit your needs, then select Create when done.\n\n Set Kubectl context\n\nThe remainder of the steps in this guide require you to set the Azure instance as the Kubectl context. You can find the connection details for a cluster instance by opening its details page and then the Connect button. The resulting code snippets shows the steps to paste and run into a terminal to change your local Kubernetes settings to use the new cluster.\n\n Clone configuration repository\n\nKubernetes and n8n require a series of configuration files. You can clone these from this repository. The following steps tell you which file configures what and what you need to change.\n\nClone the repository with the following command:\n\nAnd change directory:\n\n Configure Postgres\n\nFor larger scale n8n deployments, Postgres provides a more robust database backend than SQLite.\n\n Configure volume for persistent storage\n\nTo maintain data between pod restarts, the Postgres deployment needs a persistent volume. The default storage class is suitable for this purpose and is defined in the postgres-claim0-persistentvolumeclaim.yaml manifest.\n\n/// note | Specialized storage classes\nIf you have specialised or higher requirements for storage classes, read more on the options Azure offers in the documentation.\n///\n Postgres environment variables\n\nPostgres needs some environment variables set to pass to the application running in the containers.\n\nThe example postgres-secret.yaml file contains placeholders you need to replace with your own values. Postgres will use these details when creating the database..\n\nThe postgres-deployment.yaml manifest then uses the values from this manifest file to send to the application pods.\n\n Configure n8n\n\n Create a volume for file storage\n\nWhile not essential for running n8n, using persistent volumes is required for:\n\n Using nodes that interact with files, such as the binary data node.\n If you want to persist manual n8n encryption keys between restarts. This saves a file containing the key into file storage during startup.\n\nThe n8n-claim0-persistentvolumeclaim.yaml manifest creates this, and the n8n Deployment mounts that claim in the volumes section of the n8n-deployment.yaml manifest.\n\n Pod resources\n\nKubernetes lets you optionally specify the minimum resources application containers need and the limits they can run to. The example YAML files cloned above contain the following in the resources section of the n8n-deployment.yaml file:\n\nThis defines a minimum of 250mb per container, a maximum of 500mb, and lets Kubernetes handle CPU. You can change these values to match your own needs. As a guide, here are the resources values for the n8n cloud offerings:\n\n--8<-- \"snippets/self-hosting/installation/suggested-pod-resources.md\"\n\n Optional: Environment variables\n\nYou can configure n8n settings and behaviors using environment variables.\n\nCreate an n8n-secret.yaml file. Refer to Environment variables for n8n environment variables details.\n\n Deployments\n\nThe two deployment manifests (n8n-deployment.yaml and postgres-deployment.yaml) define the n8n and Postgres applications to Kubernetes.\n\nThe manifests define the following:\n\n- Send the environment variables defined to each application pod\n- Define the container image to use\n- Set resource consumption limits with the resources object\n- The volumes defined earlier and volumeMounts to define the path in the container to mount volumes.\n- Scaling and restart policies. The example manifests define one instance of each pod. You should change this to meet your needs.\n\n Services\n\nThe two service manifests (postgres-service.yaml and n8n-service.yaml) expose the services to the outside world using the Kubernetes load balancer using ports 5432 and 5678 respectively.\n\n Send to Kubernetes cluster\n\nSend all the manifests to the cluster with the following command:\n\n/// note | Namespace error\nYou may see an error message about not finding an \"n8n\" namespace as that resources isn't ready yet. You can run the same command again, or apply the namespace manifest first with the following command:\n\n///\n\n Set up DNS\n\nn8n typically operates on a subdomain. Create a DNS record with your provider for the subdomain and point it to the IP address of the n8n service. Find the IP address of the n8n service from the Services & ingresses menu item of the cluster you want to use under the External IP column. You need to add the n8n port, \"5678\" to the URL.\n\n/// note | Static IP addresses with AKS\nRead this tutorial for more details on how to use a static IP address with AKS.\n///\n Delete resources\n\nRemove the resources created by the manifests with the following command:\n\n Next steps\n\n--8<-- \"snippets/self-hosting/installation/server-setups-next-steps.md\"",
  "category": "hosting",
  "nodeType": null,
  "keywords": [
    "hosting",
    "azure",
    "kubernetes",
    "postgres",
    "this",
    "with",
    "yaml",
    "resources",
    "service",
    "file"
  ],
  "fetchedAt": "2025-10-07T16:16:00.180Z",
  "hash": "49c7d4fb5da27c8c88124a4c4fe0d67d"
}