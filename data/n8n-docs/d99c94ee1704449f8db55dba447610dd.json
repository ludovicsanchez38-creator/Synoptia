{
  "title": "CLI commands for n8n",
  "url": "https://docs.n8n.io/hosting/cli-commands",
  "content": "---\ndescription: CLI commands available in n8n.\ncontentType: reference\n---\n\n CLI commands for n8n\n\nn8n includes a CLI (command line interface), allowing you to perform actions using the CLI rather than the n8n editor. These include starting workflows, and exporting and importing workflows and credentials.\n\n Running CLI commands\n\nYou can use CLI commands with self-hosted n8n. Depending on how you choose to install n8n, there are differences in how to run the commands:\n\n npm: the n8n command is directly available. The documentation uses this in the examples below.\n Docker: the n8n command is available within your Docker container:\n\n    \n\n Start a workflow\n\nYou can start workflows directly using the CLI.\n\nExecute a saved workflow by its ID:\n\n Change the active status of a workflow\n\nYou can change the active status of a workflow using the CLI.\n\n/// note | Restart required\nThese commands operate on your n8n database. If you execute them while n8n is running, the changes don't take effect until you restart n8n.\n///\n\nSet the active status of a workflow by its ID to false:\n\nSet the active status of a workflow by its ID to true:\n\nSet the active status to false for all the workflows:\n\nSet the active status to true for all the workflows:\n\n Export entities\n\nYou can export your database entities from n8n using the CLI. This tooling allows you to export all entity types from one database type, such as SQLite, and import them into another database type, such as Postgres.\n\nCommand flags:\n\n| Flag | Description |\n|-------------|-------|\n| --help | Help prompt. |\n| --outputDir | Output directory path |\n| --includeExecutionHistoryDataTables | Include execution history data tables, these are excluded by default as they can be very large  |\n\n Export workflows and credentials\n\nYou can export your workflows and credentials from n8n using the CLI.\n\nCommand flags:\n\n| Flag | Description |\n|-------------|-------|\n| --help | Help prompt. |\n| --all | Exports all workflows/credentials. |\n| --backup | Sets --all --pretty --separate for backups. You can optionally set --output. |\n| --id | The ID of the workflow to export. |\n| --output | Outputs file name or directory if using separate files. |\n| --pretty | Formats the output in an easier to read fashion. |\n| --separate | Exports one file per workflow (useful for versioning). Must set a directory using --output. |\n| --decrypted | Exports the credentials in a plain text format. |\n\n Workflows\n\nExport all your workflows to the standard output (terminal):\n\nExport a workflow by its ID and specify the output file name:\n\nExport all workflows to a specific directory in a single file:\n\nExport all the workflows to a specific directory using the --backup flag (details above):\n\n Credentials\n\nExport all your credentials to the standard output (terminal):\n\nExport credentials by their ID and specify the output file name:\n\nExport all credentials to a specific directory in a single file:\n\nExport all the credentials to a specific directory using the --backup flag (details above):\n\nExport all the credentials in plain text format. You can use this to migrate from one installation to another that has a different secret key in the configuration file.\n\n/// warning | Sensitive information\nAll sensitive information is visible in the files.\n///\n\n Import entities\n\nYou can import entities from a previous export:entities command using this command, it allows importing of entities into a database type that differs from the exported database type. Current supported database types include: SQLite, Postgres.\n\nThe database is expected to be empty prior to import, this can be forced with the --truncateTables parameter.\n\nCommand flags:\n\n| Flag | Description |\n|-------------|-------|\n| --help | Help prompt. |\n| --inputDir | Input directory that holds output files for import |\n| --truncateTables | Truncate tables before import  |\n\n Import workflows and credentials\n\nYou can import your workflows and credentials from n8n using the CLI.\n\n/// warning | Update the IDs\nWhen exporting workflows and credentials, n8n also exports their IDs. If you have workflows and credentials with the same IDs in your existing database, they will be overwritten. To avoid this, delete or change the IDs before importing.\n///\n\nAvailable flags:\n\n| Flag | Description |\n|------|-------------|\n| --help | Help prompt. |\n| --input | Input file name or directory if you use --separate. |\n| --projectId | Import the workflow or credential to the specified project. Can't be used with --userId. |\n| --separate | Imports .json files from directory provided by --input. |\n| --userId | Import the workflow or credential to the specified user. Can't be used with --projectId. |\n\n/// note | Migrating to SQLite\nn8n limits workflow and credential names to 128 characters, but SQLite doesn't enforce size limits.\n\nThis might result in errors like Data too long for column name during the import process.\n\nIn this case, you can edit the names from the n8n interface and export again, or edit the JSON file directly before importing.\n///\n\n Workflows\n\nImport workflows from a specific file:\n\nImport all the workflow files as JSON from the specified directory:\n\n Credentials\n\nImport credentials from a specific file:\n\nImport all the credentials files as JSON from the specified directory:\n\n License\n\n Clear\n\nClear your existing license from n8n's database and reset n8n to default features:\n\nIf your license includes floating entitlements, running this command will also attempt to release them back to the pool, making them available for other instances.\n\n Info\n\nDisplay information about the existing license:\n\n User management\n\nYou can reset user management using the n8n CLI. This returns user management to its pre-setup state. It removes all user accounts.\n\nUse this if you forget your password, and don't have SMTP set up to do password resets by email.\n\n Disable MFA for a user\n\nIf a user loses their recovery codes you can disable MFA for a user with this command. The user will then be able to log back in to set up MFA again.\n\n Disable LDAP\n\nYou can reset the LDAP settings using the command below.\n\n Uninstall community nodes and credentials\n\nYou can manage community nodes using the n8n CLI. For now, you can only uninstall community nodes and credentials, which is useful if a community node causes instability.\n\nCommand flags:\n\n | Flag         | Description                                                                                                                      |\n |--------------|----------------------------------------------------------------------------------------------------------------------------------|\n | --help       | Show CLI help.                                                                                                                   |\n | --credential | The credential type. Get this value by visiting the node's <NODE>.credential.ts file and getting the value of name.            |\n | --package    | Package name of the community node.                                                                                              |\n | --uninstall  | Uninstalls the node.                                                                                                             |\n | --userId     | The ID of the user who owns the credential. On self-hosted, query the database. On cloud, query the API with your API key. |\n\n Nodes\n\nUninstall a community node by package name:\n\nFor example, to uninstall the Evolution API community node, type:\n\n Credentials\n\nUninstall a community node credential:\n\nFor example, to uninstall the Evolution API community node credential, visit the repository and navigate to the credentials.ts file to find the name:\n\n Security audit\n\nYou can run a security audit on your n8n instance, to detect common security issues.",
  "category": "hosting",
  "nodeType": null,
  "keywords": [
    "commands",
    "credentials",
    "workflows",
    "export",
    "import",
    "using",
    "from",
    "this",
    "your",
    "workflow",
    "file"
  ],
  "fetchedAt": "2025-10-07T16:15:53.111Z",
  "hash": "d99c94ee1704449f8db55dba447610dd"
}