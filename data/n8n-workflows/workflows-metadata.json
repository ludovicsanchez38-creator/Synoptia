{
  "metadata": {
    "total": 10,
    "scrapedAt": "2025-10-10T16:52:45.943Z",
    "source": "n8n.io/workflows"
  },
  "workflows": [
    {
      "id": 6270,
      "name": "Build Your First AI Agent",
      "description": "## How it works\n\nThis template launches your very first **AI Agent** ‚Äîan AI-powered chatbot that can do more than just talk‚Äî it can take action using tools.\n\nThink of an AI Agent as a smart assistant, and the tools are the apps on its phone. By connecting it to other nodes, you give your agent the ability to interact with real-world data and services, like checking the weather, fetching news, or even sending emails on your behalf.\n\nThis workflow is designed to be the perfect starting point:\n*   **The Chat Interface:** A `Chat Trigger` node provides a simple, clean interface for you to talk to your agent.\n*   **The Brains:** The `AI Agent` node receives your messages, intelligently decides which tool to use (if any), and formulates a helpful response. Its personality and instructions are fully customizable in the \"System Message\".\n*   **The Language Model:** It uses **Google Gemini** to power its reasoning and conversation skills.\n*   **The Tools:** It comes pre-equipped with two tools to demonstrate its capabilities:\n    1.  **Get Weather:** Fetches real-time weather forecasts.\n    2.  **Get News:** Reads any RSS feed to get the latest headlines.\n*   **The Memory:** A `Conversation Memory` node allows the agent to remember the last few messages, enabling natural, follow-up conversations.\n\n### Set up steps\n\n**Setup time: ~2 minutes**\n\nYou only need one thing to get started: a free Google AI API key.\n\n1.  **Get Your Google AI API Key:**\n    *   Visit Google AI Studio at [aistudio.google.com/app/apikey](https://aistudio.google.com/app/apikey).\n    *   Click **\"Create API key in new project\"** and copy the key that appears.\n\n2.  **Add Your Credential in n8n:**\n    *   On the workflow canvas, go to the **`Connect your model`** (Google Gemini) node.\n    *   Click the **Credential** dropdown and select **`+ Create New Credential`**.\n    *   Paste your API key into the **API Key** field and click **Save**.\n\n3.  **Start Chatting!**\n    *   Go to the **`Example Chat`** node.\n    *   Click the **\"Open Chat\"** button in its parameter panel.\n    *   Try asking it one of the example questions, like: *\"What's the weather in Paris?\"* or *\"Get me the latest tech news.\"*\n\nThat's it! You now have a fully functional AI Agent. Try adding more tools (like Gmail or Google Calendar) to make it even more powerful.",
      "totalViews": 251610,
      "createdAt": "2025-07-22T12:14:21.343Z",
      "author": "lucaspeyrin",
      "nodeTypes": [
        "n8n-nodes-base.rssFeedReadTool",
        "n8n-nodes-base.httpRequestTool",
        "@n8n/n8n-nodes-langchain.agent",
        "@n8n/n8n-nodes-langchain.chatTrigger",
        "@n8n/n8n-nodes-langchain.memoryBufferWindow",
        "@n8n/n8n-nodes-langchain.lmChatGoogleGemini"
      ],
      "nodeCount": 13,
      "connectionCount": 5,
      "categories": [
        "Personal Productivity",
        "AI Chatbot"
      ],
      "workflowJson": {
        "meta": {
          "instanceId": "e409ea34548a2afe2dffba31130cd1cf2e98ebe2afaeed2a63caf2a0582d1da0",
          "templateCredsSetupCompleted": true
        },
        "nodes": [
          {
            "id": "2c408b32-7862-4411-9ad1-b6e9ff4e41f7",
            "name": "Sticky Note2",
            "type": "n8n-nodes-base.stickyNote",
            "position": [
              592,
              -256
            ],
            "parameters": {
              "color": 7,
              "width": 512,
              "height": 352,
              "content": "## [Video Tutorial](https://youtu.be/laHIzhsz12E)\n@[youtube](laHIzhsz12E)"
            },
            "typeVersion": 1
          },
          {
            "id": "3808de8d-ef18-47f5-9621-b08ba961ae01",
            "cid": "Ikx1Y2FzIFBleXJpbiI",
            "name": "Introduction Note",
            "type": "n8n-nodes-base.stickyNote",
            "notes": "¬© 2025 Lucas Peyrin",
            "creator": "Lucas Peyrin",
            "position": [
              -752,
              -256
            ],
            "parameters": {
              "width": 392,
              "height": 460,
              "content": "## Try It Out!\n\n**Launch your first AI agent‚Äîa chatbot that uses tools to fetch live info, send emails, and automate tasks.**\n\n### To get started:\n1.  **Connect Gemini** (see red sticky note below)\n2.  Click the **üó® Open chat** button and try asking:\n    *   ‚ÄúWhat‚Äôs the weather in Paris?‚Äù\n    *   ‚ÄúGet me the latest tech news.‚Äù\n    *   ‚ÄúGive me ideas for n8n AI agents.‚Äù\n\n### Questions or Feedback?\nFor feedback, coaching, buit-for-you workflows or any questions, use my unified AI-powered contact form.\n\n‚û°Ô∏è **[Get in Touch Here](https://api.ia2s.app/form/templates/academy)**\n\n*Happy Automating! ‚ÄîLucas Peyrin*"
            },
            "typeVersion": 1
          },
          {
            "id": "2b55763c-0541-4133-aa79-87c3ce9f0564",
            "cid": "Ikx1Y2FzIFBleXJpbiI",
            "name": "Sticky Note12",
            "type": "n8n-nodes-base.stickyNote",
            "notes": "¬© 2025 Lucas Peyrin",
            "creator": "Lucas Peyrin",
            "position": [
              -272,
              -160
            ],
            "parameters": {
              "color": 7,
              "width": 300,
              "height": 252,
              "content": "üí° Later, activate this workflow and share the public chat URL to let others talk to your AI Agent!"
            },
            "typeVersion": 1
          },
          {
            "id": "f09c396a-dab8-41f8-a6e5-3dbd1dd70323",
            "cid": "Ikx1Y2FzIFBleXJpbiI",
            "name": "Sticky Note13",
            "type": "n8n-nodes-base.stickyNote",
            "notes": "¬© 2025 Lucas Peyrin",
            "creator": "Lucas Peyrin",
            "position": [
              112,
              -256
            ],
            "parameters": {
              "color": 7,
              "width": 396,
              "height": 348,
              "content": "Your AI agent can:\n1. **Receive** messages from the chat\n2. **Select** the right tools (e.g., weather, news, email)\n3. **Respond** with live, helpful answers\n\n\n**Open the AI agent node** and edit the **System Message** to adjust your agent‚Äôs thinking, behavior, and replies.\n\n\n\n\n\n\n\n\n\n\n"
            },
            "typeVersion": 1
          },
          {
            "id": "f7c57d33-2318-409d-9084-13990299db3d",
            "cid": "Ikx1Y2FzIFBleXJpbiI",
            "name": "Sticky Note15",
            "type": "n8n-nodes-base.stickyNote",
            "notes": "¬© 2025 Lucas Peyrin",
            "creator": "Lucas Peyrin",
            "position": [
              112,
              176
            ],
            "parameters": {
              "color": 7,
              "width": 308,
              "height": 260,
              "content": "\n\n\n\n\n\n\n\n\n\n\n\n\n\nThis node helps your agent remember the last few messages to stay on topic."
            },
            "typeVersion": 1
          },
          {
            "id": "07ed7ed3-91d0-432f-9327-d2a30601082c",
            "cid": "Ikx1Y2FzIFBleXJpbiI",
            "name": "Sticky Note16",
            "type": "n8n-nodes-base.stickyNote",
            "notes": "¬© 2025 Lucas Peyrin",
            "creator": "Lucas Peyrin",
            "position": [
              512,
              176
            ],
            "parameters": {
              "color": 7,
              "width": 372,
              "height": 324,
              "content": "\n\n\n\n\n\n\n\n\n\n\n\n\nThese tools let your agent access real-world data or take actions. Add more to expand its abilities!\n\nClick the ‚ûï under the agent‚Äôs Tool input to add:\n- Google Calendar (Get Upcoming Events)\n- Gmail (Send an Email) (Gmail)"
            },
            "typeVersion": 1
          },
          {
            "id": "24fc1fd5-ed10-43d9-9b35-8facb7f357d5",
            "cid": "Ikx1Y2FzIFBleXJpbiI",
            "name": "Get News",
            "type": "n8n-nodes-base.rssFeedReadTool",
            "notes": "¬© 2025 Lucas Peyrin",
            "creator": "Lucas Peyrin",
            "position": [
              656,
              224
            ],
            "parameters": {
              "url": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('URL', `Use one of:\n- https://feeds.bbci.co.uk/news/world/rss.xml (BBC World ‚Äì global headlines)\n- https://www.aljazeera.com/xml/rss/all.xml (Al‚ÄØJazeera English ‚Äì in‚Äëdepth global coverage)\n- http://rss.cnn.com/rss/edition_world.rss (CNN World ‚Äì breaking news worldwide)\n- https://techcrunch.com/feed/ (TechCrunch ‚Äì global tech & startup news)\n- http://news.ycombinator.com/rss (Hacker News ‚Äì tech community headlines)\n- https://n8n.io/blog/rss (n8n Blog ‚Äì updates & tutorials)\n- https://www.bonappetit.com/feed/recipes-rss-feed/rss (Bon App√©tit ‚Äì recent recipes list)\n- https://www.endsreport.com/rss/news-and-analysis (ENDS Report ‚Äì environmental law & policy news)\n- https://medlineplus.gov/groupfeeds/new.xml (MedlinePlus ‚Äì health topics & wellness updates)`, 'string') }}",
              "options": {},
              "toolDescription": "Gets the latest blog posts about any rss feed."
            },
            "typeVersion": 1.2
          },
          {
            "id": "ac7d0dd1-8885-41c1-abda-f3742c838992",
            "cid": "Ikx1Y2FzIFBleXJpbiI",
            "name": "Get Weather",
            "type": "n8n-nodes-base.httpRequestTool",
            "creator": "Lucas Peyrin",
            "position": [
              544,
              224
            ],
            "parameters": {
              "url": "https://api.open-meteo.com/v1/forecast",
              "options": {},
              "sendQuery": true,
              "queryParameters": {
                "parameters": [
                  {
                    "name": "latitude",
                    "value": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('parameters0_Value', `Latitude of the location, e.g. 45.75 for Lyon. Do not ask the user just infer it automatically.`, 'string') }}"
                  },
                  {
                    "name": "longitude",
                    "value": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('parameters1_Value', `Longitude of the location, e.g. 4.85 for Lyon. Do not ask the user just infer it automatically.`, 'string') }}"
                  },
                  {
                    "name": "current",
                    "value": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('parameters2_Value', `Comma-separated list of current weather variables (no whitespace).\n\nExample: temperature_2m,windspeed_10m,rain.\n\nOptions: temperature_2m,relative_humidity_2m,apparent_temperature,is_day,precipitation,rain,showers,snowfall,weathercode,cloudcover_total,pressure_msl,surface_pressure,windspeed_10m,winddirection_10m,windgusts_10m.`, 'string') }}"
                  },
                  {
                    "name": "hourly",
                    "value": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('parameters3_Value', `Comma-separated list of hourly weather variables (no whitespace). Hourly is only useful to get one day's information. For weakly overview please use daily.\n\nExample: temperature_2m,precipitation.\n\nOptions: temperature_2m,relative_humidity_2m,dewpoint_2m,apparent_temperature,precipitation,rain,showers,snowfall,snow_depth,pressure_msl,surface_pressure,cloudcover_total,cloudcover_low,cloudcover_mid,cloudcover_high,windspeed_10m,winddirection_10m,windgusts_10m,visibility,is_day,sunshine_duration,soil_temperature,soil_moisture,PM10,PM2_5,carbon_monoxide,ozone,us_aqi,UV_index.`, 'string') }}"
                  },
                  {
                    "name": "daily",
                    "value": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('parameters4_Value', `Comma-separated list of daily weather variables (no whitespace).\n\nExample: temperature_2m_max,precipitation_sum.\n\nOptions: weathercode,temperature_2m_max,temperature_2m_min,apparent_temperature_max,apparent_temperature_min,precipitation_sum,rain_sum,showers_sum,snowfall_sum,precipitation_hours,sunrise,sunset,daylight_duration,sunshine_duration,pressure_msl_max,pressure_msl_min,surface_pressure_max,surface_pressure_min,windgusts_10m_max,windspeed_10m_max,winddirection_10m_dominant,shortwave_radiation_sum.`, 'string') }}"
                  },
                  {
                    "name": "start_date",
                    "value": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('parameters5_Value', `Start date in YYYY-MM-DD format. Example: 2025-07-15`, 'string') }}"
                  },
                  {
                    "name": "end_date",
                    "value": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('parameters6_Value', `End date in YYYY-MM-DD format. Must be after start_date. Example: 2025-07-18`, 'string') }}"
                  },
                  {
                    "name": "temperature_unit",
                    "value": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('parameters7_Value', `Unit for temperature. Options: celsius (default), fahrenheit.`, 'string') }}"
                  }
                ]
              },
              "toolDescription": "Get weather forecast anywhere, anytime. You can make requests by assuming most information, the only thing you need is the location (use the city name to infer lat and long automatically) and time period (assume today if not specified)"
            },
            "notesInFlow": true,
            "typeVersion": 4.2
          },
          {
            "id": "332af12a-45ab-4e5d-8dab-da21ba2111f9",
            "cid": "Ikx1Y2FzIFBleXJpbiI",
            "name": "Your First AI Agent",
            "type": "@n8n/n8n-nodes-langchain.agent",
            "notes": "¬© 2025 Lucas Peyrin",
            "creator": "Lucas Peyrin",
            "position": [
              192,
              -64
            ],
            "parameters": {
              "options": {
                "systemMessage": "=<role>\nYou are the n8n Demo AI Agent, a friendly and helpful assistant designed to showcase the power of AI agents within the n8n automation platform. Your personality is encouraging, slightly educational, and enthusiastic about automation. Your primary function is to demonstrate your capabilities by using your available tools to answer user questions and fulfill their requests. You are conversational.\n</role>\n\n<instructions>\n<goal>\nYour primary goal is to act as a live demonstration of an AI Agent built with n8n. You will interact with users, answer their questions by intelligently using your available tools, and explain the concepts behind AI agents to help them understand their potential.\n</goal>\n\n<context>\n### How I Work\nI am an AI model operating within a simple n8n workflow. This workflow gives me two key things:\n1.  **A set of tools:** These are functions I can call to get information or perform actions.\n2.  **Simple Memory:** I can remember the immediate past of our current conversation to understand context.\n\n### My Purpose\nMy main purpose is to be a showcase. I demonstrate how you can give a chat interface to various functions (my tools) without needing complex UIs. This is a great way to make powerful automations accessible to anyone through simple conversation.\n\n### My Tools Instructions\nYou must choose one of your available tools if the user's request matches its capability. You cannot perform these actions yourself; you must call the tool.\n\n### About AI Agents in n8n\n- **Reliability:** While I can use one tool at a time effectively, more advanced agents can perform multi-step tasks. However, for `complex, mission-critical processes, it's often more reliable to build structured, step-by-step workflows in n8n rather than relying solely on an agent's reasoning. Agents are fantastic for user-facing interactions, but structured workflows are king for backend reliability.\n- **Best Practices:** A good practice is to keep an agent's toolset focused, typically under 10-15 tools, to ensure reliability and prevent confusion.\n\n### Current Date & Time\n{{ $now }}\n</context>\n\n<output_format>\n- Respond in a friendly, conversational, and helpful tone.\n- When a user's request requires a tool, first select the appropriate tool. Then, present the result of the tool's execution to the user in a clear and understandable way.\n- Be proactive. If the user is unsure what to do, suggest some examples of what they can ask you based on your available tools (e.g., Talk about your tools and what you know about yourself).\n</output_format>\n</instructions>"
              }
            },
            "typeVersion": 2.2
          },
          {
            "id": "95421925-c5ad-48bd-9638-c84ff5b5e3c6",
            "cid": "Ikx1Y2FzIFBleXJpbiI",
            "name": "Example Chat",
            "type": "@n8n/n8n-nodes-langchain.chatTrigger",
            "notes": "¬© 2025 Lucas Peyrin",
            "creator": "Lucas Peyrin",
            "position": [
              -176,
              -64
            ],
            "webhookId": "e5616171-e3b5-4c39-81d4-67409f9fa60a",
            "parameters": {
              "public": true,
              "options": {
                "title": "Your first AI Agent üöÄ",
                "subtitle": "This is for demo purposes. Try me out !",
                "responseMode": "lastNode",
                "inputPlaceholder": "Type your message here...",
                "showWelcomeScreen": false
              },
              "initialMessages": "Hi there! üëã"
            },
            "typeVersion": 1.1
          },
          {
            "id": "56d2684a-7f83-4ffd-8501-3253d999b4c6",
            "cid": "Ikx1Y2FzIFBleXJpbiI",
            "name": "Conversation Memory",
            "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
            "notes": "¬© 2025 Lucas Peyrin",
            "creator": "Lucas Peyrin",
            "position": [
              224,
              224
            ],
            "parameters": {
              "contextWindowLength": 30
            },
            "typeVersion": 1.3
          },
          {
            "id": "c218a5da-bec7-4034-8d2b-f4bca34e551e",
            "cid": "Ikx1Y2FzIFBleXJpbiI",
            "name": "Connect Gemini",
            "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
            "notes": "¬© 2025 Lucas Peyrin",
            "creator": "Lucas Peyrin",
            "position": [
              -176,
              224
            ],
            "parameters": {
              "options": {
                "temperature": 0
              }
            },
            "typeVersion": 1
          },
          {
            "id": "199eb2cd-bc6b-4f61-bbf1-f196c7869b43",
            "cid": "Ikx1Y2FzIFBleXJpbiI",
            "name": "Sticky Note",
            "type": "n8n-nodes-base.stickyNote",
            "notes": "¬© 2025 Lucas Peyrin",
            "creator": "Lucas Peyrin",
            "position": [
              -272,
              176
            ],
            "parameters": {
              "color": 3,
              "width": 294,
              "height": 316,
              "content": "\n\n\n\n\n\n\n\n\n\n\n\n1. [In Google AI Studio](https://aistudio.google.com/app/apikey) click **‚ÄúCreate API key in new project‚Äù** and copy it.\n\n2. Open the ```Connect Gemini``` node:\n   * **Select Credential ‚Üí Create New**\n   * Paste into **API Key** and **Save**\n"
            },
            "typeVersion": 1
          }
        ],
        "pinData": {},
        "connections": {
          "Get News": {
            "ai_tool": [
              [
                {
                  "node": "Your First AI Agent",
                  "type": "ai_tool",
                  "index": 0
                }
              ]
            ]
          },
          "Get Weather": {
            "ai_tool": [
              [
                {
                  "node": "Your First AI Agent",
                  "type": "ai_tool",
                  "index": 0
                }
              ]
            ]
          },
          "Example Chat": {
            "main": [
              [
                {
                  "node": "Your First AI Agent",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          },
          "Connect Gemini": {
            "ai_languageModel": [
              [
                {
                  "node": "Your First AI Agent",
                  "type": "ai_languageModel",
                  "index": 0
                }
              ]
            ]
          },
          "Conversation Memory": {
            "ai_memory": [
              [
                {
                  "node": "Your First AI Agent",
                  "type": "ai_memory",
                  "index": 0
                }
              ]
            ]
          }
        }
      }
    },
    {
      "id": 5819,
      "name": "ü§ñ Build an Interactive AI Agent with Chat Interface and Multiple Tools",
      "description": "## How it works\n\nThis template is a complete, hands-on tutorial that lets you build and interact with your very first AI Agent.\n\nThink of an AI Agent as a standard AI chatbot with **superpowers**. The agent doesn't just talk; it can **use tools** to perform actions and find information in real-time. This workflow is designed to show you exactly how that works.\n\n1.  **The Chat Interface (Chat Trigger):** This is your window to the agent. It's a fully styled, public-facing chat window where you can have a conversation.\n2.  **The Brain (AI Agent Node):** This is the core of the operation. It takes your message, understands your intent, and intelligently decides which \"superpower\" (or tool) it needs to use to answer your request. The agent's personality and instructions are defined in its extensive system prompt.\n3.  **The Tools (Tool Nodes):** These are the agent's superpowers. We've included a variety of useful and fun tools to showcase its capabilities:\n    *   Get a random joke.\n    *   Search Wikipedia for a summary of any topic.\n    *   Calculate a future date.\n    *   Generate a secure password.\n    *   Calculate a monthly loan payment.\n    *   Fetch the latest articles from the n8n blog.\n4.  **The Memory (Memory Node):** This gives the agent a short-term memory, allowing it to remember the last few messages in your conversation for better context.\n\n\nWhen you send a message, the agent's brain analyzes it, picks the right tool for the job, executes it, and then formulates a helpful response based on the tool's output.\n\n## Set up steps\n\n**Setup time: ~3 minutes**\n\nThis template is nearly ready to go out of the box. You just need to provide the AI's \"brain.\"\n\n1.  **Configure Credentials:** This workflow requires an API key for an AI model. Make sure you have credentials set up in your n8n instance for either **Google AI (Gemini)** or **OpenAI**.\n2.  **Choose Your AI Brain (LLM):**\n    *   By default, the workflow uses the **Google Gemini** node. If you have Google AI credentials, you're all set!\n    *   If you prefer to use **OpenAI**, simply **disable the Gemini node** and **enable the OpenAI node**. You only need one active LLM node. Make sure it is connected to the Agent parent node.\n3.  **Explore the Tools:** Take a moment to look at the different tool nodes connected to the `Your First AI Agent` node. This is where the agent gets its abilities! You can add, remove, or modify these to create your own custom agent.\n4.  **Activate and Test!**\n    *   Activate the workflow.\n    *   Open the **public URL** for the `Example Chat Window` node (you can copy it from the node's panel).\n    *   Start chatting! Try asking it things like:\n        *   \"Tell me a joke.\"\n        *   \"What is n8n?\"\n        *   \"Generate a 16-character password for me.\"\n        *   \"What are the latest posts on the n8n blog?\"\n        *   \"What is the monthly payment for a $300,000 loan at 5% interest over 30 years?\"",
      "totalViews": 32270,
      "createdAt": "2025-07-09T12:12:39.907Z",
      "author": "lucaspeyrin",
      "nodeTypes": [
        "@n8n/n8n-nodes-langchain.memoryBufferWindow",
        "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
        "@n8n/n8n-nodes-langchain.lmChatOpenAi",
        "@n8n/n8n-nodes-langchain.chatTrigger",
        "@n8n/n8n-nodes-langchain.agent",
        "n8n-nodes-base.httpRequestTool",
        "n8n-nodes-base.dateTimeTool",
        "@n8n/n8n-nodes-langchain.toolWikipedia",
        "n8n-nodes-base.cryptoTool",
        "@n8n/n8n-nodes-langchain.toolCode",
        "n8n-nodes-base.rssFeedReadTool"
      ],
      "nodeCount": 17,
      "connectionCount": 10,
      "categories": [
        "Personal Productivity",
        "AI Chatbot"
      ],
      "workflowJson": {
        "meta": {
          "creator": "Lucas Peyrin",
          "instanceId": "e409ea34548a2afe2dffba31130cd1cf2e98ebe2afaeed2a63caf2a0582d1da0",
          "fingerprint": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJjcmVhdG9yIjoiIiwiaXNzIjoibjhuIiwiaWF0IjoxNzUyODQ0NDUzfQ.iaCRYEbTvu1E0KUYlUHZI1pFPR17ePims1iJk1HM-pQ",
          "templateCredsSetupCompleted": true
        },
        "nodes": [
          {
            "id": "4aace023-5b83-409c-b80f-b1deb0442482",
            "cid": "Ikx1Y2FzIFBleXJpbiI",
            "name": "Simple Memory",
            "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
            "notes": "¬© 2025 Lucas Peyrin",
            "creator": "Lucas Peyrin",
            "position": [
              380,
              480
            ],
            "parameters": {
              "contextWindowLength": 30
            },
            "typeVersion": 1.3
          },
          {
            "id": "624800cc-313a-4fb7-9610-218e141e524b",
            "cid": "Ikx1Y2FzIFBleXJpbiI",
            "name": "Gemini",
            "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
            "notes": "¬© 2025 Lucas Peyrin",
            "creator": "Lucas Peyrin",
            "position": [
              20,
              480
            ],
            "parameters": {
              "options": {
                "temperature": 0
              },
              "modelName": "models/gemini-2.5-flash"
            },
            "credentials": {
              "googlePalmApi": {
                "id": "AXawYbABK5aZbGBE",
                "name": "IA2S"
              }
            },
            "typeVersion": 1
          },
          {
            "id": "4100fa02-5444-4565-9696-04bca3d7fa3f",
            "cid": "Ikx1Y2FzIFBleXJpbiI",
            "name": "OpenAI",
            "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
            "notes": "¬© 2025 Lucas Peyrin",
            "creator": "Lucas Peyrin",
            "disabled": true,
            "position": [
              -120,
              480
            ],
            "parameters": {
              "model": {
                "__rl": true,
                "mode": "list",
                "value": "gpt-4.1-mini"
              },
              "options": {
                "temperature": 0
              }
            },
            "typeVersion": 1.2
          },
          {
            "id": "fa4e52f1-aa8e-4f16-9c92-8650338b7990",
            "cid": "Ikx1Y2FzIFBleXJpbiI",
            "name": "Example Chat Window",
            "type": "@n8n/n8n-nodes-langchain.chatTrigger",
            "notes": "¬© 2025 Lucas Peyrin",
            "creator": "Lucas Peyrin",
            "position": [
              0,
              -40
            ],
            "webhookId": "499666c3-d807-4bb7-8195-43932f64a91f",
            "parameters": {
              "public": true,
              "options": {
                "title": "Your first AI Agent üöÄ",
                "subtitle": "This is for demo purposes. Try me out !",
                "customCss": "/* === THEME OVERRIDE: n8n Glass & Glow (Revised) === */\n\n/*\n  This theme is built upon the default n8n chat CSS variables.\n  We'll use your desired branding and layout, and then add\n  the \"glass\" effect using a semi-transparent background\n  and a backdrop-filter on the main window class.\n*/\n\n:root {\n  /* --- 1. CORE BRANDING & FONTS --- */\n  /* Your choices for font and primary color are applied here. */\n  --chat--font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\n  --chat--color-primary: #EA4B71; /* n8n Red */\n  --chat--color-primary-shade-50: #D93A60;\n  --chat--color-primary-shade-100: #C82A50;\n  --chat--color-secondary: #20b69e; /* Kept default secondary for things like file uploads */\n  --chat--color-secondary-shade-50: #1ca08a;\n  --chat--color-white: #ffffff;\n  --chat--color-light: #f2f4f8;\n  --chat--color-dark: #1F2937; /* Darker, more modern text color */\n  --chat--color-disabled: #9CA3AF;\n  --chat--color-typing: #404040;\n\n  /* --- 2. WINDOW & LAYOUT --- */\n  /* Your dimensions and rounded corners. The actual glass effect is handled in the class override below. */\n  --chat--window--width: 430px;\n  --chat--window--height: 80vh;\n  --chat--window--border-radius: 16px;\n  --chat--window--border: 1px solid rgba(255, 255, 255, 0.3);\n  --chat--spacing: 1rem; /* 16px base spacing */\n  --chat--window--z-index: 9999;\n  --chat--window--bottom: var(--chat--spacing);\n  --chat--window--right: var(--chat--spacing);\n  --chat--window--margin-bottom: var(--chat--spacing);\n\n  /* --- 3. GLASSMORPHISM BACKGROUNDS --- */\n  /* We make the main sections transparent to let the glass window show through. */\n  --chat--header--background: transparent;\n  --chat--body--background: transparent;\n  --chat--footer--background: transparent;\n\n  /* --- 4. HEADER STYLING --- */\n  --chat--header-height: auto;\n  --chat--header--padding: 20px;\n  --chat--header--color: var(--chat--color-dark);\n  --chat--header--border-bottom: 1px solid rgba(255, 255, 255, 0.2); /* Subtle divider */\n  --chat--heading--font-size: 1.5rem;\n  --chat--subtitle--font-size: 0.875rem;\n  --chat--subtitle--line-height: 1.4;\n  --chat--close--button--color-hover: var(--chat--color-primary);\n\n  /* --- 5. MESSAGE BUBBLES --- */\n  --chat--message--font-size: 0.875rem;\n  --chat--message--padding: 12px 16px;\n  --chat--message--border-radius: 12px;\n  --chat--message-line-height: 1.6;\n  --chat--message--margin-bottom: calc(var(--chat--spacing) * 0.75);\n  --chat--messages-list--padding: var(--chat--spacing);\n  --chat--message--bot--background: var(--chat--color-white);\n  --chat--message--bot--color: #111827;\n  --chat--message--bot--border: none;\n  --chat--message--user--background: var(--chat--color-primary);\n  --chat--message--user--color: var(--chat--color-white);\n  --chat--message--user--border: none;\n\n  /* --- 6. INPUT AREA --- */\n  --chat--textarea--height: 50px;\n  --chat--textarea--max-height: 10rem;\n  --chat--input--font-size: 0.9rem;\n  --chat--input--border: 0;\n  --chat--input--border-radius: 12px; /* Rounded input field */\n  --chat--input--padding: 12px 16px;\n  --chat--input--background: rgba(255, 255, 255, 0.5); /* Semi-transparent input */\n  --chat--input--text-color: #111827;\n  --chat--input--line-height: 1.5;\n  --chat--input--border-active: 0;\n\n  /* --- 7. SEND & FILE BUTTONS --- */\n  --chat--input--send--button--background: transparent;\n  --chat--input--send--button--color: var(--chat--color-primary);\n  --chat--input--send--button--background-hover: transparent;\n  --chat--input--send--button--color-hover: var(--chat--color-primary-shade-50);\n  --chat--input--file--button--background: transparent;\n  --chat--input--file--button--color: var(--chat--color-secondary);\n  --chat--input--file--button--background-hover: transparent;\n  --chat--input--file--button--color-hover: var(--chat--color-secondary-shade-50);\n\n  /* --- 8. TOGGLE BUTTON & OTHERS --- */\n  /* Using your primary brand color for the main toggle button */\n  --chat--toggle--size: 64px;\n  --chat--toggle--width: var(--chat--toggle--size);\n  --chat--toggle--height: var(--chat--toggle--size);\n  --chat--toggle--border-radius: 50%;\n  --chat--toggle--background: var(--chat--color-primary);\n  --chat--toggle--hover--background: var(--chat--color-primary-shade-50);\n  --chat--toggle--active--background: var(--chat--color-primary-shade-100);\n  --chat--toggle--color: var(--chat--color-white);\n}\n\n/* === CLASS OVERRIDES === */\n/*\n  These are essential for effects that CSS variables can't control,\n  like the glass blur, shadows, and max-height.\n*/\n\n.chat-window {\n  /* This is the magic for the glass effect! */\n  background-color: rgba(249, 243, 245, 0.6); /* A semi-transparent background color */\n  backdrop-filter: blur(20px);\n  -webkit-backdrop-filter: blur(20px); /* For Safari compatibility */\n\n  /* A subtle shadow helps lift the window off the page */\n  box-shadow: 0 8px 32px 0 rgba(31, 38, 135, 0.1);\n\n  /* Here we apply the max-height you wanted */\n  max-height: 750px;\n}\n\n/* Make user messages slightly wider for better balance */\n.chat-message.is-user {\n\tmax-width: 70%;\n}\n\n.chat-message.is-bot {\n\tmax-width: 80%;\n}\n\n/* Add a subtle glow to messages on hover */\n.chat-message {\n    transition: transform 0.2s ease, box-shadow 0.2s ease;\n}\n.chat-message:hover {\n    transform: translateY(-2px);\n    box-shadow: 0 0 25px 0 rgba(234, 75, 113, 0.2);\n}\n\n/* === PAGE BACKGROUND === */\n/* Your dotted background to simulate the n8n canvas. Perfect as is! */\nbody {\n    background-color: #FDFBFF;\n    background-image:\n        radial-gradient(circle at 1px 1px, rgba(0,0,0,0.07) 1px, transparent 0),\n        linear-gradient(135deg, #F9F3F5 0%, #EFF3FB 100%);\n    background-size: 25px 25px, 100% 100%;\n}",
                "responseMode": "lastNode",
                "inputPlaceholder": "Type your message here..",
                "showWelcomeScreen": false
              },
              "initialMessages": "Hi there! üëã"
            },
            "typeVersion": 1.1
          },
          {
            "id": "cd0e7167-a293-4565-b689-3162c45cd42b",
            "cid": "Ikx1Y2FzIFBleXJpbiI",
            "name": "Your First AI Agent",
            "type": "@n8n/n8n-nodes-langchain.agent",
            "notes": "¬© 2025 Lucas Peyrin",
            "creator": "Lucas Peyrin",
            "position": [
              560,
              -40
            ],
            "parameters": {
              "options": {
                "systemMessage": "<role>\nYou are the n8n Demo AI Agent, a friendly and helpful assistant designed to showcase the power of AI agents within the n8n automation platform. You were created by Lucas Peyrin as part of the \"Your First AI Agent\" template. Your personality is encouraging, slightly educational, and enthusiastic about automation. Your primary function is to demonstrate your capabilities by using your available tools to answer user questions and fulfill their requests. You also frequently mention the other templates from https://n8n.io/creators/lucaspeyrin and push forward forms to give feedback, asking if they would like coaching or consulting.\n</role>\n\n<instructions>\n<goal>\nYour primary goal is to act as a live demonstration of an AI Agent built with n8n. You will interact with users, answer their questions by intelligently using your available tools, and explain the concepts behind AI agents to help them understand their potential. You should also guide them towards further learning and feedback opportunities provided by the template's creator, Lucas Peyrin.\n</goal>\n\n<context>\n### How I Work\nI am an AI model operating within a simple n8n workflow. This workflow gives me two key things:\n1.  **A set of tools:** These are functions I can call to get information or perform actions.\n2.  **Simple Memory:** I can remember the immediate past of our current conversation to understand context.\n\n### My Purpose\nMy main purpose is to be a showcase. I demonstrate how you can give a chat interface to various functions (my tools) without needing complex UIs. This is a great way to make powerful automations accessible to anyone through simple conversation.\n\n### My Available Tools\nYou must choose one of these tools if the user's request matches its capability. You cannot perform these actions yourself; you must call the tool.\n- **get_a_joke**: Use this when the user asks for a joke.\n- **days_from_now**: Use this to calculate a future date. It requires a number of days as input.\n- **wikipedia**: Use this to search for a summary of a topic on Wikipedia.\n- **create_password**: Use this to generate a strong, random password.\n- **calculate_loan_payment**: Use this to calculate a monthly loan payment. It requires the principal amount, the annual interest rate (e.g., 5 for 5%), and the loan term in years.\n- **n8n_blog_rss_feed**: Use this to fetch the latest articles from the official n8n blog.\n\n### About AI Agents in n8n\n- **Reliability:** While I can use one tool at a time effectively, more advanced agents can perform multi-step tasks. However, for complex, mission-critical processes, it's often more reliable to build structured, step-by-step workflows in n8n rather than relying solely on an agent's reasoning. Agents are fantastic for user-facing interactions, but structured workflows are king for backend reliability.\n- **Best Practices:** A good practice is to keep an agent's toolset focused, typically around 10-15 tools, to ensure reliability and prevent confusion.\n\n### Important Information & Next Steps\nIf the user expresses thanks, asks how they can learn more, or asks for help, you should present the following information from the template's creator, Lucas Peyrin. Here is Lucas' creator link that contains all of his templates that are focused on core n8n skills : [More n8n Templates](https://n8n.io/creators/lucaspeyrin)\n\n**Was this helpful? Let me know!**\nYour feedback is incredibly valuable. You can share your thoughts using this form:\n[Give Feedback about this Template](https://api.ia2s.app/form/templates/feedback?template=First%20AI%20Agent)\n\n**Ready to Build Something Great?**\n- **n8n Coaching:** To master n8n with one-on-one sessions, book a session here: [Get Personalized n8n Coaching](https://api.ia2s.app/form/templates/coaching?template=First%20AI%20Agent)\n- **n8n Consulting:** For complex projects and custom workflows, inquire about consulting services here: [Get an Expert to do my n8n Project](https://api.ia2s.app/form/templates/consulting?template=First%20AI%20Agent)\n</context>\n\n<output_format>\n- Respond in a friendly, conversational, and helpful tone.\n- When a user's request requires a tool, first select the appropriate tool. Then, present the result of the tool's execution to the user in a clear and understandable way.\n- Be proactive. If the user is unsure what to do, suggest some examples of what they can ask you based on your available tools (e.g., Talk about your tools and what you know about yourself).\n- When appropriate, seamlessly integrate the \"Important Information & Next Steps\" into your response.\n</output_format>\n</instructions>"
              }
            },
            "typeVersion": 2
          },
          {
            "id": "6acac509-f2a0-4c88-8fb3-837553c7eb8f",
            "cid": "Ikx1Y2FzIFBleXJpbiI",
            "name": "get_a_joke",
            "type": "n8n-nodes-base.httpRequestTool",
            "notes": "¬© 2025 Lucas Peyrin",
            "creator": "Lucas Peyrin",
            "position": [
              740,
              480
            ],
            "parameters": {
              "url": "https://v2.jokeapi.dev/joke/Any?blacklistFlags=nsfw,religious,political,racist,sexist,explicit&type=single",
              "fields": "joke",
              "options": {},
              "fieldsToInclude": "selected",
              "toolDescription": "Gets a joke from the jokeapi.",
              "optimizeResponse": true
            },
            "typeVersion": 4.2
          },
          {
            "id": "7b7aac6a-9819-4824-96f9-7505ec42db68",
            "cid": "Ikx1Y2FzIFBleXJpbiI",
            "name": "days_from_now",
            "type": "n8n-nodes-base.dateTimeTool",
            "notes": "¬© 2025 Lucas Peyrin",
            "creator": "Lucas Peyrin",
            "position": [
              880,
              480
            ],
            "parameters": {
              "endDate": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('End_Date', `Put the date to compare with now here.`, 'string') }}",
              "options": {},
              "operation": "getTimeBetweenDates",
              "startDate": "={{ $now }}",
              "descriptionType": "manual",
              "outputFieldName": "now_day_difference",
              "toolDescription": "Gets the difference (in days) between now and a set date."
            },
            "typeVersion": 2
          },
          {
            "id": "5f533d73-7dff-41fb-8bd7-dbeb05be6f25",
            "cid": "Ikx1Y2FzIFBleXJpbiI",
            "name": "wikipedia",
            "type": "@n8n/n8n-nodes-langchain.toolWikipedia",
            "notes": "¬© 2025 Lucas Peyrin",
            "creator": "Lucas Peyrin",
            "position": [
              1020,
              480
            ],
            "parameters": {},
            "typeVersion": 1
          },
          {
            "id": "92d06ffb-c2c1-4bca-b443-72b74ad41eb2",
            "cid": "Ikx1Y2FzIFBleXJpbiI",
            "name": "create_password",
            "type": "n8n-nodes-base.cryptoTool",
            "notes": "¬© 2025 Lucas Peyrin",
            "creator": "Lucas Peyrin",
            "position": [
              1160,
              480
            ],
            "parameters": {
              "action": "generate",
              "encodingType": "base64",
              "stringLength": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Length', `Usually 8 to 16 works well.`, 'number') }}",
              "toolDescription": "Generate a secure Password.",
              "dataPropertyName": "password"
            },
            "typeVersion": 1
          },
          {
            "id": "cae4f01a-48c8-4fb6-90c7-5a157d9446f0",
            "cid": "Ikx1Y2FzIFBleXJpbiI",
            "name": "calculate_loan_payment",
            "type": "@n8n/n8n-nodes-langchain.toolCode",
            "notes": "¬© 2025 Lucas Peyrin",
            "creator": "Lucas Peyrin",
            "position": [
              1340,
              480
            ],
            "parameters": {
              "jsCode": "const principal = query.loan_amount;\nconst annualRate = query.annual_rate;\nconst years = query.term_years;\n\n// Convert annual rate percentage to a monthly decimal rate\nconst monthlyRate = (annualRate / 100) / 12;\n// Convert years to total number of payments\nconst numberOfPayments = years * 12;\n\nif (principal <= 0 || annualRate <= 0 || years <= 0) {\n  return { error: \"Loan amount, interest rate, and term must be positive numbers.\" };\n}\n\n// Amortization formula: M = P * [r(1+r)^n] / [(1+r)^n - 1]\nconst monthlyPayment = principal * (monthlyRate * Math.pow(1 + monthlyRate, numberOfPayments)) / (Math.pow(1 + monthlyRate, numberOfPayments) - 1);\n\nconst result = {\n  monthly_payment: monthlyPayment.toFixed(2), // Format to 2 decimal places for currency\n  total_paid: (monthlyPayment * numberOfPayments).toFixed(2),\n  total_interest: ((monthlyPayment * numberOfPayments) - principal).toFixed(2)\n};\n\nreturn JSON.stringify(result);",
              "description": "Calculates the fixed monthly payment for a loan using the standard amortization formula. Requires the total loan amount, the annual interest rate as a percentage (e.g., 5 for 5%), and the loan term in years.",
              "jsonSchemaExample": "{\n\t\"loan_amount\": 250000,\n    \"annual_rate\": 6.5,\n    \"term_years\": 30\n}",
              "specifyInputSchema": true
            },
            "typeVersion": 1.3
          },
          {
            "id": "58d0757a-160e-44db-ae58-1f4dcdc617e9",
            "cid": "Ikx1Y2FzIFBleXJpbiI",
            "name": "n8n_blog_rss_feed",
            "type": "n8n-nodes-base.rssFeedReadTool",
            "notes": "¬© 2025 Lucas Peyrin",
            "creator": "Lucas Peyrin",
            "position": [
              1520,
              480
            ],
            "parameters": {
              "url": "https://n8n.io/blog/rss",
              "options": {},
              "toolDescription": "Gets the latest n8n blog posts."
            },
            "typeVersion": 1.2
          },
          {
            "id": "140875e4-a202-4acb-aef2-1839e93e5eea",
            "cid": "Ikx1Y2FzIFBleXJpbiI",
            "name": "Sticky Note10",
            "type": "n8n-nodes-base.stickyNote",
            "notes": "¬© 2025 Lucas Peyrin",
            "creator": "Lucas Peyrin",
            "position": [
              1720,
              -160
            ],
            "parameters": {
              "color": 4,
              "width": 540,
              "height": 800,
              "content": "## Was this helpful? Let me know!\n\nI really hope this template helped you understand how AI Agents work here in n8n. Your feedback is incredibly valuable and helps me create better resources for the n8n community.\n\n### **Share Your Thoughts & Ideas**\n\nWhether you have a suggestion, found a typo, or just want to say thanks, I'd love to hear from you!\nHere's a simple n8n form built for this purpose:\n\n#### ‚û°Ô∏è **[Click here to give feedback](https://api.ia2s.app/form/templates/feedback?template=First%20AI%20Agent)**\n\n### **Ready to Build Something Great?**\n\nIf you're looking to take your n8n skills or business automation to the next level, I can help.\n\n**üéì n8n Coaching:** Want to become an n8n pro? I offer one-on-one coaching sessions to help you master workflows, tackle specific problems, and build with confidence.\n#### ‚û°Ô∏è **[Book a Coaching Session](https://api.ia2s.app/form/templates/coaching?template=First%20AI%20Agent)**\n\n**üíº n8n Consulting:** Have a complex project, an integration challenge, or need a custom workflow built for your business? Let's work together to create a powerful automation solution.\n#### ‚û°Ô∏è **[Inquire About Consulting Services](https://api.ia2s.app/form/templates/consulting?template=First%20AI%20Agent)**\n\n---\n\nHappy Automating!\nLucas Peyrin"
            },
            "typeVersion": 1
          },
          {
            "id": "6ab90a26-fdb2-4ac2-9d82-d26704725f36",
            "cid": "Ikx1Y2FzIFBleXJpbiI",
            "name": "Sticky Note1",
            "type": "n8n-nodes-base.stickyNote",
            "notes": "¬© 2025 Lucas Peyrin",
            "creator": "Lucas Peyrin",
            "position": [
              -220,
              -340
            ],
            "parameters": {
              "width": 460,
              "height": 460,
              "content": "#### üí¨ The Chat Interface\n\nThis is the public-facing chat window where you'll talk to your agent.\n\n**How to Test:**\n1.  **Activate** the workflow.\n2.  Copy the ***Chat URL** from this node's panel.\n3.  Open the URL in a new browser tab to start chatting!\n\n\nYou can customize the look and feel (title, colors, etc.) in the 'Options' and 'Custom CSS' tabs."
            },
            "typeVersion": 1
          },
          {
            "id": "3d455f51-f2c3-4603-ae14-d5bb004d10f8",
            "cid": "Ikx1Y2FzIFBleXJpbiI",
            "name": "Sticky Note2",
            "type": "n8n-nodes-base.stickyNote",
            "notes": "¬© 2025 Lucas Peyrin",
            "creator": "Lucas Peyrin",
            "position": [
              440,
              -340
            ],
            "parameters": {
              "color": 6,
              "width": 540,
              "height": 460,
              "content": "#### üß† The Brain: Your AI Agent\n\nThis is the most important node! It acts as the central brain of your operation.\n\n**What it does:**\n1.  **Receives** your message from the chat.\n2.  **Understands** your goal.\n3.  **Decides** which 'Tool' (superpower) to use.\n4.  **Responds** to you after using the tool.\n\n\nThe **System Message** in this node defines the agent's personality, instructions, and knowledge of its tools. This is where the real magic happens!"
            },
            "typeVersion": 1
          },
          {
            "id": "e746b1f2-1028-428d-8b88-19004bc29f38",
            "cid": "Ikx1Y2FzIFBleXJpbiI",
            "name": "Sticky Note3",
            "type": "n8n-nodes-base.stickyNote",
            "notes": "¬© 2025 Lucas Peyrin",
            "creator": "Lucas Peyrin",
            "position": [
              -220,
              140
            ],
            "parameters": {
              "color": 3,
              "width": 460,
              "height": 500,
              "content": "#### ü§ñ The AI Brainpower (LLM)\n\nThese nodes are the Large Language Models (LLMs) that provide the actual intelligence for your agent.\n\n**ACTION REQUIRED:**\n1.  **Choose ONE model:** By default, Gemini is connected. If you prefer OpenAI, disconnect the Gemini node and connect the OpenAI node. Make sure it is enabled (you can press 'D' while it is selected to toggle Deactivation).\n2.  **Add your credentials:** Select your pre-configured API key from the 'Credential' dropdown or create a new credential for the selected model.\n\n\nYour agent won't work without a brain!"
            },
            "typeVersion": 1
          },
          {
            "id": "c08bd708-8e50-4d10-a9bd-5716b76c82c3",
            "cid": "Ikx1Y2FzIFBleXJpbiI",
            "name": "Sticky Note4",
            "type": "n8n-nodes-base.stickyNote",
            "notes": "¬© 2025 Lucas Peyrin",
            "creator": "Lucas Peyrin",
            "position": [
              260,
              160
            ],
            "parameters": {
              "color": 7,
              "width": 340,
              "height": 480,
              "content": "#### üß† Short-Term Memory\n\nThis node gives your agent a simple memory.\n\nIt allows the agent to remember the last few messages of your conversation. This is crucial for providing context and having a natural, back-and-forth chat.\n\nYou can control how many messages it remembers with the 'Context Window Length' setting."
            },
            "typeVersion": 1
          },
          {
            "id": "199a2071-0a07-493b-b281-542834cb86d8",
            "cid": "Ikx1Y2FzIFBleXJpbiI",
            "name": "Sticky Note5",
            "type": "n8n-nodes-base.stickyNote",
            "notes": "¬© 2025 Lucas Peyrin",
            "creator": "Lucas Peyrin",
            "position": [
              620,
              160
            ],
            "parameters": {
              "color": 5,
              "width": 1060,
              "height": 480,
              "content": "#### üõ†Ô∏è The Agent's Toolbox (Superpowers)\n\nThese nodes are the **tools** your agent can use. They are its superpowers!\n\nEach tool gives the agent a specific ability, like searching Wikipedia, getting a joke, or calculating a loan.\n\n**How it works:** The Agent's 'Brain' node analyzes your request and intelligently chooses the correct tool from this toolbox to get the job done.\n\n**Want to add more powers?** Simply add another tool node (like the Google Calendar Tool or a custom HTTP Request Tool) and connect it to the Agent's `ai_tool` input!"
            },
            "typeVersion": 1
          }
        ],
        "pinData": {},
        "connections": {
          "Gemini": {
            "ai_languageModel": [
              [
                {
                  "node": "Your First AI Agent",
                  "type": "ai_languageModel",
                  "index": 0
                }
              ]
            ]
          },
          "OpenAI": {
            "ai_languageModel": [
              []
            ]
          },
          "wikipedia": {
            "ai_tool": [
              [
                {
                  "node": "Your First AI Agent",
                  "type": "ai_tool",
                  "index": 0
                }
              ]
            ]
          },
          "get_a_joke": {
            "ai_tool": [
              [
                {
                  "node": "Your First AI Agent",
                  "type": "ai_tool",
                  "index": 0
                }
              ]
            ]
          },
          "Simple Memory": {
            "ai_memory": [
              [
                {
                  "node": "Your First AI Agent",
                  "type": "ai_memory",
                  "index": 0
                }
              ]
            ]
          },
          "days_from_now": {
            "ai_tool": [
              [
                {
                  "node": "Your First AI Agent",
                  "type": "ai_tool",
                  "index": 0
                }
              ]
            ]
          },
          "create_password": {
            "ai_tool": [
              [
                {
                  "node": "Your First AI Agent",
                  "type": "ai_tool",
                  "index": 0
                }
              ]
            ]
          },
          "n8n_blog_rss_feed": {
            "ai_tool": [
              [
                {
                  "node": "Your First AI Agent",
                  "type": "ai_tool",
                  "index": 0
                }
              ]
            ]
          },
          "Example Chat Window": {
            "main": [
              [
                {
                  "node": "Your First AI Agent",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          },
          "calculate_loan_payment": {
            "ai_tool": [
              [
                {
                  "node": "Your First AI Agent",
                  "type": "ai_tool",
                  "index": 0
                }
              ]
            ]
          }
        }
      }
    },
    {
      "id": 7639,
      "name": "Talk to Your Google Sheets Using ChatGPT-5",
      "description": "This n8n workflow template creates an intelligent data analysis chatbot that can answer questions about data stored in Google Sheets using OpenAI's GPT-5 Mini model. The system automatically analyzes your spreadsheet data and provides insights through natural language conversations.\n\n## What This Workflow Does\n\n- **Chat Interface**: Provides a conversational interface for asking questions about your data\n- **Smart Data Analysis**: Uses AI to understand column structures and data relationships\n- **Google Sheets Integration**: Connects directly to your Google Sheets data\n- **Memory Buffer**: Maintains conversation context for follow-up questions\n- **Automated Column Detection**: Automatically identifies and describes your data columns\n\n## üöÄ Try It Out!\n\n---\n\n### 1. Set Up OpenAI Connection\n\n#### Get Your API Key\n1. Visit the [OpenAI API Keys](https://platform.openai.com/api-keys) page.\n2. Go to [OpenAI Billing](https://platform.openai.com/settings/organization/billing/overview).\n3. Add funds to your billing account.\n4. Copy your API key into your **OpenAI credentials** in n8n (or your chosen platform).\n\n---\n\n### 2. Prepare Your Google Sheet\n\n#### Connect Your Data in Google Sheets\n- Data must follow this format: [Sample Marketing Data](https://docs.google.com/spreadsheets/d/1UDWt0-Z9fHqwnSNfU3vvhSoYCFG6EG3E-ZewJC_CLq4/edit?gid=365710158#gid=365710158)\n- **First row** contains column names.\n- Data should be in **rows 2‚Äì100**.\n- Log in using **OAuth**, then select your workbook and sheet.\n\n---\n\n### 3. Ask Questions of Your Data\n\nYou can ask natural language questions to analyze your marketing data, such as:\n- **Total spend** across all campaigns.\n- **Spend for Paid Search only**.\n- **Month-over-month changes** in ad spend.\n- **Top-performing campaigns** by conversion rate.\n- **Cost per lead** for each channel.\n\n---\n\n## üì¨ Need Help or Want to Customize This?\nüìß [rbreen@ynteractive.com](mailto:rbreen@ynteractive.com)  \nüîó [LinkedIn](https://www.linkedin.com/in/robert-breen-29429625/)\nüîó [n8n Automation Experts](https://ynteractive.com/)\n",
      "totalViews": 35985,
      "createdAt": "2025-08-20T09:39:06.877Z",
      "author": "rbreen",
      "nodeTypes": [
        "n8n-nodes-base.googleSheetsTool",
        "@n8n/n8n-nodes-langchain.lmChatOpenAi",
        "@n8n/n8n-nodes-langchain.agent",
        "@n8n/n8n-nodes-langchain.chatTrigger",
        "@n8n/n8n-nodes-langchain.memoryBufferWindow"
      ],
      "nodeCount": 11,
      "connectionCount": 4,
      "categories": [
        "Document Extraction",
        "AI RAG"
      ],
      "workflowJson": {
        "meta": {
          "instanceId": "ad0113c344ee237399e44e9f11798b05baeb83a6196d514a9ae9d2ad71c3b5c9",
          "templateCredsSetupCompleted": true
        },
        "nodes": [
          {
            "id": "5b054044-5814-47aa-99b4-0a9c5a601bad",
            "name": "Analyze Data",
            "type": "n8n-nodes-base.googleSheetsTool",
            "position": [
              784,
              1328
            ],
            "parameters": {
              "options": {},
              "sheetName": {
                "__rl": true,
                "mode": "list",
                "value": 365710158,
                "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1UDWt0-Z9fHqwnSNfU3vvhSoYCFG6EG3E-ZewJC_CLq4/edit#gid=365710158",
                "cachedResultName": "Data"
              },
              "documentId": {
                "__rl": true,
                "mode": "list",
                "value": "1UDWt0-Z9fHqwnSNfU3vvhSoYCFG6EG3E-ZewJC_CLq4",
                "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1UDWt0-Z9fHqwnSNfU3vvhSoYCFG6EG3E-ZewJC_CLq4/edit?usp=drivesdk",
                "cachedResultName": "Sample Marketing Data - n8n"
              }
            },
            "typeVersion": 4.7
          },
          {
            "id": "a6869994-77e8-4f5d-916c-cc40f0b5ab7e",
            "name": "OpenAI Chat Model",
            "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
            "position": [
              224,
              1312
            ],
            "parameters": {
              "model": {
                "__rl": true,
                "mode": "list",
                "value": "gpt-4.1-nano",
                "cachedResultName": "gpt-4.1-nano"
              },
              "options": {}
            },
            "typeVersion": 1.2
          },
          {
            "id": "aa9fe53d-83b8-47e0-a4be-8496f4cbe552",
            "name": "Sticky Note2",
            "type": "n8n-nodes-base.stickyNote",
            "position": [
              -32,
              416
            ],
            "parameters": {
              "color": 7,
              "width": 1152,
              "height": 1168,
              "content": "## Talk to Your Data with Google Sheets & OpenAI GPT-5 Mini\nThis n8n workflow template creates an intelligent data analysis chatbot that can answer questions about data stored in Google Sheets using OpenAI's GPT-5 Mini model. The system automatically analyzes your spreadsheet data and provides insights through natural language conversations.\n"
            },
            "typeVersion": 1
          },
          {
            "id": "2ecbc678-f948-4435-bc3a-e66718810b33",
            "name": "Talk to Your Data",
            "type": "@n8n/n8n-nodes-langchain.agent",
            "position": [
              704,
              688
            ],
            "parameters": {
              "options": {
                "systemMessage": "Google Sheets Ask-Data \n\n\nYou are Ask-Data. Answer questions using Google Sheets ONLY via the tool below. Be precise and conservative. \n\nThere is only one dataset. dont ask what dataset it is. \n\nUse the data tool to answer the question."
              },
              "hasOutputParser": true
            },
            "typeVersion": 2.2
          },
          {
            "id": "f1beca70-a4bd-41db-a461-2a3041e8963f",
            "name": "Sticky Note7",
            "type": "n8n-nodes-base.stickyNote",
            "position": [
              16,
              576
            ],
            "parameters": {
              "color": 7,
              "width": 480,
              "height": 432,
              "content": "### 3. Ask Questions of Your Data\n\nYou can ask natural language questions to analyze your marketing data, such as:\n- **Total spend** across all campaigns.\n- **Spend for Paid Search only**.\n- **Month-over-month changes** in ad spend.\n- **Top-performing campaigns** by conversion rate.\n- **Cost per lead** for each channel."
            },
            "typeVersion": 1
          },
          {
            "id": "277d266d-e457-4005-baf6-2de276b2a888",
            "name": "Sticky Note8",
            "type": "n8n-nodes-base.stickyNote",
            "position": [
              -592,
              416
            ],
            "parameters": {
              "width": 528,
              "height": 1168,
              "content": "## üé• Watch This Tutorial\n\n@[youtube](qsrVPdo6svc)\n\n\n### 1. Set Up OpenAI Connection\n\n#### Get Your API Key\n1. Visit the [OpenAI API Keys](https://platform.openai.com/api-keys) page.\n2. Go to [OpenAI Billing](https://platform.openai.com/settings/organization/billing/overview).\n3. Add funds to your billing account.\n4. Copy your API key into your **OpenAI credentials** in n8n (or your chosen platform).\n\n---\n### 2. Prepare Your Google Sheet\n\n#### Connect Your Data in Google Sheets\n- Data must follow this format: [Sample Marketing Data](https://docs.google.com/spreadsheets/d/1UDWt0-Z9fHqwnSNfU3vvhSoYCFG6EG3E-ZewJC_CLq4/edit?gid=365710158#gid=365710158)\n- **First row** contains column names.\n- Data should be in **rows 2‚Äì100**.\n- Log in using **OAuth**, then select your workbook and sheet.\n\n---\n### 3. Ask Questions of Your Data\n\nYou can ask natural language questions to analyze your marketing data, such as:\n- **Total spend** across all campaigns.\n- **Spend for Paid Search only**.\n- **Month-over-month changes** in ad spend.\n- **Top-performing campaigns** by conversion rate.\n- **Cost per lead** for each channel.\n\n---\n## üì¨ Need Help or Want to Customize This?\nüìß [rbreen@ynteractive.com](mailto:robert@ynteractive.com)  \nüîó [LinkedIn](https://www.linkedin.com/in/robert-breen-29429625/)\n\n"
            },
            "typeVersion": 1
          },
          {
            "id": "0249ac43-4804-4c12-b72a-9ef0357f2412",
            "name": "Sticky Note9",
            "type": "n8n-nodes-base.stickyNote",
            "position": [
              16,
              1056
            ],
            "parameters": {
              "color": 3,
              "width": 480,
              "height": 432,
              "content": "### 1. Set Up OpenAI Connection\n\n#### Get API Key:\n1. Go to [OpenAI Platform](https://platform.openai.com/api-keys)\n1. Go to [OpenAI Billing](https://platform.openai.com/settings/organization/billing/overview)\n2. Add funds to your billing account & copy your api key into the openAI credentials\n"
            },
            "typeVersion": 1
          },
          {
            "id": "ddb3a0d8-5a07-4361-ba37-1c9d1a225d86",
            "name": "Sticky Note10",
            "type": "n8n-nodes-base.stickyNote",
            "position": [
              560,
              1056
            ],
            "parameters": {
              "color": 3,
              "width": 512,
              "height": 432,
              "content": "### 2. Prepare Your Google Sheet\n\n#### Connect your Data in Google Sheets\n- Data must be in a format similar to this: [Sample Marketing Data](https://docs.google.com/spreadsheets/d/1UDWt0-Z9fHqwnSNfU3vvhSoYCFG6EG3E-ZewJC_CLq4/edit?gid=365710158#gid=365710158)\n- First row contains column names\n- Data in rows 2-100\n- Log in with OAuth2 and choose your workbook and sheet\n- Optional: Try connecting to Airtable, Notion or your Database"
            },
            "typeVersion": 1
          },
          {
            "id": "93c92fba-07f8-416f-952b-3b001e8294e0",
            "name": "Chat with Your Data",
            "type": "@n8n/n8n-nodes-langchain.chatTrigger",
            "position": [
              192,
              848
            ],
            "webhookId": "edca0f0a-77c3-43e5-8ece-e514a29446f5",
            "parameters": {
              "options": {}
            },
            "typeVersion": 1.3
          },
          {
            "id": "713d398d-fb27-42b2-bb39-21ef8f8f97df",
            "name": "Memory",
            "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
            "position": [
              736,
              880
            ],
            "parameters": {},
            "typeVersion": 1.3
          },
          {
            "id": "db0584ce-5b77-45aa-b0d1-1d1055c97157",
            "name": "Sticky Note",
            "type": "n8n-nodes-base.stickyNote",
            "position": [
              560,
              576
            ],
            "parameters": {
              "color": 7,
              "width": 512,
              "height": 432,
              "content": ""
            },
            "typeVersion": 1
          }
        ],
        "pinData": {},
        "connections": {
          "Memory": {
            "ai_memory": [
              [
                {
                  "node": "Talk to Your Data",
                  "type": "ai_memory",
                  "index": 0
                }
              ]
            ]
          },
          "Analyze Data": {
            "ai_tool": [
              [
                {
                  "node": "Talk to Your Data",
                  "type": "ai_tool",
                  "index": 0
                }
              ]
            ]
          },
          "OpenAI Chat Model": {
            "ai_languageModel": [
              [
                {
                  "node": "Talk to Your Data",
                  "type": "ai_languageModel",
                  "index": 0
                }
              ]
            ]
          },
          "Chat with Your Data": {
            "main": [
              [
                {
                  "node": "Talk to Your Data",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          }
        }
      }
    },
    {
      "id": 5035,
      "name": "Generate & Auto-post AI Videos to Social Media with Veo3 and Blotato",
      "description": "![Workflow Screenshot](https://www.dr-firas.com/Veo3_blotato2.png)\n\n# Automate video creation with Veo3 and auto-post to Instagram, TikTok via Blotato\n\n### Who is this for?\n\nThis template is ideal for content creators, social media managers, YouTubers, and digital marketers who want to generate high-quality videos daily using AI and distribute them effortlessly across multiple platforms.\n\nIt‚Äôs perfect for anyone who wants to scale short-form content creation without video editing tools.\n\n### What problem is this workflow solving?\n\nCreating and distributing consistent video content requires:\n- Generating ideas\n- Writing scripts and prompts\n- Rendering videos\n- Manually posting to platforms\n\nThis workflow automates all of that. It transforms one prompt into a professional AI-generated video and publishes it automatically ‚Äî saving time and increasing reach.\n\n### What this workflow does\n\n1. **Triggers daily** to generate a new idea with OpenAI (or your custom prompt).\n2. **Creates a video prompt** formatted specifically for Google Veo3.\n3. **Generates a cinematic video** using the Veo3 API.\n4. **Logs the video data** into a Google Sheet.\n5. **Retrieves the final video URL** once Veo3 finishes rendering.\n6. **Uploads the video to Blotato** for publishing.\n7. **Auto-posts** the video to Instagram, TikTok, YouTube, Facebook, LinkedIn, Threads, Twitter (X), Pinterest, and Bluesky.\n\n### Setup\n\n1. Add your **OpenAI API key** to the GPT-4.1 nodes.\n2. Connect your **Veo3 API credentials** in the video generation node.\n3. Link your **Google Sheets account** and use a sheet with columns: `Prompt`, `Video URL`, `Status`.\n4. Connect your **Blotato API key** and set your platform IDs in the `Assign Social Media IDs` node.\n5. Adjust the **Schedule Trigger** to your desired posting frequency.\n\n### How to customize this workflow to your needs\n\n- **Edit the AI prompt** to align with your niche (fitness, finance, education, etc.).\n- **Add your own branding overlays** using JSON2Video or similar tools.\n- **Change platform selection** by enabling/disabling specific HTTP Request nodes.\n- **Add a Telegram step** to preview the video before auto-posting.\n- **Track performance** by adding metrics columns in Google Sheets.\n\nüìÑ **Documentation**: [Notion Guide](https://automatisation.notion.site/Automate-video-creation-with-Veo3-and-auto-post-to-Instagram-TikTok-via-Blotato-2163d6550fd980768996f05afb2794ea)\n\n---\n\n### Need help customizing?\nContact me for consulting and support : [Linkedin](https://www.linkedin.com/in/dr-firas/) / [Youtube](https:/https://www.youtube.com/@DRFIRASS)",
      "totalViews": 145559,
      "createdAt": "2025-06-18T22:44:00.392Z",
      "author": "drfiras",
      "nodeTypes": [
        "n8n-nodes-base.set",
        "n8n-nodes-base.googleSheets",
        "n8n-nodes-base.httpRequest",
        "n8n-nodes-base.scheduleTrigger",
        "@n8n/n8n-nodes-langchain.agent",
        "@n8n/n8n-nodes-langchain.toolThink",
        "@n8n/n8n-nodes-langchain.lmChatOpenAi",
        "@n8n/n8n-nodes-langchain.outputParserStructured",
        "n8n-nodes-base.wait"
      ],
      "nodeCount": 29,
      "connectionCount": 16,
      "categories": [
        "Content Creation",
        "Multimodal AI"
      ],
      "workflowJson": {
        "id": "eFkkWqS5KdrxZ43P",
        "meta": {
          "instanceId": "a2b23892dd6989fda7c1209b381f5850373a7d2b85609624d7c2b7a092671d44",
          "templateCredsSetupCompleted": true
        },
        "name": "Automate video creation with Veo3 and auto-post to Instagram, TikTok via Blotato - vide",
        "tags": [],
        "nodes": [
          {
            "id": "11a7c5b6-0db7-4d99-a1a0-e34e05c23ff5",
            "name": "Sticky Note",
            "type": "n8n-nodes-base.stickyNote",
            "position": [
              340,
              480
            ],
            "parameters": {
              "width": 1200,
              "height": 500,
              "content": "# ‚úÖ STEP 1 ‚Äî Generate Script & Prompt with AI"
            },
            "typeVersion": 1
          },
          {
            "id": "2f3aec5c-4144-4e0c-b1c8-7f96dfe14370",
            "name": "Sticky Note1",
            "type": "n8n-nodes-base.stickyNote",
            "position": [
              340,
              1020
            ],
            "parameters": {
              "color": 3,
              "width": 1200,
              "height": 280,
              "content": "# ‚úÖ STEP 2 ‚Äî Create Video Using Veo3\n\n"
            },
            "typeVersion": 1
          },
          {
            "id": "45a5a9f4-fe6a-43a7-a032-c69750826209",
            "name": "Assign Social Media IDs",
            "type": "n8n-nodes-base.set",
            "position": [
              420,
              1680
            ],
            "parameters": {
              "mode": "raw",
              "options": {},
              "jsonOutput": "{\n  \"instagram_id\": \"1111\",\n  \"youtube_id\": \"1111\",\n  \"threads_id\": \"1111\",\n  \"tiktok_id\": \"1111\",\n  \"facebook_id\": \"1111\",\n  \"facebook_page_id\": \"1111\",\n  \"twitter_id\": \"1111\",\n  \"linkedin_id\": \"1111\",\n  \"pinterest_id\": \"1111\",\n  \"pinterest_board_id\": \"1111\",\n  \"bluesky_id\": \"1111\"\n}\n"
            },
            "typeVersion": 3.4
          },
          {
            "id": "6d125a85-b626-4981-8cfc-bcac4ea0ca89",
            "name": "Get my video",
            "type": "n8n-nodes-base.googleSheets",
            "position": [
              520,
              1440
            ],
            "parameters": {
              "options": {},
              "sheetName": {
                "__rl": true,
                "mode": "id",
                "value": "="
              },
              "documentId": {
                "__rl": true,
                "mode": "id",
                "value": "="
              }
            },
            "credentials": {
              "googleSheetsOAuth2Api": {
                "id": "51us92xkOlrvArhV",
                "name": "Google Sheets account"
              }
            },
            "typeVersion": 4.5
          },
          {
            "id": "779818a1-97bd-4bf9-ba17-995c1439df6f",
            "name": "Upload Video to Blotato",
            "type": "n8n-nodes-base.httpRequest",
            "position": [
              640,
              1680
            ],
            "parameters": {
              "url": "https://backend.blotato.com/v2/media",
              "method": "POST",
              "options": {},
              "sendBody": true,
              "sendHeaders": true,
              "bodyParameters": {
                "parameters": [
                  {
                    "name": "url",
                    "value": "={{ $('Get my video').item.json['final_output'] }}"
                  }
                ]
              },
              "headerParameters": {
                "parameters": [
                  {
                    "name": "blotato-api-key",
                    "value": "YOUR_API_HERE"
                  }
                ]
              }
            },
            "typeVersion": 4.2
          },
          {
            "id": "113d635c-bf8f-4ed3-801e-de78b0df9437",
            "name": "INSTAGRAM",
            "type": "n8n-nodes-base.httpRequest",
            "position": [
              920,
              1440
            ],
            "parameters": {
              "url": "https://backend.blotato.com/v2/posts",
              "method": "POST",
              "options": {},
              "jsonBody": "={\n  \"post\": {\n    \"accountId\": \"{{ $('Assign Social Media IDs').item.json.instagram_id }}\",\n    \"target\": {\n      \"targetType\": \"instagram\"\n    },\n    \"content\": {\n      \"text\": \"{{ $('Get my video').item.json.DESCRIPTION }}\",\n      \"platform\": \"instagram\",\n      \"mediaUrls\": [\n        \"{{ $json.url }}\"\n      ]\n    }\n  }\n}\n\n",
              "sendBody": true,
              "sendHeaders": true,
              "specifyBody": "json",
              "headerParameters": {
                "parameters": [
                  {
                    "name": "blotato-api-key",
                    "value": "YOUR_API_HERE"
                  }
                ]
              }
            },
            "typeVersion": 4.2
          },
          {
            "id": "02aa72ee-e5b9-44ee-9cbf-e8ddbc259570",
            "name": "YOUTUBE",
            "type": "n8n-nodes-base.httpRequest",
            "position": [
              1140,
              1440
            ],
            "parameters": {
              "url": "https://backend.blotato.com/v2/posts",
              "method": "POST",
              "options": {},
              "jsonBody": "={\n  \"post\": {\n    \"accountId\": \"{{ $('Assign Social Media IDs').item.json.youtube_id }}\",\n    \"target\": {\n      \"targetType\": \"youtube\",\n      \"title\": \"{{ $('Get my video').item.json.Titre }}\",\n      \"privacyStatus\": \"unlisted\",\n      \"shouldNotifySubscribers\": \"false\"\n    },\n    \"content\": {\n      \"text\": \"{{ $('Get my video').item.json.DESCRIPTION }}\",\n      \"platform\": \"youtube\",\n      \"mediaUrls\": [\n        \"{{ $json.url }}\"\n      ]\n    }\n  }\n}\n",
              "sendBody": true,
              "sendHeaders": true,
              "specifyBody": "json",
              "headerParameters": {
                "parameters": [
                  {
                    "name": "blotato-api-key",
                    "value": "YOUR_API_HERE"
                  }
                ]
              }
            },
            "typeVersion": 4.2
          },
          {
            "id": "b9e82889-b753-43e7-b417-213a99763802",
            "name": "TIKTOK",
            "type": "n8n-nodes-base.httpRequest",
            "position": [
              1340,
              1440
            ],
            "parameters": {
              "url": "https://backend.blotato.com/v2/posts",
              "method": "POST",
              "options": {},
              "jsonBody": "={\n  \"post\": {\n    \"accountId\": \"{{ $('Assign Social Media IDs').item.json.tiktok_id }}\",\n    \"target\": {\n      \"targetType\": \"tiktok\",\n      \"isYourBrand\": \"false\", \n      \"disabledDuet\": \"false\",\n      \"privacyLevel\": \"PUBLIC_TO_EVERYONE\",\n      \"isAiGenerated\": \"true\",\n      \"disabledStitch\": \"false\",\n      \"disabledComments\": \"false\",\n      \"isBrandedContent\": \"false\"\n      \n    },\n    \"content\": {\n      \"text\": \"{{ $('Get my video').item.json.DESCRIPTION }}\",\n      \"platform\": \"tiktok\",\n      \"mediaUrls\": [\n        \"{{ $json.url }}\"\n      ]\n    }\n  }\n}\n",
              "sendBody": true,
              "sendHeaders": true,
              "specifyBody": "json",
              "headerParameters": {
                "parameters": [
                  {
                    "name": "blotato-api-key",
                    "value": "=YOUR_API_HERE"
                  }
                ]
              }
            },
            "typeVersion": 4.2
          },
          {
            "id": "edf4cd31-ae48-4996-816e-8a32ac411e75",
            "name": "FACEBOOK",
            "type": "n8n-nodes-base.httpRequest",
            "position": [
              920,
              1680
            ],
            "parameters": {
              "url": "https://backend.blotato.com/v2/posts",
              "method": "POST",
              "options": {},
              "jsonBody": "={\n  \"post\": {\n    \"accountId\": \"{{ $('Assign Social Media IDs').item.json.facebook_id }}\",\n    \"target\": {\n      \"targetType\": \"facebook\",\n      \"pageId\": \"{{ $('Assign Social Media IDs').item.json.facebook_page_id }}\"\n\n      \n    },\n    \"content\": {\n      \"text\": \"{{ $('Get my video').item.json.DESCRIPTION }}\",\n      \"platform\": \"facebook\",\n      \"mediaUrls\": [\n        \"{{ $json.url }}\"\n      ]\n    }\n  }\n}",
              "sendBody": true,
              "sendHeaders": true,
              "specifyBody": "json",
              "headerParameters": {
                "parameters": [
                  {
                    "name": "blotato-api-key",
                    "value": "=YOUR_API_HERE"
                  }
                ]
              }
            },
            "typeVersion": 4.2
          },
          {
            "id": "edeb50af-020e-4118-af73-2a4fbb3bf6a2",
            "name": "THREADS",
            "type": "n8n-nodes-base.httpRequest",
            "position": [
              1140,
              1680
            ],
            "parameters": {
              "url": "https://backend.blotato.com/v2/posts",
              "method": "POST",
              "options": {},
              "jsonBody": "={\n  \"post\": {\n    \"accountId\": \"{{ $('Assign Social Media IDs').item.json.threads_id }}\",\n    \"target\": {\n      \"targetType\": \"threads\"\n      \n    },\n    \"content\": {\n      \"text\": \"{{ $('Get my video').item.json.DESCRIPTION }}\",\n      \"platform\": \"threads\",\n      \"mediaUrls\": [\n        \"{{ $json.url }}\"\n      ]\n    }\n  }\n}\n",
              "sendBody": true,
              "sendHeaders": true,
              "specifyBody": "json",
              "headerParameters": {
                "parameters": [
                  {
                    "name": "blotato-api-key",
                    "value": "YOUR_API_HERE"
                  }
                ]
              }
            },
            "typeVersion": 4.2
          },
          {
            "id": "210e36e9-8db2-403c-b72a-2ec45bce2eae",
            "name": "TWETTER",
            "type": "n8n-nodes-base.httpRequest",
            "position": [
              1340,
              1680
            ],
            "parameters": {
              "url": "https://backend.blotato.com/v2/posts",
              "method": "POST",
              "options": {},
              "jsonBody": "={\n  \"post\": {\n    \"accountId\": \"{{ $('Assign Social Media IDs').item.json.twitter_id }}\",\n    \"target\": {\n      \"targetType\": \"twitter\"\n      \n    },\n    \"content\": {\n      \"text\": \"{{ $('Get my video').item.json.DESCRIPTION }}\",\n      \"platform\": \"twitter\",\n      \"mediaUrls\": [\n        \"{{ $json.url }}\"\n      ]\n    }\n  }\n}\n",
              "sendBody": true,
              "sendHeaders": true,
              "specifyBody": "json",
              "headerParameters": {
                "parameters": [
                  {
                    "name": "blotato-api-key",
                    "value": "YOUR_API_HERE"
                  }
                ]
              }
            },
            "typeVersion": 4.2
          },
          {
            "id": "ac3069e4-4fe6-4146-a0e2-973b3c374c55",
            "name": "LINKEDIN",
            "type": "n8n-nodes-base.httpRequest",
            "position": [
              920,
              1920
            ],
            "parameters": {
              "url": "https://backend.blotato.com/v2/posts",
              "method": "POST",
              "options": {},
              "jsonBody": "={\n  \"post\": {\n    \"accountId\": \"{{ $('Assign Social Media IDs').item.json.linkedin_id }}\",\n    \"target\": {\n      \"targetType\": \"linkedin\"\n      \n    },\n    \"content\": {\n      \"text\": \"{{ $('Get my video').item.json.DESCRIPTION }}\",\n      \"platform\": \"linkedin\",\n      \"mediaUrls\": [\n        \"{{ $json.url }}\"\n      ]\n    }\n  }\n}\n",
              "sendBody": true,
              "sendHeaders": true,
              "specifyBody": "json",
              "headerParameters": {
                "parameters": [
                  {
                    "name": "blotato-api-key",
                    "value": "YOUR_API_HERE"
                  }
                ]
              }
            },
            "typeVersion": 4.2
          },
          {
            "id": "d9c919d8-ae9c-47cf-9b6f-8cb3e7e1f500",
            "name": "BLUESKY",
            "type": "n8n-nodes-base.httpRequest",
            "position": [
              1140,
              1920
            ],
            "parameters": {
              "url": "https://backend.blotato.com/v2/posts",
              "method": "POST",
              "options": {},
              "jsonBody": "= {\n  \"post\": {\n    \"accountId\": \"{{ $('Assign Social Media IDs').item.json.bluesky_id }}\",\n    \"target\": {\n      \"targetType\": \"bluesky\"\n      \n    },\n    \"content\": {\n      \"text\": \"{{ $('Get my video').item.json.DESCRIPTION }}\",\n      \"platform\": \"bluesky\",\n      \"mediaUrls\": [\n        \"https://pbs.twimg.com/media/GE8MgIiWEAAfsK3.jpg\"\n      ]\n    }\n  }\n}\n",
              "sendBody": true,
              "sendHeaders": true,
              "specifyBody": "json",
              "headerParameters": {
                "parameters": [
                  {
                    "name": "blotato-api-key",
                    "value": "YOUR_API_HERE"
                  }
                ]
              }
            },
            "typeVersion": 4.2
          },
          {
            "id": "a0a0a8fe-f6b0-458c-846e-409200a7b12f",
            "name": "PINTEREST",
            "type": "n8n-nodes-base.httpRequest",
            "position": [
              1340,
              1920
            ],
            "parameters": {
              "url": "https://backend.blotato.com/v2/posts",
              "method": "POST",
              "options": {},
              "jsonBody": "={\n  \"post\": {\n    \"accountId\": \"{{ $('Assign Social Media IDs').item.json.pinterest_id }}\",\n    \"target\": {\n      \"targetType\": \"pinterest\",\n      \"boardId\": \"{{ $('Assign Social Media IDs').item.json.pinterest_board_id }}\"      \n    },\n    \"content\": {\n      \"text\": \"{{ $('Get my video').item.json.DESCRIPTION }}\",\n      \"platform\": \"pinterest\",\n      \"mediaUrls\": [\n        \"https://pbs.twimg.com/media/GE8MgIiWEAAfsK3.jpg\"\n      ]\n    }\n  }\n}\n\n",
              "sendBody": true,
              "sendHeaders": true,
              "specifyBody": "json",
              "headerParameters": {
                "parameters": [
                  {
                    "name": "blotato-api-key",
                    "value": "YOUR_API_HERE"
                  }
                ]
              }
            },
            "typeVersion": 4.2
          },
          {
            "id": "38c75425-36a5-45c7-98cb-ed5eb20af249",
            "name": "Google Sheets",
            "type": "n8n-nodes-base.googleSheets",
            "position": [
              640,
              1920
            ],
            "parameters": {
              "columns": {
                "value": {
                  "STATUS": "Publish",
                  "row_number": "={{ $('Get my video').item.json.row_number }}"
                },
                "schema": [
                  {
                    "id": "PROMPT",
                    "type": "string",
                    "display": true,
                    "required": false,
                    "displayName": "PROMPT",
                    "defaultMatch": false,
                    "canBeUsedToMatch": true
                  },
                  {
                    "id": "DESCRIPTION",
                    "type": "string",
                    "display": true,
                    "required": false,
                    "displayName": "DESCRIPTION",
                    "defaultMatch": false,
                    "canBeUsedToMatch": true
                  },
                  {
                    "id": "URL VIDEO",
                    "type": "string",
                    "display": true,
                    "required": false,
                    "displayName": "URL VIDEO",
                    "defaultMatch": false,
                    "canBeUsedToMatch": true
                  },
                  {
                    "id": "Titre",
                    "type": "string",
                    "display": true,
                    "required": false,
                    "displayName": "Titre",
                    "defaultMatch": false,
                    "canBeUsedToMatch": true
                  },
                  {
                    "id": "STATUS",
                    "type": "string",
                    "display": true,
                    "required": false,
                    "displayName": "STATUS",
                    "defaultMatch": false,
                    "canBeUsedToMatch": true
                  },
                  {
                    "id": "row_number",
                    "type": "string",
                    "display": true,
                    "removed": false,
                    "readOnly": true,
                    "required": false,
                    "displayName": "row_number",
                    "defaultMatch": false,
                    "canBeUsedToMatch": true
                  }
                ],
                "mappingMode": "defineBelow",
                "matchingColumns": [
                  "row_number"
                ],
                "attemptToConvertTypes": false,
                "convertFieldsToString": false
              },
              "options": {},
              "operation": "update",
              "sheetName": {
                "__rl": true,
                "mode": "id",
                "value": "="
              },
              "documentId": {
                "__rl": true,
                "mode": "id",
                "value": "="
              }
            },
            "credentials": {
              "googleSheetsOAuth2Api": {
                "id": "51us92xkOlrvArhV",
                "name": "Google Sheets account"
              }
            },
            "typeVersion": 4.5
          },
          {
            "id": "94db7d6e-ce83-4c9a-916c-c35c802f8d4d",
            "name": "Sticky Note2",
            "type": "n8n-nodes-base.stickyNote",
            "position": [
              340,
              1340
            ],
            "parameters": {
              "color": 4,
              "width": 1200,
              "height": 760,
              "content": "# ‚úÖ STEP 3 ‚Äî Publish Video to Social Media\n"
            },
            "typeVersion": 1
          },
          {
            "id": "3ac616bc-67bb-494c-bd24-3753fc03e7dc",
            "name": "Trigger: Run Daily Script Generator",
            "type": "n8n-nodes-base.scheduleTrigger",
            "position": [
              500,
              560
            ],
            "parameters": {
              "rule": {
                "interval": [
                  {}
                ]
              }
            },
            "typeVersion": 1.2
          },
          {
            "id": "8ae30b31-2ac9-4b62-9094-ce36197d319d",
            "name": "AI Agent: Generate Video Concept",
            "type": "@n8n/n8n-nodes-langchain.agent",
            "position": [
              660,
              560
            ],
            "parameters": {
              "text": "Give me an idea about [a Yeti speaking to a camera and doing a Vlog through his selfie stick]. ",
              "options": {
                "systemMessage": "=You are an AI designed to generate 1 immersive, realistic idea based on a user-provided topic. Your output must be formatted as a JSON array (single line) and follow all the rules below exactly.\n\nRULES:\n\nOnly return 1 idea at a time.\n\nThe user will provide a key topic (e.g. ‚Äúurban farming,‚Äù ‚Äúarctic survival,‚Äù ‚Äústreet food in Vietnam‚Äù).\n\nThe Idea must:\n\nBe under 13 words.\n\nDescribe an interesting and viral-worthy moment, action, or event related to the provided topic.\n\nCan be as surreal as you can get, doesn't have to be real-world!\n\nInvolves a character.\n\nThe Caption must be:\n\nShort, punchy, and viral-friendly.\n\nInclude one relevant emoji.\n\nInclude exactly 12 hashtags in this order:\n** 4 topic-relevant hashtags\n** 4 all-time most popular hashtags\n** 4 currently trending hashtags (based on live research)\n\nAll hashtags must be lowercase.\n\nSet Status to \"for production\" (always).\n\nThe Environment must:\n\nBe under 20 words.\n\nMatch the action in the Idea exactly.\n\nClearly describe:\n\nWhere the event is happening (e.g. rooftop, jungle trail, city alley, frozen lake)\n\nKey visuals or background details (e.g. smoke rising, neon lights, fog, birds overhead)\n\nMain participants (e.g. farmer, cook, mechanic, rescue team, animal)\n\nStyle of scene (e.g. cinematic realism, handheld docu-style, aerial tracking shot, macro close-up)\n\nOk with fictional settings\n\nOUTPUT FORMAT (single-line JSON array):\n\n\n[\n  {\n    \"Caption\": \"Short viral title with emoji #4_topic_hashtags #4_all_time_popular_hashtags #4_trending_hashtags\",\n    \"Idea\": \"Short idea under 13 words\",\n    \"Environment\": \"Brief vivid setting under 20 words matching the action\",\n    \"Status\": \"for production\"\n  }\n]\n"
              },
              "promptType": "define",
              "hasOutputParser": true
            },
            "typeVersion": 1.9
          },
          {
            "id": "1685126b-bd11-4798-aae9-c676d6cf743d",
            "name": "Tool: Inject Creativity",
            "type": "@n8n/n8n-nodes-langchain.toolThink",
            "position": [
              740,
              820
            ],
            "parameters": {},
            "typeVersion": 1
          },
          {
            "id": "30b4a035-33df-4826-972d-0ed2dd8fbed9",
            "name": "LLM: Generate Idea & Caption (GPT-4.1)",
            "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
            "position": [
              580,
              820
            ],
            "parameters": {
              "model": {
                "__rl": true,
                "mode": "list",
                "value": "gpt-4.1",
                "cachedResultName": "gpt-4.1"
              },
              "options": {}
            },
            "credentials": {
              "openAiApi": {
                "id": "6h3DfVhNPw9I25nO",
                "name": "OpenAi account"
              }
            },
            "typeVersion": 1.2
          },
          {
            "id": "c1e92152-aa05-43dd-8522-23f1514cf0ad",
            "name": "Parser: Extract JSON from Idea",
            "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
            "position": [
              900,
              820
            ],
            "parameters": {
              "jsonSchemaExample": "[\n  {\n    \"Caption\": \"Diver Removes Nets Off Whale üêã #whalerescue #marinelife #oceanrescue #seahelpers #love #nature #instagood #explore #viral #savenature #oceanguardians #cleanoceans\",\n    \"Idea\": \"Diver carefully cuts tangled net from distressed whale in open sea\",\n    \"Environment\": \"Open ocean, sunlight beams through water, diver and whale, cinematic realism\",\n    \"Status\": \"for production\"\n  }\n]\n"
            },
            "typeVersion": 1.2
          },
          {
            "id": "432c7648-f9f9-4807-abf5-64d8f9a6bafb",
            "name": "Google Sheets: Save Script Idea",
            "type": "n8n-nodes-base.googleSheets",
            "position": [
              1020,
              560
            ],
            "parameters": {
              "columns": {
                "value": {
                  "id": "==ROW()-1",
                  "idea": "={{ $json.output[0].Idea }}",
                  "caption": "={{ $json.output[0].Caption }}",
                  "production": "={{ $json.output[0].Status }}",
                  "environment_prompt": "={{ $json.output[0].Environment }}"
                },
                "schema": [
                  {
                    "id": "id",
                    "type": "string",
                    "display": true,
                    "removed": false,
                    "required": false,
                    "displayName": "id",
                    "defaultMatch": true,
                    "canBeUsedToMatch": true
                  },
                  {
                    "id": "idea",
                    "type": "string",
                    "display": true,
                    "required": false,
                    "displayName": "idea",
                    "defaultMatch": false,
                    "canBeUsedToMatch": true
                  },
                  {
                    "id": "caption",
                    "type": "string",
                    "display": true,
                    "required": false,
                    "displayName": "caption",
                    "defaultMatch": false,
                    "canBeUsedToMatch": true
                  },
                  {
                    "id": "production",
                    "type": "string",
                    "display": true,
                    "required": false,
                    "displayName": "production",
                    "defaultMatch": false,
                    "canBeUsedToMatch": true
                  },
                  {
                    "id": "environment_prompt",
                    "type": "string",
                    "display": true,
                    "required": false,
                    "displayName": "environment_prompt",
                    "defaultMatch": false,
                    "canBeUsedToMatch": true
                  },
                  {
                    "id": "final_output",
                    "type": "string",
                    "display": true,
                    "required": false,
                    "displayName": "final_output",
                    "defaultMatch": false,
                    "canBeUsedToMatch": true
                  }
                ],
                "mappingMode": "defineBelow",
                "matchingColumns": [
                  "id"
                ],
                "attemptToConvertTypes": false,
                "convertFieldsToString": false
              },
              "options": {},
              "operation": "append",
              "sheetName": {
                "__rl": true,
                "mode": "id",
                "value": "="
              },
              "documentId": {
                "__rl": true,
                "mode": "id",
                "value": "="
              }
            },
            "credentials": {
              "googleSheetsOAuth2Api": {
                "id": "51us92xkOlrvArhV",
                "name": "Google Sheets account"
              }
            },
            "typeVersion": 4.5
          },
          {
            "id": "02c2e969-0bb6-44fa-8707-37edc2cc77fd",
            "name": "AI Agent: Create Veo3-Compatible Prompt",
            "type": "@n8n/n8n-nodes-langchain.agent",
            "position": [
              1180,
              560
            ],
            "parameters": {
              "text": "=Give me a Veo3 prompt for this idea:\n{{ $json.idea }}\n\nThis is the environment:\n{{ $json.environment_prompt }}\n\n",
              "options": {
                "systemMessage": "=SYSTEM PROMPT FOR GOOGLE VEO3 PROMPT AGENT\n\nYou are an AI agent that writes hyper-realistic, cinematic video prompts for Google VEO3. Each prompt should describe a short, vivid selfie-style video clip featuring one unnamed character speaking or acting in a specific moment. The final video should look like found footage or documentary-style film ‚Äî grounded, realistic, and immersive.\n\nREQUIRED STRUCTURE (FILL IN THE BRACKETS BELOW):\n\n[Scene paragraph prompt here]\n\nMain character: [description of character]\nThey say: [insert one line of dialogue, fits the scene and mood].\nThey [describe a physical action or subtle camera movement, e.g. pans the camera, shifts position, glances around].\nTime of Day: [day / night / dusk / etc.]\nLens: [describe lens]\nAudio: (implied) [ambient sounds, e.g. lion growls, wind, distant traffic, birdsong]\nBackground: [brief restatement of what is visible behind them]\n\nRULES FOR PROMPT GENERATION\n\nSingle paragraph only, 750‚Äì1500 characters. No line breaks or headings.\n\nOnly one human character. Never give them a name.\n\nInclude one spoken line of dialogue and describe how it‚Äôs delivered.\n\nCharacter must do something physical, even if subtle (e.g. glance, smirk, pan camera).\n\nUse selfie-style framing. Always describe the lens, stock, and camera behavior.\n\nScene must feel real and cinematic ‚Äî like a short clip someone might record on a stylized camera.\n\nAlways include the five key technical elements: Time of Day, Lens, Film Stock, Audio, and Background.\n\nDO NOT DO THIS:\n\nDon‚Äôt name the character.\n\nDon‚Äôt include more than one character.\n\nDon‚Äôt describe subtitles or on-screen text.\n\nDon‚Äôt break the paragraph or use formatting.\n\nDon‚Äôt write vague or abstract scenes ‚Äî always keep them grounded in physical detail."
              },
              "promptType": "define",
              "hasOutputParser": true
            },
            "typeVersion": 1.9
          },
          {
            "id": "010485e3-7b3f-496b-bcd5-05087a41805c",
            "name": "Tool: Build Prompt Structure",
            "type": "@n8n/n8n-nodes-langchain.toolThink",
            "position": [
              1380,
              820
            ],
            "parameters": {},
            "typeVersion": 1
          },
          {
            "id": "acec06a9-c36d-4bff-a152-4a5b8b73808d",
            "name": "LLM: Format Prompt for Veo3 (GPT-4.1)",
            "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
            "position": [
              1200,
              820
            ],
            "parameters": {
              "model": {
                "__rl": true,
                "mode": "list",
                "value": "gpt-4.1",
                "cachedResultName": "gpt-4.1"
              },
              "options": {}
            },
            "credentials": {
              "openAiApi": {
                "id": "6h3DfVhNPw9I25nO",
                "name": "OpenAi account"
              }
            },
            "typeVersion": 1.2
          },
          {
            "id": "4f8e53f5-d0a1-46c1-a855-a7067b493d66",
            "name": "Call Veo3 API to Generate Video",
            "type": "n8n-nodes-base.httpRequest",
            "position": [
              520,
              1100
            ],
            "parameters": {
              "url": "https://queue.fal.run/fal-ai/veo3",
              "body": "={ \"prompt\": \"{{ $json.output }}\" }\n",
              "method": "POST",
              "options": {
                "batching": {
                  "batch": {
                    "batchSize": 1,
                    "batchInterval": 2000
                  }
                }
              },
              "sendBody": true,
              "contentType": "raw",
              "authentication": "genericCredentialType",
              "rawContentType": "application/json",
              "genericAuthType": "httpHeaderAuth"
            },
            "credentials": {
              "httpHeaderAuth": {
                "id": "QhpKhFJMiQAReugp",
                "name": "Header Auth account 4"
              }
            },
            "typeVersion": 4.2
          },
          {
            "id": "27881cbe-df1c-463d-8baa-5c482f0b1c04",
            "name": "Wait for Veo3 Processing (5 mins)",
            "type": "n8n-nodes-base.wait",
            "position": [
              740,
              1100
            ],
            "webhookId": "861e2761-369b-407b-9e88-1b176e617cd8",
            "parameters": {},
            "typeVersion": 1.1
          },
          {
            "id": "671eaf67-367a-41a0-b127-b06adbd5a3c9",
            "name": "Retrieve Final Video URL from Veo3",
            "type": "n8n-nodes-base.httpRequest",
            "position": [
              1020,
              1100
            ],
            "parameters": {
              "url": "=https://queue.fal.run/fal-ai/veo3/requests/{{ $json.request_id }}",
              "options": {},
              "authentication": "genericCredentialType",
              "genericAuthType": "httpHeaderAuth"
            },
            "credentials": {
              "httpHeaderAuth": {
                "id": "QhpKhFJMiQAReugp",
                "name": "Header Auth account 4"
              }
            },
            "typeVersion": 4.2
          },
          {
            "id": "3555e042-a420-49fe-889e-62455616ed7c",
            "name": "Google Sheets: Log Final Video Output",
            "type": "n8n-nodes-base.googleSheets",
            "position": [
              1340,
              1100
            ],
            "parameters": {
              "columns": {
                "value": {
                  "idea": "={{ $('Google Sheets: Save Script Idea').first().json.idea }}",
                  "production": "done",
                  "final_output": "={{ $json.video.url }}"
                },
                "schema": [
                  {
                    "id": "id",
                    "type": "string",
                    "display": true,
                    "removed": false,
                    "required": false,
                    "displayName": "id",
                    "defaultMatch": true,
                    "canBeUsedToMatch": true
                  },
                  {
                    "id": "idea",
                    "type": "string",
                    "display": true,
                    "removed": false,
                    "required": false,
                    "displayName": "idea",
                    "defaultMatch": false,
                    "canBeUsedToMatch": true
                  },
                  {
                    "id": "caption",
                    "type": "string",
                    "display": true,
                    "required": false,
                    "displayName": "caption",
                    "defaultMatch": false,
                    "canBeUsedToMatch": true
                  },
                  {
                    "id": "production",
                    "type": "string",
                    "display": true,
                    "required": false,
                    "displayName": "production",
                    "defaultMatch": false,
                    "canBeUsedToMatch": true
                  },
                  {
                    "id": "environment_prompt",
                    "type": "string",
                    "display": true,
                    "required": false,
                    "displayName": "environment_prompt",
                    "defaultMatch": false,
                    "canBeUsedToMatch": true
                  },
                  {
                    "id": "final_output",
                    "type": "string",
                    "display": true,
                    "required": false,
                    "displayName": "final_output",
                    "defaultMatch": false,
                    "canBeUsedToMatch": true
                  },
                  {
                    "id": "row_number",
                    "type": "string",
                    "display": true,
                    "removed": true,
                    "readOnly": true,
                    "required": false,
                    "displayName": "row_number",
                    "defaultMatch": false,
                    "canBeUsedToMatch": true
                  }
                ],
                "mappingMode": "defineBelow",
                "matchingColumns": [
                  "idea"
                ],
                "attemptToConvertTypes": false,
                "convertFieldsToString": false
              },
              "options": {},
              "operation": "update",
              "sheetName": {
                "__rl": true,
                "mode": "id",
                "value": "="
              },
              "documentId": {
                "__rl": true,
                "mode": "id",
                "value": "="
              }
            },
            "credentials": {
              "googleSheetsOAuth2Api": {
                "id": "51us92xkOlrvArhV",
                "name": "Google Sheets account"
              }
            },
            "typeVersion": 4.5
          }
        ],
        "active": false,
        "pinData": {},
        "settings": {
          "executionOrder": "v1"
        },
        "versionId": "4ae2a231-a655-4a35-bc69-d4bb1af20b67",
        "connections": {
          "Get my video": {
            "main": [
              [
                {
                  "node": "Assign Social Media IDs",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          },
          "Assign Social Media IDs": {
            "main": [
              [
                {
                  "node": "Upload Video to Blotato",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          },
          "Tool: Inject Creativity": {
            "ai_tool": [
              [
                {
                  "node": "AI Agent: Generate Video Concept",
                  "type": "ai_tool",
                  "index": 0
                }
              ]
            ]
          },
          "Upload Video to Blotato": {
            "main": [
              [
                {
                  "node": "INSTAGRAM",
                  "type": "main",
                  "index": 0
                },
                {
                  "node": "YOUTUBE",
                  "type": "main",
                  "index": 0
                },
                {
                  "node": "TIKTOK",
                  "type": "main",
                  "index": 0
                },
                {
                  "node": "FACEBOOK",
                  "type": "main",
                  "index": 0
                },
                {
                  "node": "THREADS",
                  "type": "main",
                  "index": 0
                },
                {
                  "node": "TWETTER",
                  "type": "main",
                  "index": 0
                },
                {
                  "node": "LINKEDIN",
                  "type": "main",
                  "index": 0
                },
                {
                  "node": "BLUESKY",
                  "type": "main",
                  "index": 0
                },
                {
                  "node": "PINTEREST",
                  "type": "main",
                  "index": 0
                },
                {
                  "node": "Google Sheets",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          },
          "Tool: Build Prompt Structure": {
            "ai_tool": [
              [
                {
                  "node": "AI Agent: Create Veo3-Compatible Prompt",
                  "type": "ai_tool",
                  "index": 0
                }
              ]
            ]
          },
          "Parser: Extract JSON from Idea": {
            "ai_outputParser": [
              [
                {
                  "node": "AI Agent: Generate Video Concept",
                  "type": "ai_outputParser",
                  "index": 0
                }
              ]
            ]
          },
          "Call Veo3 API to Generate Video": {
            "main": [
              [
                {
                  "node": "Wait for Veo3 Processing (5 mins)",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          },
          "Google Sheets: Save Script Idea": {
            "main": [
              [
                {
                  "node": "AI Agent: Create Veo3-Compatible Prompt",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          },
          "AI Agent: Generate Video Concept": {
            "main": [
              [
                {
                  "node": "Google Sheets: Save Script Idea",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          },
          "Wait for Veo3 Processing (5 mins)": {
            "main": [
              [
                {
                  "node": "Retrieve Final Video URL from Veo3",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          },
          "Retrieve Final Video URL from Veo3": {
            "main": [
              [
                {
                  "node": "Google Sheets: Log Final Video Output",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          },
          "Trigger: Run Daily Script Generator": {
            "main": [
              [
                {
                  "node": "AI Agent: Generate Video Concept",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          },
          "Google Sheets: Log Final Video Output": {
            "main": [
              [
                {
                  "node": "Get my video",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          },
          "LLM: Format Prompt for Veo3 (GPT-4.1)": {
            "ai_languageModel": [
              [
                {
                  "node": "AI Agent: Create Veo3-Compatible Prompt",
                  "type": "ai_languageModel",
                  "index": 0
                }
              ]
            ]
          },
          "LLM: Generate Idea & Caption (GPT-4.1)": {
            "ai_languageModel": [
              [
                {
                  "node": "AI Agent: Generate Video Concept",
                  "type": "ai_languageModel",
                  "index": 0
                }
              ]
            ]
          },
          "AI Agent: Create Veo3-Compatible Prompt": {
            "main": [
              [
                {
                  "node": "Call Veo3 API to Generate Video",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          }
        }
      }
    },
    {
      "id": 8500,
      "name": "Jarvis: Productivity AI Agent for Tasks, Calendar, Email & Expense using MCPs",
      "description": "## Who‚Äôs it for\nThis template is designed for anyone who wants to use **Telegram as a personal AI assistant hub**.  \nIf you often juggle tasks, emails, calendars, and expenses across multiple tools, this workflow consolidates everything into one seamless AI-powered agent.\n\n## What it does\nJarvis listens to your Telegram messages (text or audio) and processes them with OpenAI.  \nBased on your request, it can:\n- ‚úÖ Manage tasks (create, complete, or delete)  \n- üìÖ Handle calendar events (schedule, reschedule, or check availability)  \n- üìß Send, draft, or fetch emails with Gmail  \n- üë• Retrieve Google Contacts  \n- üíµ Log and track expenses  \n\nAll responses are returned directly to Telegram, giving you a unified command center.\n\n## How to set up\n1. Clone this template into your n8n workspace.  \n2. Connect your accounts (Telegram, Gmail, Google Calendar, Contacts, etc.).  \n3. Add your OpenAI API key in the **Credentials** section.  \n4. Test by sending a Telegram message like ‚ÄúCreate a meeting tomorrow at 3pm‚Äù or ‚ÄúAdd expense $50 for lunch.‚Äù  or \"Draft a reply with a project proposal to that email from Steve\"\n\n## Requirements\n- n8n instance (cloud or self-hosted)  \n- Telegram Bot API credentials  \n- Gmail, Google Calendar, and Google Contacts credentials (optional, if using those features)  \n- OpenAI API key  \n- ElevenLabs API Key (optional, if you need audio note support)\n\n## How to customize\n- Swap Gmail with another email provider by replacing the Gmail MCP node.  \n- Add additional MCP integrations (e.g., Notion, Slack, CRM tools).  \n- Adjust memory length to control how much context Jarvis remembers.  \n\nWith this template, you can transform Telegram into your **all-in-one AI assistant**, simplifying workflows and saving hours every week.\n",
      "totalViews": 9132,
      "createdAt": "2025-09-12T06:41:03.347Z",
      "author": "jiteshdugar",
      "nodeTypes": [
        "@n8n/n8n-nodes-langchain.lmChatOpenAi",
        "@n8n/n8n-nodes-langchain.memoryBufferWindow",
        "@n8n/n8n-nodes-langchain.mcpClientTool",
        "@n8n/n8n-nodes-langchain.mcpTrigger",
        "n8n-nodes-base.gmailTool",
        "n8n-nodes-base.googleCalendarTool",
        "n8n-nodes-base.googleTasksTool",
        "n8n-nodes-base.telegramTrigger",
        "n8n-nodes-base.switch",
        "@elevenlabs/n8n-nodes-elevenlabs.elevenLabs",
        "n8n-nodes-base.googleSheetsTool",
        "n8n-nodes-base.telegram",
        "n8n-nodes-base.googleContactsTool",
        "@n8n/n8n-nodes-langchain.agent",
        "n8n-nodes-base.filter",
        "n8n-nodes-base.set",
        "@n8n/n8n-nodes-langchain.toolThink"
      ],
      "nodeCount": 52,
      "connectionCount": 39,
      "categories": [
        "Personal Productivity",
        "AI Chatbot"
      ],
      "workflowJson": {
        "id": "zcYVtmH3JmlnFoOB",
        "meta": {
          "instanceId": "e56288a9b12ad2dc7c19cc4170f20f7abcacaad5fb3972dd882c9ce4f34e7668",
          "templateCredsSetupCompleted": true
        },
        "name": "Jarvis template",
        "tags": [],
        "nodes": [
          {
            "id": "a8eaf694-1adf-4c46-8066-415162b2b769",
            "name": "OpenAI Chat Model",
            "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
            "position": [
              208,
              480
            ],
            "parameters": {
              "model": {
                "__rl": true,
                "mode": "list",
                "value": "gpt-4.1-mini",
                "cachedResultName": "gpt-4.1-mini"
              },
              "options": {}
            },
            "credentials": {
              "openAiApi": {
                "id": "5n856jvI80lSEErZ",
                "name": "Klinsman OpenAI"
              }
            },
            "typeVersion": 1.2
          },
          {
            "id": "d7fe0bed-44ec-4c0a-b66f-12e36bf9483d",
            "name": "Simple Memory",
            "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
            "position": [
              288,
              592
            ],
            "parameters": {
              "sessionKey": "={{ $('Telegram Trigger').item.json.message.chat.username }}",
              "sessionIdType": "customKey"
            },
            "typeVersion": 1.3
          },
          {
            "id": "2a47f5d3-747c-4b0d-b2d4-1880d012979c",
            "name": "Gmail MCP",
            "type": "@n8n/n8n-nodes-langchain.mcpClientTool",
            "position": [
              416,
              640
            ],
            "parameters": {
              "endpointUrl": "https://n8n.exildraw.com/mcp/gmail-mcp/sse"
            },
            "typeVersion": 1.1
          },
          {
            "id": "a37dbd39-222f-45ad-be42-d8a0098cc76c",
            "name": "Google Tasks MCP",
            "type": "@n8n/n8n-nodes-langchain.mcpClientTool",
            "position": [
              704,
              576
            ],
            "parameters": {
              "endpointUrl": "https://n8n.exildraw.com/mcp/task-manager"
            },
            "typeVersion": 1.1
          },
          {
            "id": "d98f70a1-c8da-4387-a575-c9809674947a",
            "name": "Gmail MCP Server",
            "type": "@n8n/n8n-nodes-langchain.mcpTrigger",
            "position": [
              400,
              1008
            ],
            "webhookId": "906a5e01-3f46-444e-a3b7-51d2105eac16",
            "parameters": {
              "path": "906a5e01-3f46-444e-a3b7-51d2105eac16"
            },
            "typeVersion": 1
          },
          {
            "id": "33df9b0d-7bc9-48ed-8664-eece9c875739",
            "name": "Send Email",
            "type": "n8n-nodes-base.gmailTool",
            "position": [
              272,
              1168
            ],
            "webhookId": "b5692bdd-471a-4141-8710-b0909a433939",
            "parameters": {
              "sendTo": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('To', ``, 'string') }}",
              "message": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Message', ``, 'string') }}",
              "options": {
                "appendAttribution": false
              },
              "subject": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Subject', ``, 'string') }}"
            },
            "credentials": {
              "gmailOAuth2": {
                "id": "G3I034gH4LNlUt6T",
                "name": "jitesh0dugar@gmail.com"
              }
            },
            "typeVersion": 2.1
          },
          {
            "id": "55889898-08c6-4357-a448-fd9e7b0a3d29",
            "name": "Reply to an Email",
            "type": "n8n-nodes-base.gmailTool",
            "position": [
              368,
              1232
            ],
            "webhookId": "3fda5336-8c0d-426c-abf4-e614cadbcc12",
            "parameters": {
              "message": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Message', ``, 'string') }}",
              "options": {
                "ccList": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('CC', ``, 'string') }}",
                "bccList": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('BCC', ``, 'string') }}",
                "attachmentsUi": {
                  "attachmentsBinary": [
                    {
                      "property": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Attachment_Field_Name', ``, 'string') }}"
                    }
                  ]
                },
                "appendAttribution": false
              },
              "emailType": "text",
              "messageId": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Message_ID', ``, 'string') }}",
              "operation": "reply",
              "descriptionType": "manual",
              "toolDescription": "Reply to an email message. AI-configurable parameters: Message_ID (string) - the ID of the message; Message (string) - the reply content; Attachment_Field_Name (string) - input field name containing attachments; BCC (string) - comma-separated BCC recipients; CC (string) - comma-separated CC recipients."
            },
            "credentials": {
              "gmailOAuth2": {
                "id": "G3I034gH4LNlUt6T",
                "name": "jitesh0dugar@gmail.com"
              }
            },
            "typeVersion": 2.1
          },
          {
            "id": "6bbe7356-33c4-452b-b6d8-726f7af3a2d2",
            "name": "Get Emails",
            "type": "n8n-nodes-base.gmailTool",
            "position": [
              480,
              1296
            ],
            "webhookId": "35b2c37f-1e18-4fec-a442-3f672e8d839c",
            "parameters": {
              "filters": {
                "q": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Search', ``, 'string') }}",
                "receivedAfter": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Received_After', ``, 'string') }}",
                "receivedBefore": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Received_Before', ``, 'string') }}"
              },
              "operation": "getAll",
              "returnAll": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Return_All', ``, 'boolean') }}",
              "descriptionType": "manual",
              "toolDescription": "Retrieve multiple email messages based on filters. AI-configurable parameters: Return_All (boolean) - whether to return all matching messages; Search (string) - Gmail query string to filter messages; Received_After (string) - datetime (RFC3339) after which messages are received; Received_Before (string) - datetime before which messages are received; Sender (string) - email address of the sender."
            },
            "credentials": {
              "gmailOAuth2": {
                "id": "G3I034gH4LNlUt6T",
                "name": "jitesh0dugar@gmail.com"
              }
            },
            "typeVersion": 2.1
          },
          {
            "id": "97f26bc6-f2cd-40fd-9617-c26af6368ad4",
            "name": "Add Label to Email",
            "type": "n8n-nodes-base.gmailTool",
            "position": [
              576,
              1360
            ],
            "webhookId": "e985e162-2fb5-480a-9c72-5bd5b62876df",
            "parameters": {
              "labelIds": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Label_Names_or_IDs', ``, 'string') }}",
              "messageId": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Message_ID', ``, 'string') }}",
              "operation": "addLabels",
              "descriptionType": "manual",
              "toolDescription": "Add one or more labels to an email message. AI-configurable parameters: Message_ID (string) - the ID of the message to label; Label_Names_or_IDs (string) - comma-separated label names or IDs to apply."
            },
            "credentials": {
              "gmailOAuth2": {
                "id": "G3I034gH4LNlUt6T",
                "name": "jitesh0dugar@gmail.com"
              }
            },
            "typeVersion": 2.1
          },
          {
            "id": "26dad8fd-c349-433e-a471-71dbfd97c56b",
            "name": "Get Labels",
            "type": "n8n-nodes-base.gmailTool",
            "position": [
              672,
              1312
            ],
            "webhookId": "4bffaaac-3a2e-4cdb-8809-69a2ea942d7b",
            "parameters": {
              "resource": "label",
              "returnAll": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Return_All', ``, 'boolean') }}",
              "descriptionType": "manual",
              "toolDescription": "Retrieve a list of labels. AI-configurable parameters: Return_All (boolean) - whether to return all labels."
            },
            "credentials": {
              "gmailOAuth2": {
                "id": "G3I034gH4LNlUt6T",
                "name": "jitesh0dugar@gmail.com"
              }
            },
            "typeVersion": 2.1
          },
          {
            "id": "a47d9f12-5973-4a93-81f8-7a7f03a4214b",
            "name": "Draft Email",
            "type": "n8n-nodes-base.gmailTool",
            "position": [
              752,
              1216
            ],
            "webhookId": "89cfafeb-e670-46e1-a5c2-f0a0e3ad0332",
            "parameters": {
              "message": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Message', ``, 'string') }}",
              "options": {
                "ccList": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('CC', ``, 'string') }}",
                "sendTo": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('To_Email', ``, 'string') }}",
                "bccList": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('BCC', ``, 'string') }}"
              },
              "subject": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Subject', ``, 'string') }}",
              "resource": "draft",
              "emailType": "html",
              "descriptionType": "manual",
              "toolDescription": "Create an email draft. AI-configurable parameters: Subject (string) - the subject of the draft; Message (string) - the body of the draft; Attachment_Field_Name__in_Input_ (string) - input field name containing attachments; BCC (string) - comma-separated BCC recipients; CC (string) - comma-separated CC recipients."
            },
            "credentials": {
              "gmailOAuth2": {
                "id": "G3I034gH4LNlUt6T",
                "name": "jitesh0dugar@gmail.com"
              }
            },
            "typeVersion": 2.1
          },
          {
            "id": "957ea20b-4d3f-4ad4-bbcd-42fdf1a5af82",
            "name": "Draft Email Reply",
            "type": "n8n-nodes-base.gmailTool",
            "position": [
              848,
              1136
            ],
            "webhookId": "95797251-5c38-45f1-8203-377716c743bd",
            "parameters": {
              "message": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Message', ``, 'string') }}",
              "options": {
                "ccList": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('CC', ``, 'string') }}",
                "bccList": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('BCC', ``, 'string') }}",
                "threadId": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Thread_ID', ``, 'string') }}"
              },
              "subject": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Subject', ``, 'string') }}",
              "resource": "draft",
              "emailType": "html",
              "descriptionType": "manual",
              "toolDescription": "Draft a reply to an email. Use the thread_id parameter to pass the thread for which the email must be drafted"
            },
            "credentials": {
              "gmailOAuth2": {
                "id": "G3I034gH4LNlUt6T",
                "name": "jitesh0dugar@gmail.com"
              }
            },
            "typeVersion": 2.1
          },
          {
            "id": "47e41e13-e6e7-4959-bb08-1f1f4da01b34",
            "name": "Check Availability",
            "type": "n8n-nodes-base.googleCalendarTool",
            "position": [
              -464,
              1056
            ],
            "parameters": {
              "options": {
                "timezone": {
                  "__rl": true,
                  "mode": "list",
                  "value": "Asia/Kolkata",
                  "cachedResultName": "Asia/Kolkata"
                }
              },
              "timeMax": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('End_Time', ``, 'string') }}",
              "timeMin": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Start_Time', ``, 'string') }}",
              "calendar": {
                "__rl": true,
                "mode": "list",
                "value": "jitesh.com@gmail.com",
                "cachedResultName": "jitesh.com@gmail.com"
              },
              "resource": "calendar",
              "descriptionType": "manual",
              "toolDescription": "Check if a slot is available on my calendar"
            },
            "credentials": {
              "googleCalendarOAuth2Api": {
                "id": "4tovWKQg16ZAJg26",
                "name": "jitesh.com@gmail.com"
              }
            },
            "typeVersion": 1.3
          },
          {
            "id": "bd20eb61-ade0-4b4b-ba89-943dfa11ac05",
            "name": "Get all Events",
            "type": "n8n-nodes-base.googleCalendarTool",
            "position": [
              -368,
              1136
            ],
            "parameters": {
              "options": {
                "orderBy": "startTime",
                "timeZone": {
                  "__rl": true,
                  "mode": "list",
                  "value": "Asia/Kolkata",
                  "cachedResultName": "Asia/Kolkata"
                },
                "recurringEventHandling": "expand"
              },
              "timeMax": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Before', ``, 'string') }}",
              "timeMin": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('After', `Should be a future date and time`, 'string') }}",
              "calendar": {
                "__rl": true,
                "mode": "list",
                "value": "jitesh.com@gmail.com",
                "cachedResultName": "jitesh.com@gmail.com"
              },
              "operation": "getAll",
              "returnAll": true,
              "descriptionType": "manual",
              "toolDescription": "Get future events on Google Calendar"
            },
            "credentials": {
              "googleCalendarOAuth2Api": {
                "id": "4tovWKQg16ZAJg26",
                "name": "jitesh.com@gmail.com"
              }
            },
            "typeVersion": 1.3
          },
          {
            "id": "ace1f669-dd08-48df-81bc-30c852e1424d",
            "name": "Delete Calendar Event",
            "type": "n8n-nodes-base.googleCalendarTool",
            "position": [
              -288,
              1248
            ],
            "parameters": {
              "eventId": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Event_ID', `Pass the event id of the event to delete`, 'string') }}",
              "options": {},
              "calendar": {
                "__rl": true,
                "mode": "list",
                "value": "jitesh.com@gmail.com",
                "cachedResultName": "jitesh.com@gmail.com"
              },
              "operation": "delete",
              "descriptionType": "manual",
              "toolDescription": "Delete Calendar Event"
            },
            "credentials": {
              "googleCalendarOAuth2Api": {
                "id": "4tovWKQg16ZAJg26",
                "name": "jitesh.com@gmail.com"
              }
            },
            "typeVersion": 1.3
          },
          {
            "id": "e24ed479-8a75-4c21-9f25-51d603b35574",
            "name": "Reschedule Event",
            "type": "n8n-nodes-base.googleCalendarTool",
            "position": [
              -160,
              1264
            ],
            "parameters": {
              "eventId": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Event_ID', `Pass the id of the event to reschedule or update`, 'string') }}",
              "calendar": {
                "__rl": true,
                "mode": "list",
                "value": "jitesh.com@gmail.com",
                "cachedResultName": "jitesh.com@gmail.com"
              },
              "operation": "update",
              "updateFields": {
                "end": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('End', ``, 'string') }}",
                "start": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Start', ``, 'string') }}",
                "attendeesUi": {
                  "values": {
                    "mode": "replace",
                    "attendees": [
                      "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('attendees0_Attendees', ``, 'string') }}"
                    ]
                  }
                },
                "sendUpdates": "all"
              },
              "descriptionType": "manual",
              "toolDescription": "Update an event on Google Calendar",
              "useDefaultReminders": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Use_Default_Reminders', ``, 'boolean') }}"
            },
            "credentials": {
              "googleCalendarOAuth2Api": {
                "id": "4tovWKQg16ZAJg26",
                "name": "jitesh.com@gmail.com"
              }
            },
            "typeVersion": 1.3
          },
          {
            "id": "8e9a40fd-9f34-44e0-b256-f15eb0a73ba2",
            "name": "Get Event",
            "type": "n8n-nodes-base.googleCalendarTool",
            "position": [
              -80,
              1152
            ],
            "parameters": {
              "eventId": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Event_ID', `Pass the event id`, 'string') }}",
              "options": {},
              "calendar": {
                "__rl": true,
                "mode": "list",
                "value": "jitesh.com@gmail.com",
                "cachedResultName": "jitesh.com@gmail.com"
              },
              "operation": "get",
              "descriptionType": "manual",
              "toolDescription": "Get an event in Google Calendar"
            },
            "credentials": {
              "googleCalendarOAuth2Api": {
                "id": "4tovWKQg16ZAJg26",
                "name": "jitesh.com@gmail.com"
              }
            },
            "typeVersion": 1.3
          },
          {
            "id": "991c7d7f-3bcf-4006-8a56-8e606ff49307",
            "name": "Create an event",
            "type": "n8n-nodes-base.googleCalendarTool",
            "position": [
              16,
              1040
            ],
            "parameters": {
              "end": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('End', ``, 'string') }}",
              "start": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Start', ``, 'string') }}",
              "calendar": {
                "__rl": true,
                "mode": "list",
                "value": "jitesh.com@gmail.com",
                "cachedResultName": "jitesh.com@gmail.com"
              },
              "descriptionType": "manual",
              "toolDescription": "Create an event on Google Calendar",
              "additionalFields": {
                "summary": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Summary', ``, 'string') }}",
                "visibility": "default",
                "description": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Description', ``, 'string') }}"
              },
              "useDefaultReminders": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Use_Default_Reminders', ``, 'boolean') }}"
            },
            "credentials": {
              "googleCalendarOAuth2Api": {
                "id": "4tovWKQg16ZAJg26",
                "name": "jitesh.com@gmail.com"
              }
            },
            "typeVersion": 1.3
          },
          {
            "id": "f4245e85-acc0-4529-9524-3484a237da24",
            "name": "Calendar MCP Server",
            "type": "@n8n/n8n-nodes-langchain.mcpTrigger",
            "position": [
              -352,
              880
            ],
            "webhookId": "64e72cc1-3df0-4090-9522-d534c3f245aa",
            "parameters": {
              "path": "64e72cc1-3df0-4090-9522-d534c3f245aa"
            },
            "typeVersion": 1
          },
          {
            "id": "7ca06309-610f-4372-84b4-ce6c45161ebb",
            "name": "Calendar MCP",
            "type": "@n8n/n8n-nodes-langchain.mcpClientTool",
            "position": [
              752,
              464
            ],
            "parameters": {
              "endpointUrl": "https://n8n.exildraw.com/mcp/google-calendar/sse"
            },
            "typeVersion": 1.1
          },
          {
            "id": "c6df9650-e936-4ddb-8c5c-e11a286fb4a0",
            "name": "Complete a Task",
            "type": "n8n-nodes-base.googleTasksTool",
            "position": [
              -672,
              880
            ],
            "parameters": {
              "task": "MDM1NDg1NzcxMjIyNzg5NzQ1ODI6MDow",
              "taskId": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Task_ID', `Pass the task_id of the task to be completed`, 'string') }}",
              "operation": "update",
              "updateFields": {
                "status": "completed",
                "completed": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Completion_Date', `Pass the date when the task is completed`, 'string') }}"
              }
            },
            "credentials": {
              "googleTasksOAuth2Api": {
                "id": "w66NRU7eE1oAWYpS",
                "name": "Google Tasks account"
              }
            },
            "typeVersion": 1
          },
          {
            "id": "d4e2bb15-dee8-4f0c-af43-bb31f49891f0",
            "name": "Task Manager MCP",
            "type": "@n8n/n8n-nodes-langchain.mcpTrigger",
            "position": [
              -1024,
              736
            ],
            "webhookId": "7bf1c961-4feb-4c31-919e-ff300c40406d",
            "parameters": {
              "path": "7bf1c961-4feb-4c31-919e-ff300c40406d"
            },
            "typeVersion": 2
          },
          {
            "id": "af55b978-143b-424a-9039-887506a91b30",
            "name": "Telegram Trigger",
            "type": "n8n-nodes-base.telegramTrigger",
            "position": [
              -960,
              416
            ],
            "webhookId": "6d90bff2-32dd-44fc-b11b-4217a615dfed",
            "parameters": {
              "updates": [
                "message"
              ],
              "additionalFields": {}
            },
            "credentials": {
              "telegramApi": {
                "id": "8DLWaXKWWtQftdTp",
                "name": "Calendar Booking Bot"
              }
            },
            "typeVersion": 1.2
          },
          {
            "id": "aa3d2cf3-650c-4666-a64e-769b9f8cb0a7",
            "name": "Switch",
            "type": "n8n-nodes-base.switch",
            "position": [
              -528,
              416
            ],
            "parameters": {
              "rules": {
                "values": [
                  {
                    "outputKey": "Text",
                    "conditions": {
                      "options": {
                        "version": 2,
                        "leftValue": "",
                        "caseSensitive": true,
                        "typeValidation": "strict"
                      },
                      "combinator": "and",
                      "conditions": [
                        {
                          "id": "3421ce54-2c7c-4c87-ab7f-a4598eaa7f6b",
                          "operator": {
                            "type": "string",
                            "operation": "exists",
                            "singleValue": true
                          },
                          "leftValue": "={{ $json.message.text }}",
                          "rightValue": ""
                        }
                      ]
                    },
                    "renameOutput": true
                  },
                  {
                    "outputKey": "Audio",
                    "conditions": {
                      "options": {
                        "version": 2,
                        "leftValue": "",
                        "caseSensitive": true,
                        "typeValidation": "strict"
                      },
                      "combinator": "and",
                      "conditions": [
                        {
                          "id": "85c06561-3e1d-4871-af64-f08e5f657b24",
                          "operator": {
                            "type": "string",
                            "operation": "notExists",
                            "singleValue": true
                          },
                          "leftValue": "={{ $json.message.text }}",
                          "rightValue": ""
                        }
                      ]
                    },
                    "renameOutput": true
                  }
                ]
              },
              "options": {}
            },
            "typeVersion": 3.2
          },
          {
            "id": "92c02fd5-d0fc-4275-8df2-a0df28e3e334",
            "name": "Transcribe audio or video",
            "type": "@elevenlabs/n8n-nodes-elevenlabs.elevenLabs",
            "position": [
              -80,
              512
            ],
            "parameters": {
              "resource": "speech",
              "operation": "speechToText",
              "requestOptions": {},
              "additionalOptions": {}
            },
            "credentials": {
              "elevenLabsApi": {
                "id": "judah6VcfikE7I8a",
                "name": "ElevenLabs account"
              }
            },
            "typeVersion": 1
          },
          {
            "id": "3b91e7aa-2023-4d19-9fee-5505525a351b",
            "name": "Finance Tracker",
            "type": "@n8n/n8n-nodes-langchain.mcpClientTool",
            "position": [
              512,
              704
            ],
            "parameters": {
              "endpointUrl": "https://n8n.exildraw.com/mcp/finance-manager/sse"
            },
            "typeVersion": 1.1
          },
          {
            "id": "560ba8cf-1eaa-4d24-bce3-5714a2a3e6c7",
            "name": "Finance Manager MCP Server",
            "type": "@n8n/n8n-nodes-langchain.mcpTrigger",
            "notes": "üöÄ MCP TRIGGER\n\nThis is the entry point for AI interactions with Google Sheets. The MCP (Model Context Protocol) trigger allows AI models to call any of the connected Google Sheets tools based on user requests.\n\nKey Features:\n‚Ä¢ Enables natural language spreadsheet commands\n‚Ä¢ Routes AI requests to appropriate Sheets operations\n‚Ä¢ Provides context-aware data management\n‚Ä¢ Supports complex multi-step data workflows\n‚Ä¢ Handles dynamic sheet and document selection",
            "position": [
              1104,
              688
            ],
            "webhookId": "f226741c-0f79-4f23-96bf-d8eb47206bcf",
            "parameters": {
              "path": "f226741c-0f79-4f23-96bf-d8eb47206bcf"
            },
            "typeVersion": 1.1
          },
          {
            "id": "5cc589b4-55b0-4a41-9a4b-b3dce0d4fd68",
            "name": "Get all Expenses",
            "type": "n8n-nodes-base.googleSheetsTool",
            "notes": "üìä READ SPREADSHEET DATA\n\nRetrieve and analyze data from Google Sheets. Perfect for AI to read, process, and extract insights from spreadsheet content.\n\nUse Cases:\n‚Ä¢ \"Read data from the Sales sheet\"\n‚Ä¢ \"Get all entries from A1:E100\"\n‚Ä¢ \"Show me the data in the Budget spreadsheet\"\n‚Ä¢ \"Extract customer information from the CRM sheet\"\n\nAI Parameters:\n‚Ä¢ Document_ID: Target spreadsheet ID\n‚Ä¢ Sheet_Name: Specific sheet tab name\n‚Ä¢ Range: Cell range to read (optional)",
            "position": [
              1104,
              848
            ],
            "parameters": {
              "options": {},
              "sheetName": {
                "__rl": true,
                "mode": "list",
                "value": "gid=0",
                "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1QCS8_RA5neEDAmgotpzgbBbeEjdYi-LAmCSJVeNWVxs/edit#gid=0",
                "cachedResultName": "Sheet1"
              },
              "documentId": {
                "__rl": true,
                "mode": "list",
                "value": "1QCS8_RA5neEDAmgotpzgbBbeEjdYi-LAmCSJVeNWVxs",
                "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1QCS8_RA5neEDAmgotpzgbBbeEjdYi-LAmCSJVeNWVxs/edit?usp=drivesdk",
                "cachedResultName": "Expense Tracker"
              }
            },
            "credentials": {
              "googleSheetsOAuth2Api": {
                "id": "SJPiL0OOLJ3ecx1o",
                "name": "Google Sheets - jitesh.com"
              }
            },
            "typeVersion": 4.6
          },
          {
            "id": "4370dc5c-9f3d-4954-8ca3-a4c6cd5b3aec",
            "name": "Create Expense",
            "type": "n8n-nodes-base.googleSheetsTool",
            "notes": "üóëÔ∏è CLEAR SPREADSHEET DATA\n\nRemove data from specific ranges or entire sheets. Useful for resetting data, clearing temporary calculations, or preparing sheets for new data.\n\nUse Cases:\n‚Ä¢ \"Clear all data from the temp sheet\"\n‚Ä¢ \"Remove entries from A1:E100\"\n‚Ä¢ \"Clean up the old data in column C\"\n‚Ä¢ \"Reset the calculation area\"\n\nAI Parameters:\n‚Ä¢ Document_ID: Target spreadsheet ID\n‚Ä¢ Sheet_Name: Sheet to clear data from\n‚Ä¢ Range: Specific range to clear\n\n‚ö†Ô∏è Use with caution - data will be permanently removed!",
            "position": [
              1232,
              912
            ],
            "parameters": {
              "columns": {
                "value": {
                  "Date": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Date', ``, 'string') }}",
                  "Amount": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Amount', ``, 'string') }}",
                  "Category": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Category', ``, 'string') }}",
                  "Description": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Description', ``, 'string') }}"
                },
                "schema": [
                  {
                    "id": "Date",
                    "type": "string",
                    "display": true,
                    "required": false,
                    "displayName": "Date",
                    "defaultMatch": false,
                    "canBeUsedToMatch": true
                  },
                  {
                    "id": "Description",
                    "type": "string",
                    "display": true,
                    "required": false,
                    "displayName": "Description",
                    "defaultMatch": false,
                    "canBeUsedToMatch": true
                  },
                  {
                    "id": "Category",
                    "type": "string",
                    "display": true,
                    "required": false,
                    "displayName": "Category",
                    "defaultMatch": false,
                    "canBeUsedToMatch": true
                  },
                  {
                    "id": "Amount",
                    "type": "string",
                    "display": true,
                    "required": false,
                    "displayName": "Amount",
                    "defaultMatch": false,
                    "canBeUsedToMatch": true
                  }
                ],
                "mappingMode": "defineBelow",
                "matchingColumns": [],
                "attemptToConvertTypes": false,
                "convertFieldsToString": false
              },
              "options": {},
              "operation": "append",
              "sheetName": {
                "__rl": true,
                "mode": "list",
                "value": "gid=0",
                "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1QCS8_RA5neEDAmgotpzgbBbeEjdYi-LAmCSJVeNWVxs/edit#gid=0",
                "cachedResultName": "Sheet1"
              },
              "documentId": {
                "__rl": true,
                "mode": "list",
                "value": "1QCS8_RA5neEDAmgotpzgbBbeEjdYi-LAmCSJVeNWVxs",
                "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1QCS8_RA5neEDAmgotpzgbBbeEjdYi-LAmCSJVeNWVxs/edit?usp=drivesdk",
                "cachedResultName": "Expense Tracker"
              }
            },
            "credentials": {
              "googleSheetsOAuth2Api": {
                "id": "SJPiL0OOLJ3ecx1o",
                "name": "Google Sheets - jitesh.com"
              }
            },
            "typeVersion": 4.6
          },
          {
            "id": "57e641c9-341b-4011-9dac-392e90b76946",
            "name": "Delete Expense",
            "type": "n8n-nodes-base.googleSheetsTool",
            "notes": "‚ûï ADD NEW DATA\n\nAppend new rows of data to existing sheets. Perfect for adding records, logging events, or inserting new entries without affecting existing data.\n\nUse Cases:\n‚Ä¢ \"Add a new customer to the CRM sheet\"\n‚Ä¢ \"Log today's sales data\"\n‚Ä¢ \"Insert a new project entry\"\n‚Ä¢ \"Record the meeting notes\"\n\nAI Parameters:\n‚Ä¢ Document_ID: Target spreadsheet ID\n‚Ä¢ Sheet_Name: Sheet to add data to\n‚Ä¢ Data_To_Add: Array/object of new data\n\nFeatures:\n‚Ä¢ Automatically finds next empty row\n‚Ä¢ Preserves existing data\n‚Ä¢ Supports multiple columns",
            "position": [
              1360,
              864
            ],
            "parameters": {
              "clear": "specificRows",
              "operation": "clear",
              "sheetName": {
                "__rl": true,
                "mode": "list",
                "value": "gid=0",
                "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1QCS8_RA5neEDAmgotpzgbBbeEjdYi-LAmCSJVeNWVxs/edit#gid=0",
                "cachedResultName": "Sheet1"
              },
              "documentId": {
                "__rl": true,
                "mode": "list",
                "value": "1QCS8_RA5neEDAmgotpzgbBbeEjdYi-LAmCSJVeNWVxs",
                "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1QCS8_RA5neEDAmgotpzgbBbeEjdYi-LAmCSJVeNWVxs/edit?usp=drivesdk",
                "cachedResultName": "Expense Tracker"
              },
              "startIndex": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Start_Row_Number', ``, 'number') }}",
              "rowsToDelete": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Number_of_Rows_to_Delete', ``, 'number') }}"
            },
            "credentials": {
              "googleSheetsOAuth2Api": {
                "id": "SJPiL0OOLJ3ecx1o",
                "name": "Google Sheets - jitesh.com"
              }
            },
            "typeVersion": 4.6
          },
          {
            "id": "54299e84-a368-426e-833c-103d75627e42",
            "name": "Get many Tasks",
            "type": "n8n-nodes-base.googleTasksTool",
            "position": [
              -736,
              1024
            ],
            "parameters": {
              "task": "MDM1NDg1NzcxMjIyNzg5NzQ1ODI6MDow",
              "operation": "getAll",
              "returnAll": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Return_All', ``, 'boolean') }}",
              "descriptionType": "manual",
              "toolDescription": "Get tasks from Google Tasks",
              "additionalFields": {
                "showCompleted": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Show_Completed', ``, 'boolean') }}"
              }
            },
            "credentials": {
              "googleTasksOAuth2Api": {
                "id": "w66NRU7eE1oAWYpS",
                "name": "Google Tasks account"
              }
            },
            "typeVersion": 1
          },
          {
            "id": "d023f181-74b2-4def-9386-2281725858c9",
            "name": "Delete a Task",
            "type": "n8n-nodes-base.googleTasksTool",
            "position": [
              -848,
              1072
            ],
            "parameters": {
              "task": "MDM1NDg1NzcxMjIyNzg5NzQ1ODI6MDow",
              "taskId": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Task_ID', ``, 'string') }}",
              "operation": "delete"
            },
            "credentials": {
              "googleTasksOAuth2Api": {
                "id": "w66NRU7eE1oAWYpS",
                "name": "Google Tasks account"
              }
            },
            "typeVersion": 1
          },
          {
            "id": "c5e06181-c0ab-445c-98ea-6ac6af5af4af",
            "name": "Get a Task",
            "type": "n8n-nodes-base.googleTasksTool",
            "position": [
              -976,
              1008
            ],
            "parameters": {
              "task": "MDM1NDg1NzcxMjIyNzg5NzQ1ODI6MDow",
              "taskId": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Task_ID', ``, 'string') }}",
              "operation": "get"
            },
            "credentials": {
              "googleTasksOAuth2Api": {
                "id": "w66NRU7eE1oAWYpS",
                "name": "Google Tasks account"
              }
            },
            "typeVersion": 1
          },
          {
            "id": "1d58be0d-9f6e-44dc-8f2a-fea3dc8476fd",
            "name": "Create a Task",
            "type": "n8n-nodes-base.googleTasksTool",
            "position": [
              -1072,
              896
            ],
            "parameters": {
              "task": "MDM1NDg1NzcxMjIyNzg5NzQ1ODI6MDow",
              "title": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Title', ``, 'string') }}",
              "additionalFields": {
                "notes": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Notes', ``, 'string') }}",
                "dueDate": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Due_Date', `Always use future dates`, 'string') }}"
              }
            },
            "credentials": {
              "googleTasksOAuth2Api": {
                "id": "w66NRU7eE1oAWYpS",
                "name": "Google Tasks account"
              }
            },
            "typeVersion": 1
          },
          {
            "id": "e326af47-5c2b-4cc6-8ac1-ea9e78cbcf1c",
            "name": "Get a file",
            "type": "n8n-nodes-base.telegram",
            "position": [
              -304,
              512
            ],
            "webhookId": "5d719ec7-55ad-4932-a4ac-de93be5d90c8",
            "parameters": {
              "fileId": "={{ $json.message.voice.file_id }}",
              "resource": "file",
              "additionalFields": {}
            },
            "credentials": {
              "telegramApi": {
                "id": "8DLWaXKWWtQftdTp",
                "name": "Calendar Booking Bot"
              }
            },
            "typeVersion": 1.2
          },
          {
            "id": "8782f94e-ac80-43d9-9491-ad9c926a3b22",
            "name": "Get Contacts",
            "type": "n8n-nodes-base.googleContactsTool",
            "position": [
              1232,
              1376
            ],
            "parameters": {
              "query": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Query', ``, 'string') }}",
              "fields": [
                "names",
                "emailAddresses"
              ],
              "options": {},
              "rawData": true,
              "useQuery": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Use_Query', ``, 'boolean') }}",
              "operation": "getAll"
            },
            "credentials": {
              "googleContactsOAuth2Api": {
                "id": "tBJw9Ky8IQTMqYYc",
                "name": "Google Contacts jitesh.com@gmail.com"
              }
            },
            "typeVersion": 1
          },
          {
            "id": "aa6a2a74-000d-4eaf-87ff-fe6171f4bc56",
            "name": "Google Contacts MCP",
            "type": "@n8n/n8n-nodes-langchain.mcpTrigger",
            "position": [
              1216,
              1216
            ],
            "webhookId": "01e90a0b-6f53-40d0-a8d3-a05c34a46fbb",
            "parameters": {
              "path": "01e90a0b-6f53-40d0-a8d3-a05c34a46fbb"
            },
            "typeVersion": 2
          },
          {
            "id": "93aae457-a126-4928-ae8d-c66a96950272",
            "name": "Google Contacts",
            "type": "@n8n/n8n-nodes-langchain.mcpClientTool",
            "position": [
              624,
              672
            ],
            "parameters": {
              "endpointUrl": "https://n8n.exildraw.com/mcp/google-contacts"
            },
            "typeVersion": 1.1
          },
          {
            "id": "c55bbfc0-fab5-47e9-a98a-6cd35cdde48a",
            "name": "Send a text message",
            "type": "n8n-nodes-base.telegram",
            "position": [
              1392,
              128
            ],
            "webhookId": "84ca051b-0e3c-4311-8117-eca08c4a86fa",
            "parameters": {
              "text": "={{ $('Set Reply Message').item.json.message.replace(/[_*\\[\\]()~`>#+=\\-|{}.!\\\\]/g, '\\\\$&') }}",
              "chatId": "={{ $('Telegram Trigger').item.json.message.chat.id }}",
              "additionalFields": {
                "parse_mode": "MarkdownV2",
                "appendAttribution": false
              }
            },
            "credentials": {
              "telegramApi": {
                "id": "8DLWaXKWWtQftdTp",
                "name": "Calendar Booking Bot"
              }
            },
            "typeVersion": 1.2
          },
          {
            "id": "1e4372bb-7380-4484-a498-8a5948b662d7",
            "name": "Jarvis",
            "type": "@n8n/n8n-nodes-langchain.agent",
            "onError": "continueRegularOutput",
            "position": [
              368,
              320
            ],
            "parameters": {
              "text": "={{ $json.message.text }}\n\n{{ $json.text }}",
              "options": {
                "systemMessage": "=You are Jarvis, an intelligent productivity assistant designed to help manage daily tasks, communications, and schedules efficiently. You have access to multiple tools and should use them proactively to assist the user.\n\n## Core Identity\n- You are professional, helpful, and proactive\n- Always maintain a personal assistant tone - attentive but not overly casual\n- Use \"Jitesh Dugar\" as the user's name in all communications\n- Current date and time: {{ $now }}\n- Timezone: Asia/Kolkata\n\n## Available Capabilities\n\n### Email Management (Gmail MCP)\n- Read, send, reply to, and draft emails\n- Organize emails with labels\n- Search and filter emails by various criteria\n- Always use well-formatted HTML for email composition\n- Include proper signatures with \"Jitesh Dugar\"\n- If you're asked to send an email, just use the 'Google Contacts MCP' to get their email address first, then confirm from the user\n\n### Calendar Management (Calendar MCP)\n- Check availability and schedule conflicts\n- Create, update, reschedule, and delete events\n- Retrieve upcoming events and meetings\n- Handle meeting requests and confirmations\n\n### Task Management (Google Tasks MCP)\n- Create, update, complete, and delete tasks\n- Retrieve task lists with filtering options\n- Set due dates and add detailed notes\n- Mark tasks as completed with timestamps\n\n### Finance Tracking (Finance Manager MCP)\n- Log expenses with categories and descriptions\n- Retrieve expense reports and summaries\n- Delete or modify expense entries\n- Track spending patterns\n\n### Contact Management (Google Contacts MCP)\n- Search and retrieve contact information\n- Access email addresses and phone numbers for communications\n\n## Communication Guidelines\n\n### Email Composition\n- Use professional HTML formatting\n- Include clear subject lines\n- Structure emails with proper greetings and closings\n- Always sign emails as \"Jitesh Dugar\"\n- No placeholder text - ask for clarification if information is missing\n\n### Response Style\n- Be concise but complete in responses\n- Proactively suggest related actions when appropriate\n- Confirm actions taken and provide relevant details\n- If multiple steps are involved, explain what you're doing\n\n## Operational Rules\n\n### Data Handling\n- Always use specific, actionable parameters\n- For dates, use future dates when creating tasks/events unless specified otherwise\n- When scheduling, check for conflicts before confirming\n- Validate email addresses before sending\n\n### Error Management\n- If information is incomplete, ask specific questions\n- Don't use placeholders or generic text\n- Confirm understanding before executing actions\n- Provide clear feedback on completed actions\n\n### Privacy & Security\n- Handle all personal information with appropriate discretion\n- Confirm sensitive actions before executing\n- Maintain professional boundaries in all communications\n\n## Task Prioritization\n1. **Urgent**: Time-sensitive items (meetings, deadlines)\n2. **Important**: High-impact tasks and communications\n3. **Routine**: Regular maintenance and organization\n4. **Optional**: Enhancement and optimization tasks\n\n## Example Interactions\n\n**Calendar Query**: \"What meetings do I have today?\"\n‚Üí Check calendar for today's events, provide detailed schedule with times and attendees\n\n**Email Task**: \"Send a follow-up email to the marketing team about the quarterly review\"\n‚Üí Ask for specific details if needed, compose professional HTML email, confirm before sending\n\n**Task Creation**: \"Add a reminder to prepare the presentation for next week\"\n‚Üí Create task with appropriate due date, ask for specific deadline if unclear\n\n**Expense Logging**: \"I spent $45 on lunch at the restaurant\"\n‚Üí Log expense with date, amount, category (Food/Dining), and description\n\n## Always Remember\n- You represent Jitesh professionally in all communications\n- Double-check important details before executing actions\n- Provide clear confirmations of completed tasks\n- Be proactive in suggesting helpful follow-up actions\n- Maintain context across conversations using the memory system"
              },
              "promptType": "define"
            },
            "typeVersion": 2.2
          },
          {
            "id": "179ee564-930e-441c-83c1-186059367bf6",
            "name": "Only allow me",
            "type": "n8n-nodes-base.filter",
            "position": [
              -752,
              416
            ],
            "parameters": {
              "options": {},
              "conditions": {
                "options": {
                  "version": 2,
                  "leftValue": "",
                  "caseSensitive": true,
                  "typeValidation": "strict"
                },
                "combinator": "and",
                "conditions": [
                  {
                    "id": "74570957-ff95-4df8-bbc2-043c4973a733",
                    "operator": {
                      "name": "filter.operator.equals",
                      "type": "string",
                      "operation": "equals"
                    },
                    "leftValue": "={{ $json.message.chat.username }}",
                    "rightValue": "jackman8"
                  }
                ]
              }
            },
            "typeVersion": 2.2
          },
          {
            "id": "08fa5cc0-27a1-4a26-b6b1-518536f4e456",
            "name": "Set Reply Message",
            "type": "n8n-nodes-base.set",
            "position": [
              976,
              320
            ],
            "parameters": {
              "options": {},
              "assignments": {
                "assignments": [
                  {
                    "id": "c707ac04-2237-4cc4-991a-6aa22b1cef81",
                    "name": "message",
                    "type": "string",
                    "value": "={{ $json.output || $json.error }}"
                  }
                ]
              }
            },
            "typeVersion": 3.4
          },
          {
            "id": "293a8570-61ee-4570-a153-2f06fcbe29ef",
            "name": "Check Text or Audio",
            "type": "n8n-nodes-base.switch",
            "position": [
              1168,
              320
            ],
            "parameters": {
              "rules": {
                "values": [
                  {
                    "outputKey": "Text",
                    "conditions": {
                      "options": {
                        "version": 2,
                        "leftValue": "",
                        "caseSensitive": true,
                        "typeValidation": "strict"
                      },
                      "combinator": "and",
                      "conditions": [
                        {
                          "id": "9f763ec1-25e5-4a4d-88fa-70156851ff2a",
                          "operator": {
                            "type": "string",
                            "operation": "exists",
                            "singleValue": true
                          },
                          "leftValue": "={{ $('Telegram Trigger').item.json.message.text }}",
                          "rightValue": ""
                        }
                      ]
                    },
                    "renameOutput": true
                  },
                  {
                    "outputKey": "Audio",
                    "conditions": {
                      "options": {
                        "version": 2,
                        "leftValue": "",
                        "caseSensitive": true,
                        "typeValidation": "strict"
                      },
                      "combinator": "and",
                      "conditions": [
                        {
                          "id": "12be0a10-540d-423c-82de-00d0e9e9e501",
                          "operator": {
                            "type": "string",
                            "operation": "notExists",
                            "singleValue": true
                          },
                          "leftValue": "={{ $('Telegram Trigger').item.json.message.text }}",
                          "rightValue": ""
                        }
                      ]
                    },
                    "renameOutput": true
                  }
                ]
              },
              "options": {}
            },
            "typeVersion": 3.2
          },
          {
            "id": "c571092d-4c91-4b0c-b1a7-e0098f336fc0",
            "name": "Send an audio file",
            "type": "n8n-nodes-base.telegram",
            "position": [
              1584,
              320
            ],
            "webhookId": "0e0fd537-aacc-494b-82bb-81a9bac31087",
            "parameters": {
              "chatId": "={{ $('Telegram Trigger').item.json.message.chat.id }}",
              "operation": "sendAudio",
              "binaryData": true,
              "additionalFields": {
                "caption": "={{ $('Set Reply Message').item.json.message.replace(/[_*\\[\\]()~`>#+=\\-|{}.!\\\\]/g, '\\\\$&') }}",
                "fileName": "Jarvis's Reply"
              }
            },
            "credentials": {
              "telegramApi": {
                "id": "8DLWaXKWWtQftdTp",
                "name": "Calendar Booking Bot"
              }
            },
            "typeVersion": 1.2
          },
          {
            "id": "f9dbe402-bf2f-4ee0-802d-1f8dea1b46d6",
            "name": "Convert text to speech",
            "type": "@elevenlabs/n8n-nodes-elevenlabs.elevenLabs",
            "position": [
              1392,
              368
            ],
            "parameters": {
              "text": "={{ $('Set Reply Message').item.json.message }}",
              "voice": {
                "__rl": true,
                "mode": "list",
                "value": "MF4J4IDTRo0AxOO4dpFR",
                "cachedResultName": "Devi - Clear Hindi pronunciation"
              },
              "resource": "speech",
              "requestOptions": {},
              "additionalOptions": {}
            },
            "credentials": {
              "elevenLabsApi": {
                "id": "judah6VcfikE7I8a",
                "name": "ElevenLabs account"
              }
            },
            "typeVersion": 1
          },
          {
            "id": "6354b7fd-c734-414f-b75c-d1aea74bd648",
            "name": "Think",
            "type": "@n8n/n8n-nodes-langchain.toolThink",
            "position": [
              320,
              720
            ],
            "parameters": {},
            "typeVersion": 1.1
          },
          {
            "id": "e343c81a-8bc3-4378-b43a-d5518108cf21",
            "name": "Sticky Note1",
            "type": "n8n-nodes-base.stickyNote",
            "position": [
              144,
              144
            ],
            "parameters": {
              "width": 720,
              "height": 704,
              "content": "## Jarvis ü§ñ\nYour AI-powered personal assistant.  \n- Orchestrates tasks, calendar, emails, contacts & expenses  \n- Uses memory + OpenAI model for smart decisions  \n- Sends results back to Telegram  "
            },
            "typeVersion": 1
          },
          {
            "id": "05be19b3-cfdc-43b7-88ab-7b7b4167e0fd",
            "name": "Sticky Note4",
            "type": "n8n-nodes-base.stickyNote",
            "position": [
              224,
              880
            ],
            "parameters": {
              "color": 3,
              "width": 768,
              "height": 640,
              "content": "## Gmail MCP üìß\nFull email management.  \n- Send & draft messages  \n- Reply, label, and fetch emails  "
            },
            "typeVersion": 1
          },
          {
            "id": "052413b1-42e2-4ada-95d1-08cbaa1f88b8",
            "name": "Sticky Note5",
            "type": "n8n-nodes-base.stickyNote",
            "position": [
              1024,
              528
            ],
            "parameters": {
              "color": 4,
              "width": 496,
              "height": 544,
              "content": "## Finance Manager MCP üíµ\nTrack personal or business expenses.  \n- Create new expenses  \n- Get expense reports  \n- Delete outdated entries  "
            },
            "typeVersion": 1
          },
          {
            "id": "afd43947-b4a8-412f-82da-62885e2406d5",
            "name": "Sticky Note6",
            "type": "n8n-nodes-base.stickyNote",
            "position": [
              1056,
              1088
            ],
            "parameters": {
              "color": 6,
              "width": 448,
              "height": 416,
              "content": "## Google Contacts MCP üë•\nAccess and manage your contact list.  \n- Fetch contacts for quick communication  "
            },
            "typeVersion": 1
          },
          {
            "id": "efda731e-8751-4a67-b76c-a8bacac92064",
            "name": "Sticky Note3",
            "type": "n8n-nodes-base.stickyNote",
            "position": [
              -512,
              720
            ],
            "parameters": {
              "color": 5,
              "width": 624,
              "height": 704,
              "content": "## Calendar MCP üìÖ\nYour scheduling hub.  \n- Check availability  \n- Create, reschedule, or delete events "
            },
            "typeVersion": 1
          },
          {
            "id": "3558db0a-ebe7-4942-9dfb-ad610d59a94b",
            "name": "Sticky Note2",
            "type": "n8n-nodes-base.stickyNote",
            "position": [
              -1104,
              592
            ],
            "parameters": {
              "color": 6,
              "width": 560,
              "height": 624,
              "content": "## Task Manager MCP ‚úÖ\nManages to-dos with ease:  \n- Create / Complete / Delete tasks  \n- Retrieve individual or bulk tasks "
            },
            "typeVersion": 1
          }
        ],
        "active": false,
        "pinData": {
          "Telegram Trigger": [
            {
              "json": {
                "message": {
                  "chat": {
                    "id": 866308086,
                    "type": "private",
                    "username": "jackman8",
                    "first_name": "Jack"
                  },
                  "date": 1757728469,
                  "from": {
                    "id": 866308086,
                    "is_bot": false,
                    "username": "jackman8",
                    "first_name": "Jack",
                    "language_code": "en"
                  },
                  "text": "Check from my contacts",
                  "message_id": 1638
                },
                "update_id": 501517144
              }
            }
          ],
          "Set Reply Message": [
            {
              "json": {
                "message": "I still cannot access your contacts due to permission or credential restrictions. Please let me know if there is a specific contact detail you want me to assist with or any other request."
              }
            }
          ],
          "Transcribe audio or video": [
            {
              "json": {
                "text": "What meetings do we have today?",
                "words": [
                  {
                    "end": 0.699,
                    "text": "What",
                    "type": "word",
                    "start": 0.519,
                    "logprob": 0
                  },
                  {
                    "end": 0.74,
                    "text": " ",
                    "type": "spacing",
                    "start": 0.699,
                    "logprob": 0
                  },
                  {
                    "end": 1.059,
                    "text": "meetings",
                    "type": "word",
                    "start": 0.74,
                    "logprob": 0
                  },
                  {
                    "end": 1.079,
                    "text": " ",
                    "type": "spacing",
                    "start": 1.059,
                    "logprob": 0
                  },
                  {
                    "end": 1.139,
                    "text": "do",
                    "type": "word",
                    "start": 1.079,
                    "logprob": 0
                  },
                  {
                    "end": 1.179,
                    "text": " ",
                    "type": "spacing",
                    "start": 1.139,
                    "logprob": 0
                  },
                  {
                    "end": 1.259,
                    "text": "we",
                    "type": "word",
                    "start": 1.179,
                    "logprob": 0
                  },
                  {
                    "end": 1.279,
                    "text": " ",
                    "type": "spacing",
                    "start": 1.259,
                    "logprob": 0
                  },
                  {
                    "end": 1.459,
                    "text": "have",
                    "type": "word",
                    "start": 1.279,
                    "logprob": 0
                  },
                  {
                    "end": 1.479,
                    "text": " ",
                    "type": "spacing",
                    "start": 1.459,
                    "logprob": 0
                  },
                  {
                    "end": 2.019,
                    "text": "today?",
                    "type": "word",
                    "start": 1.48,
                    "logprob": 0
                  }
                ],
                "language_code": "eng",
                "transcription_id": "sqcPU83tXx6B3wyBGtHP",
                "language_probability": 0.9588561058044434
              }
            }
          ]
        },
        "settings": {
          "executionOrder": "v1"
        },
        "versionId": "d710d95f-7ff1-478c-955a-db292f3e384e",
        "connections": {
          "Think": {
            "ai_tool": [
              [
                {
                  "node": "Jarvis",
                  "type": "ai_tool",
                  "index": 0
                }
              ]
            ]
          },
          "Jarvis": {
            "main": [
              [
                {
                  "node": "Set Reply Message",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          },
          "Switch": {
            "main": [
              [
                {
                  "node": "Jarvis",
                  "type": "main",
                  "index": 0
                }
              ],
              [
                {
                  "node": "Get a file",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          },
          "Get Event": {
            "ai_tool": [
              [
                {
                  "node": "Calendar MCP Server",
                  "type": "ai_tool",
                  "index": 0
                }
              ]
            ]
          },
          "Gmail MCP": {
            "ai_tool": [
              [
                {
                  "node": "Jarvis",
                  "type": "ai_tool",
                  "index": 0
                }
              ]
            ]
          },
          "Get Emails": {
            "ai_tool": [
              [
                {
                  "node": "Gmail MCP Server",
                  "type": "ai_tool",
                  "index": 0
                }
              ]
            ]
          },
          "Get Labels": {
            "ai_tool": [
              [
                {
                  "node": "Gmail MCP Server",
                  "type": "ai_tool",
                  "index": 0
                }
              ]
            ]
          },
          "Get a Task": {
            "ai_tool": [
              [
                {
                  "node": "Task Manager MCP",
                  "type": "ai_tool",
                  "index": 0
                }
              ]
            ]
          },
          "Get a file": {
            "main": [
              [
                {
                  "node": "Transcribe audio or video",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          },
          "Send Email": {
            "ai_tool": [
              [
                {
                  "node": "Gmail MCP Server",
                  "type": "ai_tool",
                  "index": 0
                }
              ]
            ]
          },
          "Draft Email": {
            "ai_tool": [
              [
                {
                  "node": "Gmail MCP Server",
                  "type": "ai_tool",
                  "index": 0
                }
              ]
            ]
          },
          "Calendar MCP": {
            "ai_tool": [
              [
                {
                  "node": "Jarvis",
                  "type": "ai_tool",
                  "index": 0
                }
              ]
            ]
          },
          "Get Contacts": {
            "ai_tool": [
              [
                {
                  "node": "Google Contacts MCP",
                  "type": "ai_tool",
                  "index": 0
                }
              ]
            ]
          },
          "Create a Task": {
            "ai_tool": [
              [
                {
                  "node": "Task Manager MCP",
                  "type": "ai_tool",
                  "index": 0
                }
              ]
            ]
          },
          "Delete a Task": {
            "ai_tool": [
              [
                {
                  "node": "Task Manager MCP",
                  "type": "ai_tool",
                  "index": 0
                }
              ]
            ]
          },
          "Only allow me": {
            "main": [
              [
                {
                  "node": "Switch",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          },
          "Simple Memory": {
            "ai_memory": [
              [
                {
                  "node": "Jarvis",
                  "type": "ai_memory",
                  "index": 0
                }
              ]
            ]
          },
          "Create Expense": {
            "ai_tool": [
              [
                {
                  "node": "Finance Manager MCP Server",
                  "type": "ai_tool",
                  "index": 0
                }
              ]
            ]
          },
          "Delete Expense": {
            "ai_tool": [
              [
                {
                  "node": "Finance Manager MCP Server",
                  "type": "ai_tool",
                  "index": 0
                }
              ]
            ]
          },
          "Get all Events": {
            "ai_tool": [
              [
                {
                  "node": "Calendar MCP Server",
                  "type": "ai_tool",
                  "index": 0
                }
              ]
            ]
          },
          "Get many Tasks": {
            "ai_tool": [
              [
                {
                  "node": "Task Manager MCP",
                  "type": "ai_tool",
                  "index": 0
                }
              ]
            ]
          },
          "Complete a Task": {
            "ai_tool": [
              [
                {
                  "node": "Task Manager MCP",
                  "type": "ai_tool",
                  "index": 0
                }
              ]
            ]
          },
          "Create an event": {
            "ai_tool": [
              [
                {
                  "node": "Calendar MCP Server",
                  "type": "ai_tool",
                  "index": 0
                }
              ]
            ]
          },
          "Finance Tracker": {
            "ai_tool": [
              [
                {
                  "node": "Jarvis",
                  "type": "ai_tool",
                  "index": 0
                }
              ]
            ]
          },
          "Google Contacts": {
            "ai_tool": [
              [
                {
                  "node": "Jarvis",
                  "type": "ai_tool",
                  "index": 0
                }
              ]
            ]
          },
          "Get all Expenses": {
            "ai_tool": [
              [
                {
                  "node": "Finance Manager MCP Server",
                  "type": "ai_tool",
                  "index": 0
                }
              ]
            ]
          },
          "Google Tasks MCP": {
            "ai_tool": [
              [
                {
                  "node": "Jarvis",
                  "type": "ai_tool",
                  "index": 0
                }
              ]
            ]
          },
          "Reschedule Event": {
            "ai_tool": [
              [
                {
                  "node": "Calendar MCP Server",
                  "type": "ai_tool",
                  "index": 0
                }
              ]
            ]
          },
          "Telegram Trigger": {
            "main": [
              [
                {
                  "node": "Only allow me",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          },
          "Draft Email Reply": {
            "ai_tool": [
              [
                {
                  "node": "Gmail MCP Server",
                  "type": "ai_tool",
                  "index": 0
                }
              ]
            ]
          },
          "OpenAI Chat Model": {
            "ai_languageModel": [
              [
                {
                  "node": "Jarvis",
                  "type": "ai_languageModel",
                  "index": 0
                }
              ]
            ]
          },
          "Reply to an Email": {
            "ai_tool": [
              [
                {
                  "node": "Gmail MCP Server",
                  "type": "ai_tool",
                  "index": 0
                }
              ]
            ]
          },
          "Set Reply Message": {
            "main": [
              [
                {
                  "node": "Check Text or Audio",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          },
          "Add Label to Email": {
            "ai_tool": [
              [
                {
                  "node": "Gmail MCP Server",
                  "type": "ai_tool",
                  "index": 0
                }
              ]
            ]
          },
          "Check Availability": {
            "ai_tool": [
              [
                {
                  "node": "Calendar MCP Server",
                  "type": "ai_tool",
                  "index": 0
                }
              ]
            ]
          },
          "Check Text or Audio": {
            "main": [
              [
                {
                  "node": "Send a text message",
                  "type": "main",
                  "index": 0
                }
              ],
              [
                {
                  "node": "Convert text to speech",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          },
          "Delete Calendar Event": {
            "ai_tool": [
              [
                {
                  "node": "Calendar MCP Server",
                  "type": "ai_tool",
                  "index": 0
                }
              ]
            ]
          },
          "Convert text to speech": {
            "main": [
              [
                {
                  "node": "Send an audio file",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          },
          "Transcribe audio or video": {
            "main": [
              [
                {
                  "node": "Jarvis",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          }
        }
      }
    },
    {
      "id": 6281,
      "name": "N8N Documentation Expert Chatbot with OpenAI RAG Pipeline",
      "description": "# How It Works\n\nThis template is a complete, hands-on tutorial for building a **RAG (Retrieval-Augmented Generation)** pipeline. In simple terms, you'll teach an AI to become an expert on a specific topic‚Äîin this case, the official **n8n documentation**‚Äîand then build a chatbot to ask it questions.\n\nThink of it like this: instead of a general-knowledge AI, you're building an **expert librarian**.\n\n---\n\n## üîß Workflow Overview\n\nThe workflow is split into two main parts:\n\n### Part 1: Indexing the Knowledge (üìö Building the Library)\n\nThis is a **one-time process** you run manually. The workflow will:\n\n- Automatically scrape all pages of the **n8n documentation**.\n- Break them down into small, digestible chunks.\n- Use an AI model to create a numerical representation (an **embedding**) for each chunk.\n- Store these embeddings in **n8n's built-in Simple Vector Store**.\n\n&gt; This is like a librarian reading every book and creating a hyper-detailed index card for every paragraph.\n\n&gt; ‚ö†Ô∏è **Important:** This in-memory knowledge base is **temporary**. It will be erased if you restart your n8n instance. You'll need to run the indexing process again in that case.\n\n---\n\n### Part 2: The AI Agent (üß† The Expert Librarian)\n\nThis is the **chat interface**.\n\nWhen you ask a question:\n\n1. The AI agent **doesn't guess** the answer.\n2. It searches the knowledge base to find the most relevant ‚Äúindex cards‚Äù (chunks).\n3. It feeds those chunks to a language model (**Gemini**) with strict instructions:\n   &gt; ‚ÄúAnswer the user's question using ONLY this information.‚Äù\n\nThis ensures answers are accurate, factual, and grounded in your documents.\n\n---\n\n## üöÄ Setup Steps\n\n&gt; **Total setup time**: ~2 minutes  \n&gt; **Indexing time**: ~15‚Äì20 minutes\n\nThis template uses **n8n‚Äôs built-in tools**, so no external database is needed.\n\n### 1. Configure OpenAI Credentials\n\n- You‚Äôll need an **OpenAI API key** (for GPT models).\n- In your n8n workflow:\n  - Go to any of the three OpenAI nodes (e.g., `OpenAI Chat Model`).\n  - Click the **Credential** dropdown ‚Üí `+ Create New Credential`.\n  - Enter your OpenAI API key and **save**.\n\n### 2. Apply Credentials to All Nodes\n\n- Your new credential is now saved.\n- Go to the other two OpenAI nodes (e.g., `OpenAI Embeddings`) and select the newly created credential from the dropdown.\n\n### 3. Build the Knowledge Base\n\n- Find the **Start Indexing** manual trigger node (top-left of the workflow).\n- Click the **Execute Workflow** button to start indexing.\n\n&gt; ‚ö†Ô∏è **Be patient**: This takes 15‚Äì20 minutes to scrape and process the full documentation.  \n&gt; You only need to do this **once per n8n session**.\n\n### 4. Chat With Your Expert Agent\n\n- After indexing completes, **activate** the entire workflow (toggle at the top).\n- Open the **RAG Chatbot** chat trigger node (bottom-left).\n- Copy its **Public URL**.\n- Open it in a new tab and ask questions about n8n!\n\nExample questions:\n\n- \"How does the IF node work?\"\n- \"What is a sub-workflow?\"\n\n---\n\n## üë§ Credits\n\nAll credits go to **Lucas Peyrin**  \nüîó [lucaspeyrin on n8n.io](https://n8n.io/creators/lucaspeyrin/)\n",
      "totalViews": 6472,
      "createdAt": "2025-07-22T15:34:33.023Z",
      "author": "ayhamjo7",
      "nodeTypes": [
        "@n8n/n8n-nodes-langchain.memoryBufferWindow",
        "@n8n/n8n-nodes-langchain.documentDefaultDataLoader",
        "@n8n/n8n-nodes-langchain.textSplitterRecursiveCharacterTextSplitter",
        "n8n-nodes-base.removeDuplicates",
        "n8n-nodes-base.filter",
        "n8n-nodes-base.set",
        "n8n-nodes-base.httpRequest",
        "n8n-nodes-base.html",
        "n8n-nodes-base.splitOut",
        "n8n-nodes-base.executeWorkflow",
        "n8n-nodes-base.splitInBatches",
        "@n8n/n8n-nodes-langchain.agent",
        "n8n-nodes-base.manualTrigger",
        "@n8n/n8n-nodes-langchain.chatTrigger",
        "n8n-nodes-base.executeWorkflowTrigger",
        "@n8n/n8n-nodes-langchain.vectorStoreInMemory",
        "@n8n/n8n-nodes-langchain.embeddingsOpenAi",
        "@n8n/n8n-nodes-langchain.lmChatOpenAi"
      ],
      "nodeCount": 46,
      "connectionCount": 21,
      "categories": [
        "Internal Wiki",
        "AI RAG"
      ],
      "workflowJson": {
        "id": "0WrbldJbytCFt32Q",
        "meta": {
          "instanceId": "7f3a23cb64949b4506a831a13237262d06d8d391c70a726835bb67f156e11c9b",
          "templateId": "6137",
          "templateCredsSetupCompleted": true
        },
        "name": "ü§ñ Build a Documentation Expert Chatbot with Gemini RAG Pipeline",
        "tags": [],
        "nodes": [
          {
            "id": "f8083b86-d34e-4499-8366-1321ed4cff73",
            "cid": "Ikx1Y2FzIFBleXJpbiI",
            "name": "Simple Memory",
            "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
            "creator": "Lucas Peyrin",
            "position": [
              1856,
              3424
            ],
            "parameters": {},
            "typeVersion": 1.3
          },
          {
            "id": "e4b137f4-11b8-4559-b1d1-eb66ea99a59d",
            "cid": "Ikx1Y2FzIFBleXJpbiI",
            "name": "Default Data Loader",
            "type": "@n8n/n8n-nodes-langchain.documentDefaultDataLoader",
            "creator": "Lucas Peyrin",
            "position": [
              3568,
              1904
            ],
            "parameters": {
              "options": {},
              "jsonData": "={{ $json.documentation }}",
              "jsonMode": "expressionData",
              "textSplittingMode": "custom"
            },
            "typeVersion": 1.1
          },
          {
            "id": "de258e6d-8c4f-4c3c-934b-f96413f4d617",
            "cid": "Ikx1Y2FzIFBleXJpbiI",
            "name": "Recursive Character Text Splitter",
            "type": "@n8n/n8n-nodes-langchain.textSplitterRecursiveCharacterTextSplitter",
            "creator": "Lucas Peyrin",
            "position": [
              3664,
              2112
            ],
            "parameters": {
              "options": {
                "splitCode": "markdown"
              },
              "chunkSize": 1500,
              "chunkOverlap": 200
            },
            "typeVersion": 1
          },
          {
            "id": "c54c329b-3d8a-47c6-87f3-ffb06d6d71d5",
            "cid": "Ikx1Y2FzIFBleXJpbiI",
            "name": "Remove Duplicate Documentation Content",
            "type": "n8n-nodes-base.removeDuplicates",
            "creator": "Lucas Peyrin",
            "position": [
              2944,
              1680
            ],
            "parameters": {
              "options": {
                "scope": "node",
                "historySize": 10000
              },
              "operation": "removeItemsSeenInPreviousExecutions",
              "dedupeValue": "={{ $json.documentation }}"
            },
            "typeVersion": 2
          },
          {
            "id": "4e9f3fa9-2c4f-49e4-b9c3-3ff2130a37dd",
            "cid": "Ikx1Y2FzIFBleXJpbiI",
            "name": "Only Keep Doc Paths",
            "type": "n8n-nodes-base.filter",
            "creator": "Lucas Peyrin",
            "position": [
              3072,
              912
            ],
            "parameters": {
              "options": {},
              "conditions": {
                "options": {
                  "version": 2,
                  "leftValue": "",
                  "caseSensitive": true,
                  "typeValidation": "strict"
                },
                "combinator": "and",
                "conditions": [
                  {
                    "id": "52b8b89a-30cd-4a0d-a428-e5d341bcebbf",
                    "operator": {
                      "type": "string",
                      "operation": "endsWith"
                    },
                    "leftValue": "={{ $json.link }}",
                    "rightValue": "/"
                  },
                  {
                    "id": "d8019c4e-e1a1-43ec-93a8-dac3d8c083b6",
                    "operator": {
                      "type": "string",
                      "operation": "notStartsWith"
                    },
                    "leftValue": "={{ $json.link }}",
                    "rightValue": "https://"
                  }
                ]
              }
            },
            "typeVersion": 2.2
          },
          {
            "id": "37b9faf8-da95-4add-a8fb-d16083582e81",
            "cid": "Ikx1Y2FzIFBleXJpbiI",
            "name": "Clean Documentation",
            "type": "n8n-nodes-base.set",
            "creator": "Lucas Peyrin",
            "position": [
              2512,
              1680
            ],
            "parameters": {
              "options": {},
              "assignments": {
                "assignments": [
                  {
                    "id": "5ed964a6-5200-454c-b983-f3dc7c8c7a48",
                    "name": "documentation",
                    "type": "string",
                    "value": "={{ $json.data.replace(/([^#\\n]+)\\s*#/g, '# $1').trim().replace(/^\\s*https?:\\/\\/\\S+\\s*/, '') }}"
                  }
                ]
              }
            },
            "typeVersion": 3.4
          },
          {
            "id": "327aafbb-3628-4fdc-84fc-567caa2643c8",
            "cid": "Ikx1Y2FzIFBleXJpbiI",
            "name": "Get All n8n Documentation Links",
            "type": "n8n-nodes-base.httpRequest",
            "creator": "Lucas Peyrin",
            "position": [
              1920,
              912
            ],
            "parameters": {
              "url": "https://docs.n8n.io/",
              "options": {}
            },
            "typeVersion": 4.2
          },
          {
            "id": "03e6b6f4-1674-4be6-b5c8-9505d39b3d13",
            "cid": "Ikx1Y2FzIFBleXJpbiI",
            "name": "Extract Links from HTML",
            "type": "n8n-nodes-base.html",
            "creator": "Lucas Peyrin",
            "position": [
              2208,
              912
            ],
            "parameters": {
              "options": {},
              "operation": "extractHtmlContent",
              "extractionValues": {
                "values": [
                  {
                    "key": "links",
                    "attribute": "href",
                    "cssSelector": "a",
                    "returnArray": true,
                    "returnValue": "attribute"
                  }
                ]
              }
            },
            "typeVersion": 1.2
          },
          {
            "id": "a1a3eb41-4d40-4cab-8f9f-507fe968b211",
            "cid": "Ikx1Y2FzIFBleXJpbiI",
            "name": "Split Out Links",
            "type": "n8n-nodes-base.splitOut",
            "creator": "Lucas Peyrin",
            "position": [
              2544,
              912
            ],
            "parameters": {
              "options": {
                "destinationFieldName": "link"
              },
              "fieldToSplitOut": "links"
            },
            "typeVersion": 1
          },
          {
            "id": "65a57136-d329-4455-9301-13f808f8dfef",
            "cid": "Ikx1Y2FzIFBleXJpbiI",
            "name": "Remove Duplicate Links",
            "type": "n8n-nodes-base.removeDuplicates",
            "creator": "Lucas Peyrin",
            "position": [
              2848,
              912
            ],
            "parameters": {
              "compare": "selectedFields",
              "options": {},
              "fieldsToCompare": "link"
            },
            "typeVersion": 2
          },
          {
            "id": "7051a5f4-ee42-42ce-b678-f76e5e96e22f",
            "cid": "Ikx1Y2FzIFBleXJpbiI",
            "name": "Add Documentation Page to Vector Store",
            "type": "n8n-nodes-base.executeWorkflow",
            "creator": "Lucas Peyrin",
            "position": [
              3584,
              944
            ],
            "parameters": {
              "options": {
                "waitForSubWorkflow": true
              },
              "workflowId": {
                "__rl": true,
                "mode": "id",
                "value": "={{ $workflow.id }}"
              },
              "workflowInputs": {
                "value": {
                  "path": "={{ $json.link }}"
                },
                "schema": [
                  {
                    "id": "path",
                    "type": "string",
                    "display": true,
                    "removed": false,
                    "required": false,
                    "displayName": "path",
                    "defaultMatch": false,
                    "canBeUsedToMatch": true
                  }
                ],
                "mappingMode": "defineBelow",
                "matchingColumns": [
                  "data"
                ],
                "attemptToConvertTypes": false,
                "convertFieldsToString": true
              }
            },
            "typeVersion": 1.2,
            "alwaysOutputData": true
          },
          {
            "id": "40517663-1ce0-47d8-9596-2bff302d0e58",
            "cid": "Ikx1Y2FzIFBleXJpbiI",
            "name": "Get Documentation Page",
            "type": "n8n-nodes-base.httpRequest",
            "creator": "Lucas Peyrin",
            "onError": "continueErrorOutput",
            "position": [
              1984,
              1680
            ],
            "parameters": {
              "url": "=https://docs.n8n.io/{{ $('Ingest Web Page').last().json.path }}",
              "options": {}
            },
            "typeVersion": 4.2
          },
          {
            "id": "cb53b073-26df-401e-927a-5e0f3d27acfc",
            "cid": "Ikx1Y2FzIFBleXJpbiI",
            "name": "Extract Documentation Content",
            "type": "n8n-nodes-base.html",
            "creator": "Lucas Peyrin",
            "position": [
              2288,
              1680
            ],
            "parameters": {
              "options": {},
              "operation": "extractHtmlContent",
              "extractionValues": {
                "values": [
                  {
                    "key": "data",
                    "cssSelector": "article",
                    "skipSelectors": "img, footer, form"
                  }
                ]
              }
            },
            "typeVersion": 1.2
          },
          {
            "id": "1087b5fe-d8c5-46fc-884a-f173b4f22859",
            "cid": "Ikx1Y2FzIFBleXJpbiI",
            "name": "Sticky Note2",
            "type": "n8n-nodes-base.stickyNote",
            "notes": "¬© 2025 Lucas Peyrin",
            "creator": "Lucas Peyrin",
            "position": [
              1328,
              560
            ],
            "parameters": {
              "color": 7,
              "width": 2640,
              "height": 1760,
              "content": "## Part 1: Building the Knowledge Base (The Library)\n\n**Goal:** To read all n8n documentation, break it into small pieces, and store it in n8n's **in-memory vector store**.\n**Action:** You only need to run this part **ONCE** per n8n session by clicking the \"Execute workflow\" button on the `Start Indexing` trigger.\n**Time:** This will take several minutes to complete (~15 to 20).\n\n**Important:** The in-memory store is not permanent. If you restart n8n, you must run this indexing flow again to rebuild the knowledge base."
            },
            "typeVersion": 1
          },
          {
            "id": "793bbb80-797b-429c-8710-41dec44ae84c",
            "cid": "Ikx1Y2FzIFBleXJpbiI",
            "name": "Loop Over Documentation Pages",
            "type": "n8n-nodes-base.splitInBatches",
            "creator": "Lucas Peyrin",
            "position": [
              3360,
              912
            ],
            "parameters": {
              "options": {},
              "batchSize": 10
            },
            "typeVersion": 3
          },
          {
            "id": "7fbac9ee-8be3-4407-adcd-4420c63ac793",
            "cid": "Ikx1Y2FzIFBleXJpbiI",
            "name": "Sticky Note4",
            "type": "n8n-nodes-base.stickyNote",
            "notes": "¬© 2025 Lucas Peyrin",
            "creator": "Lucas Peyrin",
            "position": [
              368,
              240
            ],
            "parameters": {
              "color": 6,
              "width": 1064,
              "height": 296,
              "content": "# Tutorial: Build an AI Expert with RAG\n\nWelcome! This workflow teaches you **RAG (Retrieval-Augmented Generation)** using n8n's built-in tools.\n\n**The Goal:** To create an AI chatbot that is an expert on a specific topic (the n8n docs) and *never* makes up answers.\n\n**It has two parts:**\n1.  **TOP FLOW (Indexing):** You run this once manually to build the AI's knowledge base. It reads the n8n docs and stores them in n8n's **in-memory vector store**.\n2.  **BOTTOM FLOW (Chat):** This is the live chatbot. It retrieves relevant info from the knowledge base to answer your questions accurately."
            },
            "typeVersion": 1
          },
          {
            "id": "d64e0666-3ea6-4abf-8a3d-331300df7631",
            "cid": "Ikx1Y2FzIFBleXJpbiI",
            "name": "Sticky Note5",
            "type": "n8n-nodes-base.stickyNote",
            "notes": "¬© 2025 Lucas Peyrin",
            "creator": "Lucas Peyrin",
            "position": [
              368,
              560
            ],
            "parameters": {
              "color": 7,
              "width": 924,
              "height": 1392,
              "content": "# Workflow Setup"
            },
            "typeVersion": 1
          },
          {
            "id": "c58ee1a1-1626-441b-9b19-26f31acc2308",
            "cid": "Ikx1Y2FzIFBleXJpbiI",
            "name": "n8n Docs AI Agent",
            "type": "@n8n/n8n-nodes-langchain.agent",
            "creator": "Lucas Peyrin",
            "position": [
              1872,
              2816
            ],
            "parameters": {
              "options": {
                "systemMessage": "=<role>\nYou are a specialized AI assistant, an expert in n8n's official documentation. Your sole mission is to help users by providing accurate and factual information extracted exclusively from this documentation. You are meticulous, factual, and never deviate from your knowledge scope.\n</role>\n\n<instructions>\n<goal>\nYour primary goal is to provide precise and factual answers to user questions about the n8n automation platform, based **exclusively** on the excerpts from the official documentation provided in the context.\n</goal>\n\n<context>\nYou operate according to a RAG (Retrieval-Augmented Generation) model. For each user question, use the appropriate tool to retrieve the necessary information from the n8n documentation's vector database.\n\n**Mandatory rules:**\n\n1.  **Single source of truth:** Your answer MUST be entirely and solely derived from the information present in the provided documentation.\n2.  **Accuracy and implicit citation:** Base your answer as literally as possible on the documentation text. Rephrase for clarity and conciseness, but do not add any information not found there. Act as if the documentation is your only knowledge in the world.\n3.  **Do not mention the process:** Never mention your tool or the fact that you are a RAG system in your answer to the user. Respond as an expert who directly consults their documentation.\n</context>\n\n<output_format>\n*   **Clarity:** Provide a clear, concise, and direct answer.\n*   **Structuring:** If the context contains steps, lists, or code examples, use Markdown syntax to format them legibly (bullet points, numbered lists, code blocks for code snippets, JSON, etc.).\n*   **Tone:** Adopt a professional, helpful, and confident tone, that of a technical n8n expert.\n</output_format>\n</instructions>"
              }
            },
            "typeVersion": 2.1
          },
          {
            "id": "efc769ba-fc45-48aa-9924-9f9fe7572b5d",
            "cid": "Ikx1Y2FzIFBleXJpbiI",
            "name": "Sticky Note6",
            "type": "n8n-nodes-base.stickyNote",
            "notes": "¬© 2025 Lucas Peyrin",
            "creator": "Lucas Peyrin",
            "position": [
              1824,
              704
            ],
            "parameters": {
              "color": 7,
              "width": 288,
              "height": 400,
              "content": "### Step 1.1: Find All the 'Books'\n\n**What it does:** This node visits the main n8n documentation page.\n**Analogy:** We're asking the library's front desk for a complete list of every single book they have."
            },
            "typeVersion": 1
          },
          {
            "id": "a988d207-5afd-41f0-9992-3ac21d22e19f",
            "cid": "Ikx1Y2FzIFBleXJpbiI",
            "name": "Sticky Note7",
            "type": "n8n-nodes-base.stickyNote",
            "notes": "¬© 2025 Lucas Peyrin",
            "creator": "Lucas Peyrin",
            "position": [
              2128,
              704
            ],
            "parameters": {
              "color": 7,
              "width": 272,
              "height": 400,
              "content": "### Step 1.2: Read the List of Books\n\n**What it does:** It takes the HTML from the previous step and extracts every single link (`<a>` tag).\n**Analogy:** We're reading the list from the front desk and pulling out just the titles of the books (the links)."
            },
            "typeVersion": 1
          },
          {
            "id": "114aa79b-0cc7-4f66-866f-2d8cbe001a0f",
            "cid": "Ikx1Y2FzIFBleXJpbiI",
            "name": "Sticky Note8",
            "type": "n8n-nodes-base.stickyNote",
            "notes": "¬© 2025 Lucas Peyrin",
            "creator": "Lucas Peyrin",
            "position": [
              2416,
              704
            ],
            "parameters": {
              "color": 7,
              "width": 336,
              "height": 400,
              "content": "### Step 1.3: Process One Book at a Time\n\n**What it does:** It takes the big list of links and turns each link into a separate item for n8n to process.\n**Analogy:** Instead of trying to read all the books at once, we're creating a separate to-do item for each book."
            },
            "typeVersion": 1
          },
          {
            "id": "a9b6daac-c326-4d38-ace1-e9cd633fd0b5",
            "cid": "Ikx1Y2FzIFBleXJpbiI",
            "name": "Sticky Note9",
            "type": "n8n-nodes-base.stickyNote",
            "notes": "¬© 2025 Lucas Peyrin",
            "creator": "Lucas Peyrin",
            "position": [
              2768,
              704
            ],
            "parameters": {
              "color": 7,
              "width": 480,
              "height": 400,
              "content": "### Step 1.4: Tidy Up the To-Do List\n\n**What it does:** First, it removes any duplicate links. Then, it filters out any links that don't point to an actual documentation page (e.g., links to the homepage or external sites).\n**Analogy:** We're throwing away duplicate to-do items and any notes that aren't actually books."
            },
            "typeVersion": 1
          },
          {
            "id": "a2f4b7c5-e034-4782-ae0b-8ee358b02e91",
            "cid": "Ikx1Y2FzIFBleXJpbiI",
            "name": "Sticky Note10",
            "type": "n8n-nodes-base.stickyNote",
            "notes": "¬© 2025 Lucas Peyrin",
            "creator": "Lucas Peyrin",
            "position": [
              3264,
              704
            ],
            "parameters": {
              "color": 4,
              "width": 512,
              "height": 464,
              "content": "### Step 1.5: The Librarian's Reading Loop\n\n**What it does:** This is the engine of the indexing process. It takes our clean list of pages and processes them one by one. The `Execute Workflow` node calls the \"sub-workflow\" below for each and every page.\n**Analogy:** This loop tells our librarian to pick up one book (link) at a time and go through the full process of reading and indexing it."
            },
            "typeVersion": 1
          },
          {
            "id": "0acc8bef-4f0b-42e2-b960-d5577ae4b5d8",
            "cid": "Ikx1Y2FzIFBleXJpbiI",
            "name": "Sticky Note11",
            "type": "n8n-nodes-base.stickyNote",
            "notes": "¬© 2025 Lucas Peyrin",
            "creator": "Lucas Peyrin",
            "position": [
              1888,
              1472
            ],
            "parameters": {
              "color": 7,
              "width": 288,
              "height": 384,
              "content": "### Step 1.5.1: Read a Single Page\n\n**What it does:** This node takes a single URL from the loop and fetches the HTML content of that page.\n**Analogy:** The librarian opens one book to the first page."
            },
            "typeVersion": 1
          },
          {
            "id": "32c25451-55f0-44b6-9ff3-20a4339c44dd",
            "cid": "Ikx1Y2FzIFBleXJpbiI",
            "name": "Sticky Note12",
            "type": "n8n-nodes-base.stickyNote",
            "notes": "¬© 2025 Lucas Peyrin",
            "creator": "Lucas Peyrin",
            "position": [
              1360,
              1328
            ],
            "parameters": {
              "color": 5,
              "width": 512,
              "height": 528,
              "content": "### Why Use a Sub-Workflow?\n\nThe main reason is **memory management**.\n\nProcessing a single web page, especially creating vector embeddings for all its chunks, uses a lot of memory (RAM). The n8n documentation has over 1,000 pages. If we tried to process all of them in a single, linear run, the memory usage would build up with each page and would likely crash your n8n instance.\n\nWhen a sub-workflow finishes its run for one item (one page), n8n **clears out the memory** (RAM) it used before starting the next one.\n\nBy using a sub-workflow, we process pages one-by-one in a memory-efficient loop, making the entire indexing process stable and reliable, even on a massive scale."
            },
            "typeVersion": 1
          },
          {
            "id": "582348d6-f15f-42c7-b3dc-4863fbde6983",
            "cid": "Ikx1Y2FzIFBleXJpbiI",
            "name": "Sticky Note13",
            "type": "n8n-nodes-base.stickyNote",
            "notes": "¬© 2025 Lucas Peyrin",
            "creator": "Lucas Peyrin",
            "position": [
              2192,
              1472
            ],
            "parameters": {
              "color": 7,
              "width": 512,
              "height": 384,
              "content": "### Step 1.5.2: Get the Good Stuff\n\n**What it does:** It extracts only the main text from the article on the page, ignoring menus, footers, and images. Then, it cleans up the formatting.\n**Analogy:** The librarian tears out only the useful pages from the book and cleans up any smudges or messy handwriting."
            },
            "typeVersion": 1
          },
          {
            "id": "db1bc60f-46a4-40a8-96b4-2fdbb7fc8e5c",
            "cid": "Ikx1Y2FzIFBleXJpbiI",
            "name": "Sticky Note14",
            "type": "n8n-nodes-base.stickyNote",
            "notes": "¬© 2025 Lucas Peyrin",
            "creator": "Lucas Peyrin",
            "position": [
              2720,
              1248
            ],
            "parameters": {
              "color": 5,
              "width": 544,
              "height": 608,
              "content": "### Step 1.5.3: Avoid Re-reading\n\n**What it does:** It checks if we have already processed this exact page content in a previous run. If so, it stops here to save time and resources.\n**Analogy:** The librarian checks their \"already read\" pile to avoid reading the same book twice.\n\n**A Powerful Feature Explained:**\n\nUsually, the \"Remove Duplicates\" node only looks at the items in the *current* execution. But here, it's set to **\"Remove items seen in previous executions.\"**\n\nThis is incredibly powerful in a sub-workflow. Even though our sub-workflow only sees one page at a time, this node has a long-term memory. It remembers every single page it has *ever* processed across all previous runs.\n\nThis makes the workflow robust. You can run the indexing process again and again to update the knowledge base with new documentation, and it will never waste resources re-processing old pages or creating duplicate chunks in the in-memory store."
            },
            "typeVersion": 1
          },
          {
            "id": "14010f42-6221-4f38-bbe8-7db8b60a4308",
            "cid": "Ikx1Y2FzIFBleXJpbiI",
            "name": "Sticky Note15",
            "type": "n8n-nodes-base.stickyNote",
            "notes": "¬© 2025 Lucas Peyrin",
            "creator": "Lucas Peyrin",
            "position": [
              3280,
              1248
            ],
            "parameters": {
              "color": 6,
              "width": 656,
              "height": 1040,
              "content": "### Step 1.5.4: Create & Store the 'Magic Index Cards'\n\nThis is the most important step of indexing!\n\n1.  **`Recursive Character Text Splitter`:** The text is broken down into small, overlapping paragraphs (\"chunks\").\n    *   **Analogy:** The librarian breaks the book down into small, meaningful paragraphs. This is vital for finding very specific answers later.\n\n2.  **`OpenAI Embedding`:** An AI model converts each chunk of text into a list of numbers (a \"vector\" or \"embedding\").\n    *   **Analogy:** The librarian uses a 'magic pen' to turn each paragraph into a unique set of numbers. Paragraphs with similar meanings get similar numbers.\n\n3.  **`Simple Vector Store (Insert)`:** The original text chunk and its new vector are saved together in n8n's in-memory vector store.\n    *   **Analogy:** The librarian files the original paragraph along with its magic number on an index card and puts it in a special filing cabinet (the in-memory vector store).\n    *   **The `Memory Key`** in this node acts as a label for the filing cabinet, ensuring the chat flow can find it later."
            },
            "typeVersion": 1
          },
          {
            "id": "35c92a42-b5ad-4e87-b3a3-9d5c8446aabd",
            "cid": "Ikx1Y2FzIFBleXJpbiI",
            "name": "Sticky Note16",
            "type": "n8n-nodes-base.stickyNote",
            "notes": "¬© 2025 Lucas Peyrin",
            "creator": "Lucas Peyrin",
            "position": [
              1328,
              2352
            ],
            "parameters": {
              "color": 7,
              "width": 1200,
              "height": 1456,
              "content": "## Part 2: The Chatbot (Talking to the Expert Librarian)\n\n**Goal:** To provide an interface where a user can ask a question, have the system find relevant information from the knowledge base, and get an accurate, AI-generated answer.\n**Action:** After running the Indexing flow, **Activate** this workflow. Then, open the `When chat message received` node and use its Public URL to chat."
            },
            "typeVersion": 1
          },
          {
            "id": "80b158c2-7e0f-4fc2-ab4e-ed7ff6b19f78",
            "cid": "Ikx1Y2FzIFBleXJpbiI",
            "name": "Sticky Note17",
            "type": "n8n-nodes-base.stickyNote",
            "notes": "¬© 2025 Lucas Peyrin",
            "creator": "Lucas Peyrin",
            "position": [
              1360,
              2512
            ],
            "parameters": {
              "color": 4,
              "width": 368,
              "height": 448,
              "content": "### The Front Desk: Ask Your Question Here\n\n**What it does:** This is the public-facing chat interface. When you send a message here, the entire RAG process begins.\n\n**Action:**\n1.  **Activate** the entire workflow.\n2.  To test directly inside n8n, click the **\"Open Chat\"** button in this node's parameter panel.\n3.  To chat publicly, copy the **Public URL** from this node and open it in a new browser tab."
            },
            "typeVersion": 1
          },
          {
            "id": "6b1e818e-2834-434a-a2e6-34fab11f0355",
            "cid": "Ikx1Y2FzIFBleXJpbiI",
            "name": "Sticky Note18",
            "type": "n8n-nodes-base.stickyNote",
            "notes": "¬© 2025 Lucas Peyrin",
            "creator": "Lucas Peyrin",
            "position": [
              1744,
              2624
            ],
            "parameters": {
              "color": 5,
              "width": 560,
              "height": 400,
              "content": "### The Brains: The Expert Librarian\n\n**What it does:** This is the AI agent that orchestrates the entire response. It understands your question, decides which tools to use, and formulates the final answer.\n**System Prompt:** Its instructions (in the System Message) are very strict: **\"Only use the provided documents to answer. Do not make things up.\"**"
            },
            "typeVersion": 1
          },
          {
            "id": "b287613a-0b9d-4663-b389-cdab7066751a",
            "cid": "Ikx1Y2FzIFBleXJpbiI",
            "name": "Sticky Note19",
            "type": "n8n-nodes-base.stickyNote",
            "notes": "¬© 2025 Lucas Peyrin",
            "creator": "Lucas Peyrin",
            "position": [
              1360,
              2976
            ],
            "parameters": {
              "color": 7,
              "width": 368,
              "height": 592,
              "content": "### The 'Synthesizer' & 'Strategist'\n\n**What it does:** This is the Large Language Model (LLM). It has two critical jobs:\n\n1.  **The Strategist:** Based on your question and the conversation history, it decides *what information to look for* in the knowledge base (the library).\n2.  **The Synthesizer:** After getting the relevant documents, it generates the final, human-readable answer based *only* on that context.\n\n\n**Analogy:** This is the part of the librarian's brain that first decides which section of the library to search, and then reads the specific index cards to write a clear, helpful response.\n\nThe model used here is **GPT 4.1-nano**."
            },
            "typeVersion": 1
          },
          {
            "id": "7f2a8dd1-f702-4eec-b5e7-e7e93eb72201",
            "cid": "Ikx1Y2FzIFBleXJpbiI",
            "name": "Sticky Note20",
            "type": "n8n-nodes-base.stickyNote",
            "notes": "¬© 2025 Lucas Peyrin",
            "creator": "Lucas Peyrin",
            "position": [
              1744,
              3040
            ],
            "parameters": {
              "color": 7,
              "width": 288,
              "height": 528,
              "content": "### Short-Term Memory\n\n**What it does:** This node stores the last few messages of your conversation.\n**Analogy:** This helps the librarian remember what you just talked about, so you can ask follow-up questions without having to repeat yourself."
            },
            "typeVersion": 1
          },
          {
            "id": "fea370b3-4d87-4f6d-baf4-d59bffee633f",
            "cid": "Ikx1Y2FzIFBleXJpbiI",
            "name": "Sticky Note21",
            "type": "n8n-nodes-base.stickyNote",
            "notes": "¬© 2025 Lucas Peyrin",
            "creator": "Lucas Peyrin",
            "position": [
              2048,
              3040
            ],
            "parameters": {
              "color": 6,
              "width": 448,
              "height": 736,
              "content": "### The Tool: The 'Magic Filing Cabinet' Retriever\n\nThis is the \"Retrieval\" part of RAG. When the agent gets your question, it uses this tool to find the most relevant information.\n\n1.  **`OpenAI Query Embedding`:** Your question is converted into its own 'magic number' (vector).\n\n2.  **`Official n8n Documentation (Vector Store Retrieve)`:** It searches the in-memory vector store for the document chunks with the most similar 'magic numbers' to your question's number.\n\n\n**Analogy:** The librarian takes your question, finds the most relevant index cards from the filing cabinet, and hands them over to the 'Synthesizer' to formulate the answer."
            },
            "typeVersion": 1
          },
          {
            "id": "126b13aa-a2eb-4454-badb-fa97bf30d03b",
            "cid": "Ikx1Y2FzIFBleXJpbiI",
            "name": "Start Indexing",
            "type": "n8n-nodes-base.manualTrigger",
            "creator": "Lucas Peyrin",
            "position": [
              1680,
              912
            ],
            "parameters": {},
            "typeVersion": 1
          },
          {
            "id": "9cceee8c-9f01-44d4-9dfd-03e28c1d40f6",
            "cid": "Ikx1Y2FzIFBleXJpbiI",
            "name": "RAG Chatbot",
            "type": "@n8n/n8n-nodes-langchain.chatTrigger",
            "creator": "Lucas Peyrin",
            "position": [
              1520,
              2816
            ],
            "webhookId": "285e5d0b-ffcf-44e8-a80c-0683966b78a4",
            "parameters": {
              "public": true,
              "options": {
                "title": "",
                "subtitle": "",
                "customCss": "/* === THEME OVERRIDE: n8n Glass & Glow (Revised) === */\n\n/*\n  This theme is built upon the default n8n chat CSS variables.\n  We'll use your desired branding and layout, and then add\n  the \"glass\" effect using a semi-transparent background\n  and a backdrop-filter on the main window class.\n*/\n\n:root {\n  /* --- 1. CORE BRANDING & FONTS --- */\n  /* Your choices for font and primary color are applied here. */\n  --chat--font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\n  --chat--color-primary: #EA4B71; /* n8n Red */\n  --chat--color-primary-shade-50: #D93A60;\n  --chat--color-primary-shade-100: #C82A50;\n  --chat--color-secondary: #20b69e; /* Kept default secondary for things like file uploads */\n  --chat--color-secondary-shade-50: #1ca08a;\n  --chat--color-white: #ffffff;\n  --chat--color-light: #f2f4f8;\n  --chat--color-dark: #1F2937; /* Darker, more modern text color */\n  --chat--color-disabled: #9CA3AF;\n  --chat--color-typing: #404040;\n\n  /* --- 2. WINDOW & LAYOUT --- */\n  /* Your dimensions and rounded corners. The actual glass effect is handled in the class override below. */\n  --chat--window--width: 430px;\n  --chat--window--height: 80vh;\n  --chat--window--border-radius: 16px;\n  --chat--window--border: 1px solid rgba(255, 255, 255, 0.3);\n  --chat--spacing: 1rem; /* 16px base spacing */\n  --chat--window--z-index: 9999;\n  --chat--window--bottom: var(--chat--spacing);\n  --chat--window--right: var(--chat--spacing);\n  --chat--window--margin-bottom: var(--chat--spacing);\n\n  /* --- 3. GLASSMORPHISM BACKGROUNDS --- */\n  /* We make the main sections transparent to let the glass window show through. */\n  --chat--header--background: transparent;\n  --chat--body--background: transparent;\n  --chat--footer--background: transparent;\n\n  /* --- 4. HEADER STYLING (REMOVED) --- */\n  /* The header is removed by setting its height, padding, and border to 0/none. */\n  --chat--header-height: 0;\n  --chat--header--padding: 0;\n  --chat--header--border-bottom: none;\n  /* The rest of the header variables are now irrelevant. */\n  --chat--header--color: var(--chat--color-dark);\n  --chat--heading--font-size: 1.5rem;\n  --chat--subtitle--font-size: 0.875rem;\n  --chat--subtitle--line-height: 1.4;\n  --chat--close--button--color-hover: var(--chat--color-primary);\n\n  /* --- 5. MESSAGE BUBBLES --- */\n  --chat--message--font-size: 0.875rem;\n  --chat--message--padding: 12px 16px;\n  --chat--message--border-radius: 12px;\n  --chat--message-line-height: 1.6;\n  --chat--message--margin-bottom: calc(var(--chat--spacing) * 0.75);\n  /* Adjusted padding: Top is 0, sides and bottom use the base spacing. */\n  --chat--messages-list--padding: 0 var(--chat--spacing) var(--chat--spacing);\n  --chat--message--bot--background: var(--chat--color-white);\n  --chat--message--bot--color: #111827;\n  --chat--message--bot--border: none;\n  --chat--message--user--background: var(--chat--color-primary);\n  --chat--message--user--color: var(--chat--color-white);\n  --chat--message--user--border: none;\n\n  /* --- 6. INPUT AREA --- */\n  --chat--textarea--height: 50px;\n  --chat--textarea--max-height: 10rem;\n  --chat--input--font-size: 0.9rem;\n  --chat--input--border: 0;\n  --chat--input--border-radius: 12px; /* Rounded input field */\n  --chat--input--padding: 12px 16px;\n  --chat--input--background: rgba(255, 255, 255, 0.5); /* Semi-transparent input */\n  --chat--input--text-color: #111827;\n  --chat--input--line-height: 1.5;\n  --chat--input--border-active: 0;\n\n  /* --- 7. SEND & FILE BUTTONS --- */\n  --chat--input--send--button--background: transparent;\n  --chat--input--send--button--color: var(--chat--color-primary);\n  --chat--input--send--button--background-hover: transparent;\n  --chat--input--send--button--color-hover: var(--chat--color-primary-shade-50);\n  --chat--input--file--button--background: transparent;\n  --chat--input--file--button--color: var(--chat--color-secondary);\n  --chat--input--file--button--background-hover: transparent;\n  --chat--input--file--button--color-hover: var(--chat--color-secondary-shade-50);\n\n  /* --- 8. TOGGLE BUTTON & OTHERS --- */\n  /* Using your primary brand color for the main toggle button */\n  --chat--toggle--size: 64px;\n  --chat--toggle--width: var(--chat--toggle--size);\n  --chat--toggle--height: var(--chat--toggle--size);\n  --chat--toggle--border-radius: 50%;\n  --chat--toggle--background: var(--chat--color-primary);\n  --chat--toggle--hover--background: var(--chat--color-primary-shade-50);\n  --chat--toggle--active--background: var(--chat--color-primary-shade-100);\n  --chat--toggle--color: var(--chat--color-white);\n}\n\n/* === CLASS OVERRIDES === */\n/*\n  These are essential for effects that CSS variables can't control,\n  like the glass blur, shadows, and max-height.\n*/\n\n.chat-window {\n  /* This is the magic for the glass effect! */\n  background-color: rgba(249, 243, 245, 0.6); /* A semi-transparent background color */\n  backdrop-filter: blur(20px);\n  -webkit-backdrop-filter: blur(20px); /* For Safari compatibility */\n\n  /* A subtle shadow helps lift the window off the page */\n  box-shadow: 0 8px 32px 0 rgba(31, 38, 135, 0.1);\n\n  /* Here we apply the max-height you wanted */\n  max-height: 750px;\n}\n\n/* Add top margin to the first message only for initial spacing */\n.chat-messages-list .chat-message:first-child {\n  margin-top: var(--chat--spacing);\n}\n\n/* Make user messages slightly wider for better balance */\n.chat-message.is-user {\n\tmax-width: 70%;\n}\n\n.chat-message.is-bot {\n\tmax-width: 80%;\n}\n\n/* Add a subtle glow to messages on hover */\n.chat-message {\n    transition: transform 0.2s ease, box-shadow 0.2s ease;\n}\n.chat-message:hover {\n    transform: translateY(-2px);\n    box-shadow: 0 0 25px 0 rgba(234, 75, 113, 0.2);\n}\n\n/* === PAGE BACKGROUND === */\n/* Your dotted background to simulate the n8n canvas. Perfect as is! */\nbody {\n    background-color: #FDFBFF;\n    background-image:\n        radial-gradient(circle at 1px 1px, rgba(0,0,0,0.07) 1px, transparent 0),\n        linear-gradient(135deg, #F9F3F5 0%, #EFF3FB 100%);\n    background-size: 25px 25px, 100% 100%;\n}",
                "inputPlaceholder": "Type your n8n related question.."
              },
              "initialMessages": "Hello! I'm an AI assistant trained on the official n8n documentation.\nYou can ask me anything about n8n nodes, workflows, or concepts. For example:\n\"How does the IF node work?\"\n\"What is a sub-workflow?\""
            },
            "typeVersion": 1.1
          },
          {
            "id": "62f102ca-7c80-4b5c-b097-3f6383f2a6eb",
            "cid": "Ikx1Y2FzIFBleXJpbiI",
            "name": "Sticky Note1",
            "type": "n8n-nodes-base.stickyNote",
            "notes": "¬© 2025 Lucas Peyrin",
            "creator": "Lucas Peyrin",
            "position": [
              400,
              1600
            ],
            "parameters": {
              "width": 624,
              "height": 320,
              "content": "## Setup Step 4: Chat with Your Expert!\n\nCongratulations, the knowledge base is built! Now it's time to ask the expert a question.\n\n**Action:**\n1.  **Activate** the entire workflow using the toggle switch at the top of the screen.\n2.  Open the **`RAG Chatbot`** chat trigger node (bottom-left).\n3.  To chat:\n    *   Copy its **Public URL** and open it in a new browser tab.\n    *   OR, click the **\"Open Chat\"** button in the node's panel to test it directly inside n8n.\n\n\n**Try asking:** \"How does the IF node work?\" or \"What is a sub-workflow?\""
            },
            "typeVersion": 1
          },
          {
            "id": "4b82ed61-eee5-4a00-a8af-45157fa89cd6",
            "cid": "Ikx1Y2FzIFBleXJpbiI",
            "name": "Sticky Note24",
            "type": "n8n-nodes-base.stickyNote",
            "notes": "¬© 2025 Lucas Peyrin",
            "creator": "Lucas Peyrin",
            "position": [
              400,
              640
            ],
            "parameters": {
              "width": 656,
              "height": 272,
              "content": "## Setup Step 1: Connect Your Open AI Credentials\n\nThis workflow uses OpenAI' models for generating embeddings and chat responses. You'll need a OpenAI API key.\n\n**Action:**\n1.  Go to any of the OpenAI nodes (e.g., **`OpenAI Chat Model`**).\n2.  Click the **Credential** dropdown and select **`+ Create New Credential`**.\n3.  In the window that opens, paste your **OpenAI API Key**.\n4.  Click **Save**. Your new credential will be created and automatically selected for this node."
            },
            "typeVersion": 1
          },
          {
            "id": "ec88d605-9af4-4144-99a4-4f394a8703ab",
            "cid": "Ikx1Y2FzIFBleXJpbiI",
            "name": "Sticky Note27",
            "type": "n8n-nodes-base.stickyNote",
            "notes": "¬© 2025 Lucas Peyrin",
            "creator": "Lucas Peyrin",
            "position": [
              400,
              928
            ],
            "parameters": {
              "width": 864,
              "height": 304,
              "content": "## Setup Step 2: Apply Credentials to All GPT Nodes\n\nYour new OpenAI credential is now saved. Let's make sure all the other Gemini nodes are using it.\n\n**Action:**\nGo to the remaining Gemini nodes on the canvas. Your new credential will now be available in their **Credential** dropdown lists. Simply select it for each one.\n\n**Nodes to check:**\n*   `OpenAI Chat Model`\n*   `Embeddings OpenAI`\n*   `Embeddings OpenAI`"
            },
            "typeVersion": 1
          },
          {
            "id": "c6da61a2-5ad4-4263-af1e-a40603fb4654",
            "cid": "Ikx1Y2FzIFBleXJpbiI",
            "name": "Sticky Note28",
            "type": "n8n-nodes-base.stickyNote",
            "notes": "¬© 2025 Lucas Peyrin",
            "creator": "Lucas Peyrin",
            "position": [
              400,
              1248
            ],
            "parameters": {
              "width": 784,
              "height": 336,
              "content": "## Setup Step 3: Build the Knowledge Base (Indexing)\n\nThis is the one-time step where the AI \"reads\" all the documentation.\n\n**Action:**\n1.  Find the **`Start Indexing`** manual trigger node at the top-left of the canvas.\n2.  Click its **\"Execute workflow\"** button.\n\n\n**‚ö†Ô∏è IMPORTANT:**\n*   **Be Patient!** This process will take **15-20 minutes** to scrape, process, and store the entire n8n documentation in memory.\n*   **The knowledge base is temporary.** It is stored in n8n's memory and will be **erased if you restart your n8n instance**. If that happens, you must run this indexing step again."
            },
            "typeVersion": 1
          },
          {
            "id": "15b0b258-5fa3-4084-a312-7a8b8f9d420c",
            "cid": "Ikx1Y2FzIFBleXJpbiI",
            "name": "Ingest Web Page",
            "type": "n8n-nodes-base.executeWorkflowTrigger",
            "notes": "¬© 2025 Lucas Peyrin",
            "creator": "Lucas Peyrin",
            "position": [
              1680,
              1680
            ],
            "parameters": {
              "workflowInputs": {
                "values": [
                  {
                    "name": "path"
                  }
                ]
              }
            },
            "typeVersion": 1.1
          },
          {
            "id": "14d75d60-9364-454f-9903-f523a3532e4c",
            "cid": "Ikx1Y2FzIFBleXJpbiI",
            "name": "Simple Vector Store",
            "type": "@n8n/n8n-nodes-langchain.vectorStoreInMemory",
            "creator": "Lucas Peyrin",
            "position": [
              3472,
              1680
            ],
            "parameters": {
              "mode": "insert",
              "memoryKey": {
                "__rl": true,
                "mode": "id",
                "value": "n8n_documentation_vector_store"
              },
              "embeddingBatchSize": 30
            },
            "typeVersion": 1.3
          },
          {
            "id": "5ef1d0ac-137f-4b20-a9e0-150f2a36944c",
            "cid": "Ikx1Y2FzIFBleXJpbiI",
            "name": "Official n8n Documentation",
            "type": "@n8n/n8n-nodes-langchain.vectorStoreInMemory",
            "creator": "Lucas Peyrin",
            "position": [
              2128,
              3424
            ],
            "parameters": {
              "mode": "retrieve-as-tool",
              "topK": 10,
              "memoryKey": {
                "__rl": true,
                "mode": "id",
                "value": "=n8n_documentation_vector_store"
              },
              "toolDescription": "Get related chunks of the official n8n documentation.",
              "includeDocumentMetadata": false
            },
            "typeVersion": 1.3
          },
          {
            "id": "c508f6fd-68ea-4e65-9f57-2a1476baf0c6",
            "name": "Embeddings OpenAI",
            "type": "@n8n/n8n-nodes-langchain.embeddingsOpenAi",
            "position": [
              3392,
              1888
            ],
            "parameters": {
              "options": {}
            },
            "credentials": {
              "openAiApi": {
                "id": "DTF8OQIcI5iP0YR4",
                "name": "OpenAi account"
              }
            },
            "typeVersion": 1.2
          },
          {
            "id": "4674c996-c9f2-4c14-b27d-73f0aa5ce0d2",
            "name": "OpenAI Chat Model",
            "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
            "position": [
              1488,
              3440
            ],
            "parameters": {
              "model": {
                "__rl": true,
                "mode": "list",
                "value": "gpt-4.1-nano",
                "cachedResultName": "gpt-4.1-nano"
              },
              "options": {}
            },
            "credentials": {
              "openAiApi": {
                "id": "DTF8OQIcI5iP0YR4",
                "name": "OpenAi account"
              }
            },
            "typeVersion": 1.2
          },
          {
            "id": "02480036-e68b-452e-a5c3-a7414021d678",
            "name": "Embeddings OpenAI1",
            "type": "@n8n/n8n-nodes-langchain.embeddingsOpenAi",
            "position": [
              2224,
              3632
            ],
            "parameters": {
              "options": {}
            },
            "credentials": {
              "openAiApi": {
                "id": "DTF8OQIcI5iP0YR4",
                "name": "OpenAi account"
              }
            },
            "typeVersion": 1.2
          }
        ],
        "active": true,
        "pinData": {},
        "settings": {
          "executionOrder": "v1"
        },
        "versionId": "59702c6f-70d1-4136-95ac-361964031c94",
        "connections": {
          "RAG Chatbot": {
            "main": [
              [
                {
                  "node": "n8n Docs AI Agent",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          },
          "Simple Memory": {
            "ai_memory": [
              [
                {
                  "node": "n8n Docs AI Agent",
                  "type": "ai_memory",
                  "index": 0
                }
              ]
            ]
          },
          "Start Indexing": {
            "main": [
              [
                {
                  "node": "Get All n8n Documentation Links",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          },
          "Ingest Web Page": {
            "main": [
              [
                {
                  "node": "Get Documentation Page",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          },
          "Split Out Links": {
            "main": [
              [
                {
                  "node": "Remove Duplicate Links",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          },
          "Embeddings OpenAI": {
            "ai_embedding": [
              [
                {
                  "node": "Simple Vector Store",
                  "type": "ai_embedding",
                  "index": 0
                }
              ]
            ]
          },
          "OpenAI Chat Model": {
            "ai_languageModel": [
              [
                {
                  "node": "n8n Docs AI Agent",
                  "type": "ai_languageModel",
                  "index": 0
                }
              ]
            ]
          },
          "Embeddings OpenAI1": {
            "ai_embedding": [
              [
                {
                  "node": "Official n8n Documentation",
                  "type": "ai_embedding",
                  "index": 0
                }
              ]
            ]
          },
          "Clean Documentation": {
            "main": [
              [
                {
                  "node": "Remove Duplicate Documentation Content",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          },
          "Default Data Loader": {
            "ai_document": [
              [
                {
                  "node": "Simple Vector Store",
                  "type": "ai_document",
                  "index": 0
                }
              ]
            ]
          },
          "Only Keep Doc Paths": {
            "main": [
              [
                {
                  "node": "Loop Over Documentation Pages",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          },
          "Get Documentation Page": {
            "main": [
              [
                {
                  "node": "Extract Documentation Content",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          },
          "Remove Duplicate Links": {
            "main": [
              [
                {
                  "node": "Only Keep Doc Paths",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          },
          "Extract Links from HTML": {
            "main": [
              [
                {
                  "node": "Split Out Links",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          },
          "Official n8n Documentation": {
            "ai_tool": [
              [
                {
                  "node": "n8n Docs AI Agent",
                  "type": "ai_tool",
                  "index": 0
                }
              ]
            ]
          },
          "Extract Documentation Content": {
            "main": [
              [
                {
                  "node": "Clean Documentation",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          },
          "Loop Over Documentation Pages": {
            "main": [
              [],
              [
                {
                  "node": "Add Documentation Page to Vector Store",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          },
          "Get All n8n Documentation Links": {
            "main": [
              [
                {
                  "node": "Extract Links from HTML",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          },
          "Recursive Character Text Splitter": {
            "ai_textSplitter": [
              [
                {
                  "node": "Default Data Loader",
                  "type": "ai_textSplitter",
                  "index": 0
                }
              ]
            ]
          },
          "Add Documentation Page to Vector Store": {
            "main": [
              [
                {
                  "node": "Loop Over Documentation Pages",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          },
          "Remove Duplicate Documentation Content": {
            "main": [
              [
                {
                  "node": "Simple Vector Store",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          }
        }
      }
    },
    {
      "id": 7756,
      "name": "Nutrition Tracker & Meal Logger with Telegram, Gemini AI and Google Sheets",
      "description": "# ü§ñü•ó Telegram Nutrition AI Assistant (Alternative to Cal AI App)\n\n&gt; AI-powered nutrition assistant for Telegram ‚Äî log meals, set goals, and get personalized daily reports with Google Sheets integration.\n\n## üìã Description\n\nThis n8n template creates a **Telegram-based Nutrition AI Assistant** ü•ëüî• designed as an **open-source alternative to the Cal AI mobile app**.\nIt allows users to interact with an AI agent via text, voice, or images to track meals, calculate macros, and monitor nutrition goals directly from Telegram.\n\nThe system integrates **Google Sheets** as the database, handling both user profiles and meal logs, while leveraging **Gemini AI** for natural conversation, food recognition, and daily progress reports.\n\n## ‚ú® Key Features\n\n* üí¨ **Multi-input support**: Text, voice messages (transcribed), and food images (AI analysis).\n* üìä **Macro calculation**: Automatic estimation of calories, proteins, carbs, and fats.\n* üìù **User-friendly registration**: Simple onboarding without storing personal health data (no weight/height required).\n* üéØ **Goal tracking**: Users can set and update calorie and protein targets.\n* üìà **Daily reports**: Personalized progress messages with visual progress bars.\n* üóÇ **Google Sheets integration**:\n\n  * `Profile` table for user targets.\n  * `Meals` table for food logs.\n* üîÑ **Advanced n8n nodes**: Includes use of `Merge`, `Subworkflow`, and `Code` nodes for data processing and report generation.\n\n## üí° Acknowledgment\n\nInspired by the Cal AI concept üí° ‚Äî this template demonstrates how to reproduce its main functionality with **n8n, Telegram, and AI agents** as a flexible, open-source automation workflow.\n\n## üè∑ Tags\n\n* `telegram`\n* `ai-assistant`\n* `nutrition`\n* `meal-tracking`\n* `google-sheets`\n* `food-logging`\n* `voice-transcription`\n* `image-analysis`\n* `daily-reports`\n* `n8n-template`\n* `merge-node`\n* `subworkflow-node`\n* `code-node`\n* `telegram-trigger`\n* `google-gemini`\n\n## üíº Use Case\n\nUse this template if you want to:\n\n* ü•ó Log meals using **text, images, or voice messages**.\n* üìä Track nutrition goals (calories, proteins) with daily progress updates.\n* ü§ñ Provide a **chat-based nutrition assistant** without building a full app.\n* üóÇ Store structured nutrition data in **Google Sheets** for easy access and analysis.\n\n## üí¨ Example User Interactions\n\n* üì∏ User sends a photo of a meal ‚Üí AI analyzes the food and logs calories/macros.\n* üé§ User sends a voice message ‚Üí AI transcribes and logs the meal.\n* ‚å®Ô∏è User types ‚Äúreport‚Äù ‚Üí AI returns a daily nutrition summary with progress bars.\n* ü•Ö User says ‚Äúupdate my protein goal‚Äù ‚Üí AI updates profile in Google Sheets.\n\n## üîë Required Credentials\n\n* Telegram Bot API (Bot Token)\n* Google Sheets API credentials\n* AI Provider API (Google Gemini or compatible LLM)\n\n## ‚öôÔ∏è Setup Instructions\n\n1. üóÇ Create two Google Sheets tables:\n\n   * **Profile**: `User_ID, Name, Calories_target, Protein_target`\n   * **Meals**: `User_ID, Date, Meal_description, Calories, Proteins, Carbs, Fats`\n2. üîå Configure the Telegram Trigger with your bot token.\n3. ü§ñ Connect your AI provider credentials (Gemini recommended).\n4. üìë Connect Google Sheets with your credentials.\n5. ‚ñ∂Ô∏è Deploy the workflow in n8n.\n6. üéØ Start interacting with your nutrition assistant via Telegram.\n\n## üìå Extra Notes\n\n* üü© **Green section**: Handles Telegram trigger and user check.\n* üü• **Red section**: Registers new users and sets goals.\n* üü¶ **Blue section**: Processes text, voice, and images.\n* üü® **Yellow section**: Generates nutrition reports.\n* üü™ **Purple section**: Main AI agent controlling tools and logic.\n\n---\n\n## üí° Need Assistance?\n\nIf you‚Äôd like help customizing or extending this workflow, feel free to reach out:  \n\nüìß Email: [johnsilva11031@gmail.com](mailto:johnsilva11031@gmail.com)  \nüîó LinkedIn: [John Alejandro Silva Rodr√≠guez](https://www.linkedin.com/in/john-alejandro-silva-rodriguez-48093526b/)\n",
      "totalViews": 17186,
      "createdAt": "2025-08-23T04:41:29.296Z",
      "author": "alejandro-silva",
      "nodeTypes": [
        "n8n-nodes-base.telegram",
        "n8n-nodes-base.switch",
        "n8n-nodes-base.set",
        "@n8n/n8n-nodes-langchain.googleGemini",
        "n8n-nodes-base.code",
        "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
        "@n8n/n8n-nodes-langchain.memoryBufferWindow",
        "n8n-nodes-base.if",
        "n8n-nodes-base.googleSheets",
        "n8n-nodes-base.googleSheetsTool",
        "@n8n/n8n-nodes-langchain.agent",
        "@n8n/n8n-nodes-langchain.toolWorkflow",
        "n8n-nodes-base.executeWorkflowTrigger",
        "n8n-nodes-base.telegramTrigger",
        "n8n-nodes-base.merge"
      ],
      "nodeCount": 63,
      "connectionCount": 36,
      "categories": [
        "AI Chatbot",
        "Multimodal AI"
      ],
      "workflowJson": {
        "meta": {
          "instanceId": "d27015e9046c7ff6d98d0dc45662e45d88471b605f658807838aa27a29d81bee",
          "templateId": "7756",
          "templateCredsSetupCompleted": true
        },
        "nodes": [
          {
            "id": "c142f5dd-fbeb-4b25-a0fe-f684546e6eff",
            "name": "Download Voice Message",
            "type": "n8n-nodes-base.telegram",
            "position": [
              2144,
              1072
            ],
            "webhookId": "d3e9d36d-6402-45d6-9f56-5886e616f9fa",
            "parameters": {
              "fileId": "={{ $('Telegram Trigger').item.json.message.voice.file_id }}",
              "resource": "file",
              "additionalFields": {}
            },
            "credentials": {
              "telegramApi": {
                "id": "yxDk2RnbewqwPdMO",
                "name": "Pruebas"
              }
            },
            "typeVersion": 1.2
          },
          {
            "id": "e15bb617-61da-4620-936d-15b0b5cf9c59",
            "name": "Input Message Router1",
            "type": "n8n-nodes-base.switch",
            "position": [
              1776,
              1136
            ],
            "parameters": {
              "rules": {
                "values": [
                  {
                    "outputKey": "Text",
                    "conditions": {
                      "options": {
                        "version": 2,
                        "leftValue": "",
                        "caseSensitive": true,
                        "typeValidation": "strict"
                      },
                      "combinator": "and",
                      "conditions": [
                        {
                          "id": "fcb767ee-565e-4b56-a54e-6f97f739fc24",
                          "operator": {
                            "type": "string",
                            "operation": "exists",
                            "singleValue": true
                          },
                          "leftValue": "={{ $('Telegram Trigger').item.json.message.text }}",
                          "rightValue": ""
                        }
                      ]
                    },
                    "renameOutput": true
                  },
                  {
                    "outputKey": "Voice Message",
                    "conditions": {
                      "options": {
                        "version": 2,
                        "leftValue": "",
                        "caseSensitive": true,
                        "typeValidation": "strict"
                      },
                      "combinator": "and",
                      "conditions": [
                        {
                          "id": "c1016c40-f8f2-4e08-8ec8-5cdb88f5c87a",
                          "operator": {
                            "type": "object",
                            "operation": "exists",
                            "singleValue": true
                          },
                          "leftValue": "={{ $('Telegram Trigger').item.json.message.voice }}",
                          "rightValue": ""
                        }
                      ]
                    },
                    "renameOutput": true
                  },
                  {
                    "outputKey": "Image",
                    "conditions": {
                      "options": {
                        "version": 2,
                        "leftValue": "",
                        "caseSensitive": true,
                        "typeValidation": "strict"
                      },
                      "combinator": "and",
                      "conditions": [
                        {
                          "id": "f8150ac7-eea4-4658-8da9-f7a1c88a471d",
                          "operator": {
                            "type": "string",
                            "operation": "exists",
                            "singleValue": true
                          },
                          "leftValue": "={{ $('Telegram Trigger').item.json.message.photo[0].file_id }}",
                          "rightValue": ""
                        }
                      ]
                    },
                    "renameOutput": true
                  }
                ]
              },
              "options": {
                "ignoreCase": false,
                "fallbackOutput": "extra",
                "allMatchingOutputs": true
              }
            },
            "typeVersion": 3.2
          },
          {
            "id": "68f15a08-cbe2-4ad9-9cfe-8b7a7c60787c",
            "name": "get_message (text)",
            "type": "n8n-nodes-base.set",
            "position": [
              2144,
              912
            ],
            "parameters": {
              "options": {},
              "assignments": {
                "assignments": [
                  {
                    "id": "801ec600-22ad-4a94-a2b4-ae72eb271df0",
                    "name": "message",
                    "type": "string",
                    "value": "={{ $('Telegram Trigger').item.json.message.text }}"
                  },
                  {
                    "id": "263071fb-bcdf-42b0-bb46-71b75fa0bf2a",
                    "name": "chat_id",
                    "type": "string",
                    "value": "={{ $('Telegram Trigger').item.json.message.chat.id }}"
                  }
                ]
              }
            },
            "typeVersion": 3.4
          },
          {
            "id": "6561a9a0-2d00-424d-ba86-8852dcb7e935",
            "name": "Download IMAGE",
            "type": "n8n-nodes-base.telegram",
            "position": [
              2144,
              1248
            ],
            "webhookId": "b4a21f4c-e6a6-4c83-9e8e-af73cb7cc96a",
            "parameters": {
              "fileId": "={{ $('Telegram Trigger').item.json.message.photo[3]?.file_id || $('Telegram Trigger').item.json.message.photo[2]?.file_id || $('Telegram Trigger').item.json.message.photo[1]?.file_id }}",
              "resource": "file",
              "additionalFields": {}
            },
            "credentials": {
              "telegramApi": {
                "id": "yxDk2RnbewqwPdMO",
                "name": "Pruebas"
              }
            },
            "typeVersion": 1.2
          },
          {
            "id": "b975dcce-68d8-4e3d-b50e-330f3f63812d",
            "name": "Analyze image",
            "type": "@n8n/n8n-nodes-langchain.googleGemini",
            "position": [
              2480,
              1248
            ],
            "parameters": {
              "text": "=You are a Nutrition Vision Assistant. Think like a food scientist and registered dietitian. Reason silently and do not reveal your steps. From a single food photo, identify the meal components, estimate portion weight in grams per component using geometric/visual cues, then compute total calories, protein, carbs, and fat.\n\nEstimation method (internal only; do not output these steps)\n\nIdentify components: list the main foods (e.g., chicken breast, white rice, mixed salad, sauce).\n\nChoose references: map each component to a standard reference food.\n\nEstimate volume/size: use visible objects for scale (plate ‚âà 27 cm diameter, fork tines ‚âà 3.5 cm, spoon bowl ‚âà 5‚Äì6 cm). Approximate shapes (cuboid, cylinder, dome) to get volume in ml (‚âà cm¬≥).\n\nConvert to grams (densities, g/ml): meats 1.05; cooked rice 0.66; cooked pasta 0.60; potato/solid starchy veg 0.80; leafy salad 0.15; sauces creamy 1.00; oils 0.91. If the image clearly suggests deep-fried or glossy/oily coating, account for added oil.\n\nMacros & energy per 100 g (reference values):\n\nWhite rice, cooked: 130 kcal, P 2.7, C 28, F 0.3\n\nPasta, cooked: 131 kcal, P 5.0, C 25, F 1.1\n\nChicken breast, cooked skinless: 165 kcal, P 31, C 0, F 3.6\n\nSalmon, cooked: 208 kcal, P 20, C 0, F 13\n\nLean ground beef (‚âà10% fat), cooked: 217 kcal, P 26, C 0, F 12\n\nBlack beans, cooked: 132 kcal, P 8.9, C 23.7, F 0.5\n\nPotato, baked: 93 kcal, P 2.5, C 21, F 0.1\n\nLettuce/leafy salad: 15 kcal, P 1.4, C 2.9, F 0.2\n\nAvocado: 160 kcal, P 2, C 9, F 15\n\nBread (white): 265 kcal, P 9, C 49, F 3.2\n\nEgg, cooked: 155 kcal, P 13, C 1.1, F 11\n\nCheddar cheese: 403 kcal, P 25, C 1.3, F 33\n\nOlive oil: 884 kcal, P 0, C 0, F 100\n(If a food is not listed, pick the closest standard equivalent.)\n\nHidden oil & sauces: if pan-fried or visibly glossy, add ~1 tablespoon oil = 13.5 g = 120 kcal = 13.5 g fat per clearly coated serving; adjust by visual coverage.\n\nSum totals: compute grams per component √ó (per-100 g macros/energy) and add all components.\n\nValidation: enforce Calories ‚âà 4√óProtein + 4√óCarbs + 9√óFat. If off by >8%, adjust fat first (oil/sauce most variable), then carbs (starches), keeping protein consistent with visible lean mass.\n\nRounding: round all final totals to integers. Never output ranges or decimals.\n\nOutput rules (must follow exactly)\n\nPlain text only.\n\nUse this exact structure and field order.\n\nValues are numbers only (no units, no ‚Äúg‚Äù or ‚Äúkcal‚Äù), no extra text, no JSON, no notes.\n\nMeal Description: [short description]\nCalories: [number]\nProteins: [number]\nCarbs: [number]\nFat: [number]",
              "modelId": {
                "__rl": true,
                "mode": "list",
                "value": "models/gemini-2.5-pro",
                "cachedResultName": "models/gemini-2.5-pro"
              },
              "options": {},
              "resource": "image",
              "inputType": "binary",
              "operation": "analyze"
            },
            "credentials": {
              "googlePalmApi": {
                "id": "IrGmkWole0gsi1H8",
                "name": "Google Gemini(PaLM) Api account"
              }
            },
            "typeVersion": 1
          },
          {
            "id": "04b43855-1600-424d-a2ae-458fb72a0525",
            "name": "Analyze voice message",
            "type": "@n8n/n8n-nodes-langchain.googleGemini",
            "position": [
              2480,
              1072
            ],
            "parameters": {
              "text": "What's in this audio message from telegram user?",
              "modelId": {
                "__rl": true,
                "mode": "list",
                "value": "models/gemini-2.5-pro",
                "cachedResultName": "models/gemini-2.5-pro"
              },
              "options": {},
              "resource": "audio",
              "inputType": "binary",
              "operation": "analyze"
            },
            "credentials": {
              "googlePalmApi": {
                "id": "IrGmkWole0gsi1H8",
                "name": "Google Gemini(PaLM) Api account"
              }
            },
            "typeVersion": 1
          },
          {
            "id": "3d5d43cc-4639-4d46-a095-b6de79d3aede",
            "name": "get_message (Audio/Video message)",
            "type": "n8n-nodes-base.set",
            "position": [
              2656,
              1072
            ],
            "parameters": {
              "options": {},
              "assignments": {
                "assignments": [
                  {
                    "id": "d8935452-fe20-469d-a68d-1aad056cb8dd",
                    "name": "message",
                    "type": "string",
                    "value": "=Voice message description:{{ $json.candidates?.[0]?.content?.parts?.[0]?.text || $json.content?.parts?.[0]?.text }}"
                  },
                  {
                    "id": "93f1bba1-1180-404a-93ca-c34cf1d1b7ac",
                    "name": "chat_id",
                    "type": "string",
                    "value": "={{ $('Telegram Trigger').item.json.message.chat.id }}"
                  }
                ]
              }
            },
            "typeVersion": 3.4
          },
          {
            "id": "60e92d69-3fd6-4311-ba91-ea445adf9727",
            "name": "get_message (Media  message)",
            "type": "n8n-nodes-base.set",
            "position": [
              2656,
              1248
            ],
            "parameters": {
              "options": {},
              "assignments": {
                "assignments": [
                  {
                    "id": "d8935452-fe20-469d-a68d-1aad056cb8dd",
                    "name": "message",
                    "type": "string",
                    "value": "=Content:\n{{ $json.content.parts[0].text }}"
                  },
                  {
                    "id": "53e34499-7dad-4f94-aa7d-f778321f13f4",
                    "name": "chat_id",
                    "type": "string",
                    "value": "={{ $('Telegram Trigger').item.json.message.chat.id }}"
                  }
                ]
              }
            },
            "typeVersion": 3.4
          },
          {
            "id": "563fd16d-25d2-4496-94eb-d6a8be600e92",
            "name": "Typing‚Ä¶",
            "type": "n8n-nodes-base.telegram",
            "position": [
              1296,
              1040
            ],
            "webhookId": "412793ca-7cad-4a84-acea-98debbbfa2ac",
            "parameters": {
              "chatId": "={{ $json.message.chat.id }}",
              "operation": "sendChatAction"
            },
            "credentials": {
              "telegramApi": {
                "id": "yxDk2RnbewqwPdMO",
                "name": "Pruebas"
              }
            },
            "typeVersion": 1.2
          },
          {
            "id": "a07eaf7d-8e67-41c8-b5bd-367fbc5917f1",
            "name": "Fix mime",
            "type": "n8n-nodes-base.code",
            "position": [
              2320,
              1072
            ],
            "parameters": {
              "jsCode": "// --- Mapa Extendido de Tipos MIME ---\n// Una lista completa para cubrir la mayor√≠a de los formatos de archivo comunes.\nconst mimeMap = {\n  // --- Formatos de Documentos ---\n  'pdf': 'application/pdf',\n  'txt': 'text/plain',\n  'rtf': 'application/rtf',\n  'csv': 'text/csv',\n  'html': 'text/html',\n  'htm': 'text/html',\n  'json': 'application/json',\n  'xml': 'application/xml', // 'text/xml' tambi√©n es v√°lido pero 'application/xml' es m√°s com√∫n\n  'yaml': 'application/x-yaml',\n  'yml': 'application/x-yaml',\n\n  // --- Formatos de Microsoft Office ---\n  'doc': 'application/msword',\n  'docx': 'application/vnd.openxmlformats-officedocument.wordprocessingml.document',\n  'xls': 'application/vnd.ms-excel',\n  'xlsx': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n  'ppt': 'application/vnd.ms-powerpoint',\n  'pptx': 'application/vnd.openxmlformats-officedocument.presentationml.presentation',\n  'pub': 'application/vnd.ms-publisher',\n\n  // --- Formatos de OpenOffice / LibreOffice ---\n  'odt': 'application/vnd.oasis.opendocument.text',\n  'ods': 'application/vnd.oasis.opendocument.spreadsheet',\n  'odp': 'application/vnd.oasis.opendocument.presentation',\n  'odg': 'application/vnd.oasis.opendocument.graphics',\n\n  // --- Formatos de Apple iWork ---\n  'pages': 'application/vnd.apple.pages',\n  'numbers': 'application/vnd.apple.numbers',\n  'key': 'application/vnd.apple.keynote',\n\n  // --- Formatos de Imagen ---\n  'png': 'image/png',\n  'jpg': 'image/jpeg',\n  'jpeg': 'image/jpeg',\n  'gif': 'image/gif',\n  'webp': 'image/webp',\n  'svg': 'image/svg+xml',\n  'bmp': 'image/bmp',\n  'ico': 'image/vnd.microsoft.icon',\n  'tif': 'image/tiff',\n  'tiff': 'image/tiff',\n  'heic': 'image/heic',\n  'heif': 'image/heif',\n\n  // --- Formatos de Audio ---\n  'mp3': 'audio/mpeg',\n  'wav': 'audio/wav',\n  'oga': 'audio/ogg',\n  'ogg': 'audio/ogg',\n  'flac': 'audio/flac',\n  'm4a': 'audio/mp4',\n  'aac': 'audio/aac',\n  'opus': 'audio/opus',\n  'wma': 'audio/x-ms-wma',\n  'mid': 'audio/midi',\n  'midi': 'audio/midi',\n\n  // --- Formatos de Video ---\n  'mp4': 'video/mp4',\n  'mov': 'video/quicktime',\n  'webm': 'video/webm',\n  'mpeg': 'video/mpeg',\n  'mpg': 'video/mpeg',\n  'avi': 'video/x-msvideo',\n  'wmv': 'video/x-ms-wmv',\n  'flv': 'video/x-flv',\n  'mkv': 'video/x-matroska',\n\n  // --- Formatos de Archivos y Compresi√≥n ---\n  'zip': 'application/zip',\n  'rar': 'application/vnd.rar',\n  '7z': 'application/x-7z-compressed',\n  'tar': 'application/x-tar',\n  'gz': 'application/gzip',\n  'bz2': 'application/x-bzip2',\n\n  // --- Otros Formatos ---\n  'epub': 'application/epub+zip',\n  'ics': 'text/calendar',\n  'vcf': 'text/vcard',\n  'js': 'text/javascript',\n  'css': 'text/css',\n  'sh': 'application/x-sh',\n  'py': 'text/x-python',\n};\n\n// --- L√≥gica de Procesamiento (sin cambios) ---\n\n// Obtenemos todos los items que llegan al nodo\nconst items = $input.all();\n\n// Iteramos sobre cada item para procesarlo\nfor (const item of items) {\n  // Verificamos que el item tenga datos binarios para procesar\n  if (item.binary && item.binary['data']) {\n    // Obtenemos el nombre del archivo de forma segura\n    const fileName = item.binary['data'].fileName || '';\n    if (!fileName) {\n      continue; // Si no hay nombre de archivo, pasamos al siguiente item\n    }\n\n    // Extraemos la extensi√≥n del archivo de forma robusta\n    const extension = fileName.slice((fileName.lastIndexOf(\".\") - 1 >>> 0) + 2).toLowerCase();\n\n    // Buscamos la extensi√≥n en nuestro mapa\n    const newMimeType = mimeMap[extension];\n\n    // Si encontramos una coincidencia en el mapa, actualizamos el mimeType\n    if (newMimeType) {\n      if(item.binary['data'].mimeType !== newMimeType) {\n        console.log(`Cambiando mimeType para '${fileName}' de '${item.binary['data'].mimeType}' a '${newMimeType}'.`);\n        item.binary['data'].mimeType = newMimeType;\n      }\n    }\n  }\n}\n\n// Devolvemos todos los items, modificados o no\nreturn items;"
            },
            "typeVersion": 2
          },
          {
            "id": "96ff38b5-261b-4359-bfec-8f48db43c005",
            "name": "Fix mime5",
            "type": "n8n-nodes-base.code",
            "position": [
              2320,
              1248
            ],
            "parameters": {
              "jsCode": "// --- Mapa Extendido de Tipos MIME ---\n// Una lista completa para cubrir la mayor√≠a de los formatos de archivo comunes.\nconst mimeMap = {\n  // --- Formatos de Documentos ---\n  'pdf': 'application/pdf',\n  'txt': 'text/plain',\n  'rtf': 'application/rtf',\n  'csv': 'text/csv',\n  'html': 'text/html',\n  'htm': 'text/html',\n  'json': 'application/json',\n  'xml': 'application/xml', // 'text/xml' tambi√©n es v√°lido pero 'application/xml' es m√°s com√∫n\n  'yaml': 'application/x-yaml',\n  'yml': 'application/x-yaml',\n\n  // --- Formatos de Microsoft Office ---\n  'doc': 'application/msword',\n  'docx': 'application/vnd.openxmlformats-officedocument.wordprocessingml.document',\n  'xls': 'application/vnd.ms-excel',\n  'xlsx': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n  'ppt': 'application/vnd.ms-powerpoint',\n  'pptx': 'application/vnd.openxmlformats-officedocument.presentationml.presentation',\n  'pub': 'application/vnd.ms-publisher',\n\n  // --- Formatos de OpenOffice / LibreOffice ---\n  'odt': 'application/vnd.oasis.opendocument.text',\n  'ods': 'application/vnd.oasis.opendocument.spreadsheet',\n  'odp': 'application/vnd.oasis.opendocument.presentation',\n  'odg': 'application/vnd.oasis.opendocument.graphics',\n\n  // --- Formatos de Apple iWork ---\n  'pages': 'application/vnd.apple.pages',\n  'numbers': 'application/vnd.apple.numbers',\n  'key': 'application/vnd.apple.keynote',\n\n  // --- Formatos de Imagen ---\n  'png': 'image/png',\n  'jpg': 'image/jpeg',\n  'jpeg': 'image/jpeg',\n  'gif': 'image/gif',\n  'webp': 'image/webp',\n  'svg': 'image/svg+xml',\n  'bmp': 'image/bmp',\n  'ico': 'image/vnd.microsoft.icon',\n  'tif': 'image/tiff',\n  'tiff': 'image/tiff',\n  'heic': 'image/heic',\n  'heif': 'image/heif',\n\n  // --- Formatos de Audio ---\n  'mp3': 'audio/mpeg',\n  'wav': 'audio/wav',\n  'oga': 'audio/ogg',\n  'ogg': 'audio/ogg',\n  'flac': 'audio/flac',\n  'm4a': 'audio/mp4',\n  'aac': 'audio/aac',\n  'opus': 'audio/opus',\n  'wma': 'audio/x-ms-wma',\n  'mid': 'audio/midi',\n  'midi': 'audio/midi',\n\n  // --- Formatos de Video ---\n  'mp4': 'video/mp4',\n  'mov': 'video/quicktime',\n  'webm': 'video/webm',\n  'mpeg': 'video/mpeg',\n  'mpg': 'video/mpeg',\n  'avi': 'video/x-msvideo',\n  'wmv': 'video/x-ms-wmv',\n  'flv': 'video/x-flv',\n  'mkv': 'video/x-matroska',\n\n  // --- Formatos de Archivos y Compresi√≥n ---\n  'zip': 'application/zip',\n  'rar': 'application/vnd.rar',\n  '7z': 'application/x-7z-compressed',\n  'tar': 'application/x-tar',\n  'gz': 'application/gzip',\n  'bz2': 'application/x-bzip2',\n\n  // --- Otros Formatos ---\n  'epub': 'application/epub+zip',\n  'ics': 'text/calendar',\n  'vcf': 'text/vcard',\n  'js': 'text/javascript',\n  'css': 'text/css',\n  'sh': 'application/x-sh',\n  'py': 'text/x-python',\n};\n\n// --- L√≥gica de Procesamiento (sin cambios) ---\n\n// Obtenemos todos los items que llegan al nodo\nconst items = $input.all();\n\n// Iteramos sobre cada item para procesarlo\nfor (const item of items) {\n  // Verificamos que el item tenga datos binarios para procesar\n  if (item.binary && item.binary['data']) {\n    // Obtenemos el nombre del archivo de forma segura\n    const fileName = item.binary['data'].fileName || '';\n    if (!fileName) {\n      continue; // Si no hay nombre de archivo, pasamos al siguiente item\n    }\n\n    // Extraemos la extensi√≥n del archivo de forma robusta\n    const extension = fileName.slice((fileName.lastIndexOf(\".\") - 1 >>> 0) + 2).toLowerCase();\n\n    // Buscamos la extensi√≥n en nuestro mapa\n    const newMimeType = mimeMap[extension];\n\n    // Si encontramos una coincidencia en el mapa, actualizamos el mimeType\n    if (newMimeType) {\n      if(item.binary['data'].mimeType !== newMimeType) {\n        console.log(`Cambiando mimeType para '${fileName}' de '${item.binary['data'].mimeType}' a '${newMimeType}'.`);\n        item.binary['data'].mimeType = newMimeType;\n      }\n    }\n  }\n}\n\n// Devolvemos todos los items, modificados o no\nreturn items;"
            },
            "typeVersion": 2
          },
          {
            "id": "29051108-72c1-49da-8b51-25350affe0de",
            "name": "get_error_message1",
            "type": "n8n-nodes-base.set",
            "position": [
              2144,
              1408
            ],
            "parameters": {
              "options": {},
              "assignments": {
                "assignments": [
                  {
                    "id": "d8935452-fe20-469d-a68d-1aad056cb8dd",
                    "name": "message",
                    "type": "string",
                    "value": "=It was not possible to process the file.File type not supported."
                  },
                  {
                    "id": "38ba2498-2141-4a04-a22a-64563fe2ee6f",
                    "name": "chat_id",
                    "type": "string",
                    "value": "={{ $('Telegram Trigger').item.json.message.chat.id }}"
                  }
                ]
              }
            },
            "typeVersion": 3.4
          },
          {
            "id": "41cf82ed-b4f4-4224-93b2-e2c96f4c0f4c",
            "name": "Send a text message",
            "type": "n8n-nodes-base.telegram",
            "position": [
              3680,
              1136
            ],
            "webhookId": "a23f92f8-c4e9-44a5-8c17-e7623f18a851",
            "parameters": {
              "text": "={{ $json.message }}",
              "chatId": "={{ $('Telegram Trigger').item.json.message.chat.id }}",
              "additionalFields": {
                "parse_mode": "MarkdownV2",
                "appendAttribution": false
              }
            },
            "credentials": {
              "telegramApi": {
                "id": "yxDk2RnbewqwPdMO",
                "name": "Pruebas"
              }
            },
            "typeVersion": 1.2
          },
          {
            "id": "938dbd1b-a566-4bcf-9c9c-7abf90174f8b",
            "name": "Google Gemini Chat Model",
            "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
            "position": [
              3072,
              1312
            ],
            "parameters": {
              "options": {}
            },
            "credentials": {
              "googlePalmApi": {
                "id": "IrGmkWole0gsi1H8",
                "name": "Google Gemini(PaLM) Api account"
              }
            },
            "typeVersion": 1
          },
          {
            "id": "ad29c874-9686-41aa-af26-5db22169f1dd",
            "name": "Simple Memory",
            "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
            "position": [
              3200,
              1328
            ],
            "parameters": {
              "sessionKey": "={{ $json.chat_id }}",
              "sessionIdType": "customKey"
            },
            "typeVersion": 1.3
          },
          {
            "id": "dcbd0b50-3cb5-4e3e-be26-026199676bb7",
            "name": "MarkdownV2",
            "type": "n8n-nodes-base.code",
            "position": [
              3520,
              1136
            ],
            "parameters": {
              "jsCode": "/**\n * MarkdownV2-safe formatter + auto-chunker for Telegram (n8n Code node)\n * --------------------------------------------------------------------\n * - Allows: *bold*, _italic_, ||spoiler||, [label](url)\n * - Escapes everything else for Telegram MarkdownV2\n * - Validates/normalizes URLs\n * - Converts \"# Heading\" lines to bold titles\n * - Splits long messages into <= 4096-char chunks (uses a 4000-char budget)\n * - Outputs one item per chunk so the Telegram node sends all parts\n *\n * Recommended: Run this node in \"Run Once for All Items\".\n */\n\nconst MAX_TELEGRAM = 4096;\nconst SAFE_BUDGET = 4000; // small margin to avoid edge overflows\n\n// ============ MarkdownV2 helpers ============\nfunction escapeMarkdownV2(text) {\n  if (!text) return '';\n  return String(text).replace(/([\\\\_*[\\]()~`>#+\\-=|{}.!])/g, '\\\\$1');\n}\n\nfunction escapeForUrl(url) {\n  return String(url).replace(/[)\\\\]/g, '\\\\$&');\n}\n\nfunction normalizeAndValidateUrl(url) {\n  let raw = String(url || '').trim();\n  try {\n    const u = new URL(raw);\n    return u.toString();\n  } catch {}\n  // Try https:// for bare domains\n  const domainLike = /^[a-z0-9.-]+\\.[a-z]{2,}([/:?#].*)?$/i.test(raw);\n  if (domainLike) {\n    try {\n      const u2 = new URL('https://' + raw);\n      return u2.toString();\n    } catch {}\n  }\n  return null;\n}\n\nfunction normalizeHeadings(text) {\n  // Turn \"# Title\" ‚Üí \"*Title*\"\n  return text.replace(/^(#{1,6})\\s+(.*)$/gm, (m, hashes, title) => `*${title.trim()}*`);\n}\n\nfunction normalizeCommonMd(text) {\n  return String(text)\n    .replace(/\\*\\*([\\s\\S]*?)\\*\\*/g, '*$1*') // **bold** ‚Üí *bold*\n    .replace(/__([\\s\\S]*?)__/g, '_$1_');    // __italic__ ‚Üí _italic_\n}\n\n/**\n * Convert incoming text to Telegram-safe MarkdownV2.\n */\nfunction processMarkdownV2Safe(inputText) {\n  if (!inputText) return '';\n\n  let text = normalizeCommonMd(String(inputText));\n  text = normalizeHeadings(text);\n\n  const placeholders = { links: [], bolds: [], italics: [], spoilers: [] };\n\n  // Links: keep safe via placeholders during escaping\n  text = text.replace(/\\[([^\\]\\n]+)\\]\\(([^)]+)\\)/g, (m, label, url) => {\n    const normalizedUrl = normalizeAndValidateUrl(url);\n    if (!normalizedUrl) return escapeMarkdownV2(label);\n    const idx = placeholders.links.length;\n    const ph = `‚ü¨L${idx}‚ü≠`;\n    const safeLabel = escapeMarkdownV2(label);\n    const safeUrl = escapeForUrl(normalizedUrl);\n    placeholders.links.push(`[${safeLabel}](${safeUrl})`);\n    return ph;\n  });\n\n  // Bold\n  text = text.replace(/\\*([\\s\\S]+?)\\*/g, (m, inner) => {\n    const idx = placeholders.bolds.length;\n    const ph = `‚ü¨B${idx}‚ü≠`;\n    placeholders.bolds.push(`*${escapeMarkdownV2(inner)}*`);\n    return ph;\n  });\n\n  // Italic\n  text = text.replace(/_([\\s\\S]+?)_/g, (m, inner) => {\n    const idx = placeholders.italics.length;\n    const ph = `‚ü¨I${idx}‚ü≠`;\n    placeholders.italics.push(`_${escapeMarkdownV2(inner)}_`);\n    return ph;\n  });\n\n  // Spoilers\n  text = text.replace(/\\|\\|([\\s\\S]+?)\\|\\|/g, (m, inner) => {\n    const idx = placeholders.spoilers.length;\n    const ph = `‚ü¨S${idx}‚ü≠`;\n    placeholders.spoilers.push(`||${escapeMarkdownV2(inner)}||`);\n    return ph;\n  });\n\n  // Escape everything else\n  text = escapeMarkdownV2(text);\n\n  // Restore placeholders\n  placeholders.links.forEach((md, i) => { text = text.replace(`‚ü¨L${i}‚ü≠`, md); });\n  placeholders.bolds.forEach((md, i) => { text = text.replace(`‚ü¨B${i}‚ü≠`, md); });\n  placeholders.italics.forEach((md, i) => { text = text.replace(`‚ü¨I${i}‚ü≠`, md); });\n  placeholders.spoilers.forEach((md, i) => { text = text.replace(`‚ü¨S${i}‚ü≠`, md); });\n\n  return text;\n}\n\n// ============ Chunking helpers ============\n/**\n * Split text into Telegram-safe chunks <= maxLen.\n * Prefers paragraph boundaries, then sentence boundaries, then words.\n * Falls back to hard cuts only when unavoidable (e.g., extremely long URL).\n */\nfunction chunkForTelegram(text, maxLen = SAFE_BUDGET) {\n  if (!text || text.length <= maxLen) return [text || ''];\n\n  const parts = [];\n  let buffer = '';\n\n  const flush = () => {\n    if (buffer) {\n      parts.push(buffer);\n      buffer = '';\n    }\n  };\n\n  // 1) Paragraph-level packing\n  const paragraphs = text.split(/\\n{2,}/);\n  for (const pRaw of paragraphs) {\n    const p = pRaw; // keep paragraph as-is\n    const candidate = buffer ? buffer + '\\n\\n' + p : p;\n    if (candidate.length <= maxLen) {\n      buffer = candidate;\n      continue;\n    }\n    if (p.length <= maxLen) {\n      flush();\n      buffer = p;\n      continue;\n    }\n\n    // 2) Sentence-level packing (paragraph is still too big)\n    flush();\n    const sentences = p.split(/(?<=[.!?‚Ä¶])\\s+(?=[^\\s])/u);\n    let sBuf = '';\n    for (const s of sentences) {\n      const sCandidate = sBuf ? sBuf + ' ' + s : s;\n      if (sCandidate.length <= maxLen) {\n        sBuf = sCandidate;\n        continue;\n      }\n      if (s.length <= maxLen) {\n        if (sBuf) parts.push(sBuf);\n        sBuf = s;\n        continue;\n      }\n\n      // 3) Word-level packing (sentence is still too big)\n      if (sBuf) { parts.push(sBuf); sBuf = ''; }\n      let wBuf = '';\n      const words = s.split(/\\s+/);\n      for (const w of words) {\n        const wCandidate = wBuf ? wBuf + ' ' + w : w;\n        if (wCandidate.length <= maxLen) {\n          wBuf = wCandidate;\n          continue;\n        }\n        if (w.length <= maxLen) {\n          if (wBuf) parts.push(wBuf);\n          wBuf = w;\n          continue;\n        }\n        // 4) Hard split (extremely long token, e.g., massive URL)\n        if (wBuf) { parts.push(wBuf); wBuf = ''; }\n        const re = new RegExp(`.{1,${maxLen}}`, 'g');\n        const hardPieces = w.match(re) || [];\n        parts.push(...hardPieces);\n      }\n      if (wBuf) parts.push(wBuf);\n    }\n    if (sBuf) parts.push(sBuf);\n  }\n  if (buffer) parts.push(buffer);\n\n  // Final safety pass: trim chunks that might still exceed MAX_TELEGRAM\n  return parts.flatMap(part => {\n    if (part.length <= MAX_TELEGRAM) return [part];\n    const re = new RegExp(`.{1,${SAFE_BUDGET}}`, 'g');\n    return part.match(re) || [];\n  });\n}\n\n// ============ Main ============\nconst inputItems = $input.all();\nconst out = [];\n\nfor (const item of inputItems) {\n  const j = item.json || {};\n  const raw =\n    j.message ?? j.output ?? j.text ?? j.content ?? '';\n\n  const formatted = processMarkdownV2Safe(raw);\n  const chunks = chunkForTelegram(formatted, SAFE_BUDGET);\n\n  chunks.forEach((chunk, idx) => {\n    out.push({\n      json: {\n        ...j,\n        message: chunk,\n        message_part_index: idx + 1,\n        message_parts_total: chunks.length,\n      },\n      binary: item.binary,\n    });\n  });\n}\n\nreturn out;\n"
            },
            "typeVersion": 2
          },
          {
            "id": "9e4623d1-a1d6-426b-bb97-186edb14f3f5",
            "name": "If",
            "type": "n8n-nodes-base.if",
            "position": [
              1472,
              1200
            ],
            "parameters": {
              "options": {},
              "conditions": {
                "options": {
                  "version": 2,
                  "leftValue": "",
                  "caseSensitive": true,
                  "typeValidation": "strict"
                },
                "combinator": "and",
                "conditions": [
                  {
                    "id": "b9e63bbf-24e6-424b-ba4e-6acd3f17b57c",
                    "operator": {
                      "type": "number",
                      "operation": "exists",
                      "singleValue": true
                    },
                    "leftValue": "={{ $json.User_ID }}",
                    "rightValue": ""
                  }
                ]
              }
            },
            "typeVersion": 2.2
          },
          {
            "id": "1d9a7fa5-5b3c-4531-a268-99ec7befc78f",
            "name": "Registered?",
            "type": "n8n-nodes-base.googleSheets",
            "onError": "continueRegularOutput",
            "position": [
              1296,
              1200
            ],
            "parameters": {
              "options": {},
              "filtersUI": {
                "values": [
                  {
                    "lookupValue": "={{ $('Telegram Trigger').item.json.message.chat.id }}",
                    "lookupColumn": "User_ID"
                  }
                ]
              },
              "sheetName": {
                "__rl": true,
                "mode": "list",
                "value": "gid=0",
                "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1Dm_PA5AUHaFe4qatsKmBBfLpuxUPLw8xHlNd8Tv9Wpw/edit#gid=0",
                "cachedResultName": "Profile"
              },
              "documentId": {
                "__rl": true,
                "mode": "list",
                "value": "1Dm_PA5AUHaFe4qatsKmBBfLpuxUPLw8xHlNd8Tv9Wpw",
                "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1Dm_PA5AUHaFe4qatsKmBBfLpuxUPLw8xHlNd8Tv9Wpw/edit?usp=drivesdk",
                "cachedResultName": "Cal AI"
              }
            },
            "credentials": {
              "googleSheetsOAuth2Api": {
                "id": "VBWEx4HAgL8zZHao",
                "name": "Google Sheets account"
              }
            },
            "typeVersion": 4.7,
            "alwaysOutputData": true
          },
          {
            "id": "2a6e36c8-12fc-48c2-a909-40ffbe07f6f9",
            "name": "Send a text message1",
            "type": "n8n-nodes-base.telegram",
            "position": [
              2480,
              1776
            ],
            "webhookId": "a23f92f8-c4e9-44a5-8c17-e7623f18a851",
            "parameters": {
              "text": "={{ $json.message }}",
              "chatId": "={{ $('Telegram Trigger').item.json.message.chat.id }}",
              "additionalFields": {
                "parse_mode": "MarkdownV2",
                "appendAttribution": false
              }
            },
            "credentials": {
              "telegramApi": {
                "id": "yxDk2RnbewqwPdMO",
                "name": "Pruebas"
              }
            },
            "typeVersion": 1.2
          },
          {
            "id": "6d1ab7a7-b072-45d0-ad0d-984d09f8b371",
            "name": "Google Gemini Chat Model1",
            "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
            "position": [
              1872,
              1968
            ],
            "parameters": {
              "options": {}
            },
            "credentials": {
              "googlePalmApi": {
                "id": "IrGmkWole0gsi1H8",
                "name": "Google Gemini(PaLM) Api account"
              }
            },
            "typeVersion": 1
          },
          {
            "id": "3c36bb0c-84d9-43b2-83c0-69e36226c098",
            "name": "Simple Memory1",
            "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
            "position": [
              2032,
              2032
            ],
            "parameters": {
              "sessionKey": "={{ $json.chat_id }}",
              "sessionIdType": "customKey"
            },
            "typeVersion": 1.3
          },
          {
            "id": "f371ad0b-bf0b-4927-a169-9b56cc8fce63",
            "name": "MarkdownV",
            "type": "n8n-nodes-base.code",
            "position": [
              2320,
              1776
            ],
            "parameters": {
              "jsCode": "/**\n * MarkdownV2-safe formatter + auto-chunker for Telegram (n8n Code node)\n * --------------------------------------------------------------------\n * - Allows: *bold*, _italic_, ||spoiler||, [label](url)\n * - Escapes everything else for Telegram MarkdownV2\n * - Validates/normalizes URLs\n * - Converts \"# Heading\" lines to bold titles\n * - Splits long messages into <= 4096-char chunks (uses a 4000-char budget)\n * - Outputs one item per chunk so the Telegram node sends all parts\n *\n * Recommended: Run this node in \"Run Once for All Items\".\n */\n\nconst MAX_TELEGRAM = 4096;\nconst SAFE_BUDGET = 4000; // small margin to avoid edge overflows\n\n// ============ MarkdownV2 helpers ============\nfunction escapeMarkdownV2(text) {\n  if (!text) return '';\n  return String(text).replace(/([\\\\_*[\\]()~`>#+\\-=|{}.!])/g, '\\\\$1');\n}\n\nfunction escapeForUrl(url) {\n  return String(url).replace(/[)\\\\]/g, '\\\\$&');\n}\n\nfunction normalizeAndValidateUrl(url) {\n  let raw = String(url || '').trim();\n  try {\n    const u = new URL(raw);\n    return u.toString();\n  } catch {}\n  // Try https:// for bare domains\n  const domainLike = /^[a-z0-9.-]+\\.[a-z]{2,}([/:?#].*)?$/i.test(raw);\n  if (domainLike) {\n    try {\n      const u2 = new URL('https://' + raw);\n      return u2.toString();\n    } catch {}\n  }\n  return null;\n}\n\nfunction normalizeHeadings(text) {\n  // Turn \"# Title\" ‚Üí \"*Title*\"\n  return text.replace(/^(#{1,6})\\s+(.*)$/gm, (m, hashes, title) => `*${title.trim()}*`);\n}\n\nfunction normalizeCommonMd(text) {\n  return String(text)\n    .replace(/\\*\\*([\\s\\S]*?)\\*\\*/g, '*$1*') // **bold** ‚Üí *bold*\n    .replace(/__([\\s\\S]*?)__/g, '_$1_');    // __italic__ ‚Üí _italic_\n}\n\n/**\n * Convert incoming text to Telegram-safe MarkdownV2.\n */\nfunction processMarkdownV2Safe(inputText) {\n  if (!inputText) return '';\n\n  let text = normalizeCommonMd(String(inputText));\n  text = normalizeHeadings(text);\n\n  const placeholders = { links: [], bolds: [], italics: [], spoilers: [] };\n\n  // Links: keep safe via placeholders during escaping\n  text = text.replace(/\\[([^\\]\\n]+)\\]\\(([^)]+)\\)/g, (m, label, url) => {\n    const normalizedUrl = normalizeAndValidateUrl(url);\n    if (!normalizedUrl) return escapeMarkdownV2(label);\n    const idx = placeholders.links.length;\n    const ph = `‚ü¨L${idx}‚ü≠`;\n    const safeLabel = escapeMarkdownV2(label);\n    const safeUrl = escapeForUrl(normalizedUrl);\n    placeholders.links.push(`[${safeLabel}](${safeUrl})`);\n    return ph;\n  });\n\n  // Bold\n  text = text.replace(/\\*([\\s\\S]+?)\\*/g, (m, inner) => {\n    const idx = placeholders.bolds.length;\n    const ph = `‚ü¨B${idx}‚ü≠`;\n    placeholders.bolds.push(`*${escapeMarkdownV2(inner)}*`);\n    return ph;\n  });\n\n  // Italic\n  text = text.replace(/_([\\s\\S]+?)_/g, (m, inner) => {\n    const idx = placeholders.italics.length;\n    const ph = `‚ü¨I${idx}‚ü≠`;\n    placeholders.italics.push(`_${escapeMarkdownV2(inner)}_`);\n    return ph;\n  });\n\n  // Spoilers\n  text = text.replace(/\\|\\|([\\s\\S]+?)\\|\\|/g, (m, inner) => {\n    const idx = placeholders.spoilers.length;\n    const ph = `‚ü¨S${idx}‚ü≠`;\n    placeholders.spoilers.push(`||${escapeMarkdownV2(inner)}||`);\n    return ph;\n  });\n\n  // Escape everything else\n  text = escapeMarkdownV2(text);\n\n  // Restore placeholders\n  placeholders.links.forEach((md, i) => { text = text.replace(`‚ü¨L${i}‚ü≠`, md); });\n  placeholders.bolds.forEach((md, i) => { text = text.replace(`‚ü¨B${i}‚ü≠`, md); });\n  placeholders.italics.forEach((md, i) => { text = text.replace(`‚ü¨I${i}‚ü≠`, md); });\n  placeholders.spoilers.forEach((md, i) => { text = text.replace(`‚ü¨S${i}‚ü≠`, md); });\n\n  return text;\n}\n\n// ============ Chunking helpers ============\n/**\n * Split text into Telegram-safe chunks <= maxLen.\n * Prefers paragraph boundaries, then sentence boundaries, then words.\n * Falls back to hard cuts only when unavoidable (e.g., extremely long URL).\n */\nfunction chunkForTelegram(text, maxLen = SAFE_BUDGET) {\n  if (!text || text.length <= maxLen) return [text || ''];\n\n  const parts = [];\n  let buffer = '';\n\n  const flush = () => {\n    if (buffer) {\n      parts.push(buffer);\n      buffer = '';\n    }\n  };\n\n  // 1) Paragraph-level packing\n  const paragraphs = text.split(/\\n{2,}/);\n  for (const pRaw of paragraphs) {\n    const p = pRaw; // keep paragraph as-is\n    const candidate = buffer ? buffer + '\\n\\n' + p : p;\n    if (candidate.length <= maxLen) {\n      buffer = candidate;\n      continue;\n    }\n    if (p.length <= maxLen) {\n      flush();\n      buffer = p;\n      continue;\n    }\n\n    // 2) Sentence-level packing (paragraph is still too big)\n    flush();\n    const sentences = p.split(/(?<=[.!?‚Ä¶])\\s+(?=[^\\s])/u);\n    let sBuf = '';\n    for (const s of sentences) {\n      const sCandidate = sBuf ? sBuf + ' ' + s : s;\n      if (sCandidate.length <= maxLen) {\n        sBuf = sCandidate;\n        continue;\n      }\n      if (s.length <= maxLen) {\n        if (sBuf) parts.push(sBuf);\n        sBuf = s;\n        continue;\n      }\n\n      // 3) Word-level packing (sentence is still too big)\n      if (sBuf) { parts.push(sBuf); sBuf = ''; }\n      let wBuf = '';\n      const words = s.split(/\\s+/);\n      for (const w of words) {\n        const wCandidate = wBuf ? wBuf + ' ' + w : w;\n        if (wCandidate.length <= maxLen) {\n          wBuf = wCandidate;\n          continue;\n        }\n        if (w.length <= maxLen) {\n          if (wBuf) parts.push(wBuf);\n          wBuf = w;\n          continue;\n        }\n        // 4) Hard split (extremely long token, e.g., massive URL)\n        if (wBuf) { parts.push(wBuf); wBuf = ''; }\n        const re = new RegExp(`.{1,${maxLen}}`, 'g');\n        const hardPieces = w.match(re) || [];\n        parts.push(...hardPieces);\n      }\n      if (wBuf) parts.push(wBuf);\n    }\n    if (sBuf) parts.push(sBuf);\n  }\n  if (buffer) parts.push(buffer);\n\n  // Final safety pass: trim chunks that might still exceed MAX_TELEGRAM\n  return parts.flatMap(part => {\n    if (part.length <= MAX_TELEGRAM) return [part];\n    const re = new RegExp(`.{1,${SAFE_BUDGET}}`, 'g');\n    return part.match(re) || [];\n  });\n}\n\n// ============ Main ============\nconst inputItems = $input.all();\nconst out = [];\n\nfor (const item of inputItems) {\n  const j = item.json || {};\n  const raw =\n    j.message ?? j.output ?? j.text ?? j.content ?? '';\n\n  const formatted = processMarkdownV2Safe(raw);\n  const chunks = chunkForTelegram(formatted, SAFE_BUDGET);\n\n  chunks.forEach((chunk, idx) => {\n    out.push({\n      json: {\n        ...j,\n        message: chunk,\n        message_part_index: idx + 1,\n        message_parts_total: chunks.length,\n      },\n      binary: item.binary,\n    });\n  });\n}\n\nreturn out;\n"
            },
            "typeVersion": 2
          },
          {
            "id": "0086d3f2-cc2f-45a8-9db7-a7b1a803700a",
            "name": "Get Meals Info",
            "type": "n8n-nodes-base.googleSheets",
            "position": [
              3056,
              1808
            ],
            "parameters": {
              "options": {},
              "filtersUI": {
                "values": [
                  {
                    "lookupValue": "={{ $json.Date }}",
                    "lookupColumn": "Date"
                  },
                  {
                    "lookupValue": "={{ $json.User_ID }}",
                    "lookupColumn": "User_ID"
                  }
                ]
              },
              "sheetName": {
                "__rl": true,
                "mode": "list",
                "value": 403788598,
                "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1Dm_PA5AUHaFe4qatsKmBBfLpuxUPLw8xHlNd8Tv9Wpw/edit#gid=403788598",
                "cachedResultName": "Meals"
              },
              "documentId": {
                "__rl": true,
                "mode": "list",
                "value": "1Dm_PA5AUHaFe4qatsKmBBfLpuxUPLw8xHlNd8Tv9Wpw",
                "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1Dm_PA5AUHaFe4qatsKmBBfLpuxUPLw8xHlNd8Tv9Wpw/edit?usp=drivesdk",
                "cachedResultName": "Cal AI"
              }
            },
            "credentials": {
              "googleSheetsOAuth2Api": {
                "id": "VBWEx4HAgL8zZHao",
                "name": "Google Sheets account"
              }
            },
            "typeVersion": 4.7,
            "alwaysOutputData": true
          },
          {
            "id": "6e61ba86-d1ad-4140-b59d-715fdf7472fa",
            "name": "Get User Info",
            "type": "n8n-nodes-base.googleSheets",
            "position": [
              3056,
              2064
            ],
            "parameters": {
              "options": {},
              "filtersUI": {
                "values": [
                  {
                    "lookupValue": "={{ $json.User_ID }}",
                    "lookupColumn": "User_ID"
                  }
                ]
              },
              "sheetName": {
                "__rl": true,
                "mode": "list",
                "value": "gid=0",
                "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1Dm_PA5AUHaFe4qatsKmBBfLpuxUPLw8xHlNd8Tv9Wpw/edit#gid=0",
                "cachedResultName": "Profile"
              },
              "documentId": {
                "__rl": true,
                "mode": "list",
                "value": "1Dm_PA5AUHaFe4qatsKmBBfLpuxUPLw8xHlNd8Tv9Wpw",
                "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1Dm_PA5AUHaFe4qatsKmBBfLpuxUPLw8xHlNd8Tv9Wpw/edit?usp=drivesdk",
                "cachedResultName": "Cal AI"
              }
            },
            "credentials": {
              "googleSheetsOAuth2Api": {
                "id": "VBWEx4HAgL8zZHao",
                "name": "Google Sheets account"
              }
            },
            "typeVersion": 4.7
          },
          {
            "id": "49cbbd8e-dc4f-4ac9-b17a-afc6f8f5431b",
            "name": "get_message (register)",
            "type": "n8n-nodes-base.set",
            "position": [
              1728,
              1776
            ],
            "parameters": {
              "options": {},
              "assignments": {
                "assignments": [
                  {
                    "id": "801ec600-22ad-4a94-a2b4-ae72eb271df0",
                    "name": "message",
                    "type": "string",
                    "value": "={{ $('Telegram Trigger').item.json.message.text }}"
                  },
                  {
                    "id": "263071fb-bcdf-42b0-bb46-71b75fa0bf2a",
                    "name": "chat_id",
                    "type": "string",
                    "value": "={{ $('Telegram Trigger').item.json.message.chat.id }}"
                  }
                ]
              }
            },
            "typeVersion": 3.4
          },
          {
            "id": "544b7ab2-d054-4235-b46b-2a3cbcbd3583",
            "name": "Register User",
            "type": "n8n-nodes-base.googleSheetsTool",
            "position": [
              2192,
              2032
            ],
            "parameters": {
              "columns": {
                "value": {
                  "Name": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Name', ``, 'string') }}",
                  "User_ID": "={{ $json.chat_id }}",
                  "Protein_target": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Protein_target', ``, 'string') }}",
                  "Calories_target": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Calories_target', ``, 'string') }}"
                },
                "schema": [
                  {
                    "id": "User_ID",
                    "type": "string",
                    "display": true,
                    "removed": false,
                    "required": false,
                    "displayName": "User_ID",
                    "defaultMatch": false,
                    "canBeUsedToMatch": true
                  },
                  {
                    "id": "Name",
                    "type": "string",
                    "display": true,
                    "removed": false,
                    "required": false,
                    "displayName": "Name",
                    "defaultMatch": false,
                    "canBeUsedToMatch": true
                  },
                  {
                    "id": "Calories_target",
                    "type": "string",
                    "display": true,
                    "removed": false,
                    "required": false,
                    "displayName": "Calories_target",
                    "defaultMatch": false,
                    "canBeUsedToMatch": true
                  },
                  {
                    "id": "Protein_target",
                    "type": "string",
                    "display": true,
                    "removed": false,
                    "required": false,
                    "displayName": "Protein_target",
                    "defaultMatch": false,
                    "canBeUsedToMatch": true
                  }
                ],
                "mappingMode": "defineBelow",
                "matchingColumns": [
                  "ID"
                ],
                "attemptToConvertTypes": false,
                "convertFieldsToString": false
              },
              "options": {},
              "operation": "append",
              "sheetName": {
                "__rl": true,
                "mode": "list",
                "value": "gid=0",
                "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1Dm_PA5AUHaFe4qatsKmBBfLpuxUPLw8xHlNd8Tv9Wpw/edit#gid=0",
                "cachedResultName": "Profile"
              },
              "documentId": {
                "__rl": true,
                "mode": "list",
                "value": "1Dm_PA5AUHaFe4qatsKmBBfLpuxUPLw8xHlNd8Tv9Wpw",
                "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1Dm_PA5AUHaFe4qatsKmBBfLpuxUPLw8xHlNd8Tv9Wpw/edit?usp=drivesdk",
                "cachedResultName": "Cal AI"
              }
            },
            "credentials": {
              "googleSheetsOAuth2Api": {
                "id": "VBWEx4HAgL8zZHao",
                "name": "Google Sheets account"
              }
            },
            "typeVersion": 4.7
          },
          {
            "id": "615bc756-bc1c-49a7-86a2-af2c940e474a",
            "name": "Register Agent",
            "type": "@n8n/n8n-nodes-langchain.agent",
            "position": [
              2000,
              1776
            ],
            "parameters": {
              "text": "={{ $json.message }}",
              "options": {
                "systemMessage": "=You are Cal AI üèãÔ∏è‚Äç‚ôÇÔ∏èü•¶, the friendly fitness & nutrition coach assistant.\nYour single job is to register a new user into the Users table while keeping the tone supportive, clear, and motivational. Always use emojis related to health, training, and food (üî•üí™ü•¶üçóüåæü•ë).\n\nüîë Registration Rules\n\nYou MUST collect these fields:\n\nuser_id (not asked, system provides it)\n\nname\n\ncalories_target\n\nprotein_target\n\nüìå When sending data to the Register User tool, always send numbers only (no units, no text, no emojis) for calories_target and protein_targe\n\nIf the user does not know their numeric targets, do not invent them. Instead, coach them by politely asking for:\n\nweight ‚öñÔ∏è\n\nheight üìè\n\nage üéÇ\n\ngoal üéØ (gain muscle üí™, lose fat üî•, maintain ‚öñÔ∏è)\n\nBased on this info, calculate precise calorie and protein targets.\n\nOnly when all fields are collected and confirmed ‚Üí call Register User tool with the final data.\n\n‚úÖ After Successful Registration\n\nSend a short, friendly confirmation like a coach:\n\n‚ÄúAwesome, champ üí™! Your nutrition targets are locked in: üî• [calories] kcal, üçó [protein] g protein.‚Äù\n\nThen, explain clearly how to use Cal AI:\n\nüì∏ Send food photos ‚Üí get instant calories + macros.\n\n‚öôÔ∏è View or update your targets anytime.\n\nüìë Request daily reports ‚Üí compare intake vs. targets with charts.\n\nüó£Ô∏è Style Guide\n\nAlways keep responses simple, clear, and concise.\n\nSpeak like a friendly trainer/coach who motivates the user.\n\nUse emojis to highlight key concepts.\n\nBe warm, supportive, and practical:\n\n‚ÄúLet‚Äôs get you set up for success üèãÔ∏è‚Äç‚ôÇÔ∏èüî•‚Äù\n\n‚ÄúStrong start, [Name]! Targets ready üí™ü•¶.‚Äù"
              },
              "promptType": "define"
            },
            "typeVersion": 2.2
          },
          {
            "id": "6d4404a0-3993-4719-b830-e5786e0a4ab5",
            "name": "Cal IA Agent",
            "type": "@n8n/n8n-nodes-langchain.agent",
            "position": [
              3200,
              1136
            ],
            "parameters": {
              "text": "={{ $json.message }}",
              "options": {
                "systemMessage": "=You are Cal AI üèãÔ∏è‚Äç‚ôÇÔ∏èü•¶, your friendly fitness coach and nutrition orchestrator.\nYour mission is to guide the user with motivation, clarity, and precision while managing their nutrition data. Speak in a supportive, energetic tone like a personal trainer, and use relevant emojis (üî•üí™ü•¶üçóüåæü•ë) to keep the conversation fun and engaging.\n\nYou have four tools available:\n\nappendMealData(tool) ‚Üí store a meal row in Meals sheet.\n\nupdateProfileData(tool) ‚Üí update the user's profile targets (fields: Name, Calories_target, Protein_target).\n\ngetUserData(tool) ‚Üí fetch the user's profile info.\n\ngetReport(tool) ‚Üí generate or fetch the daily report (requires date).\n\nüîë Rules\n\nThe image analysis is done before reaching you. You will always receive structured info:\nMeal Description: [short description]\nCalories: [number]\nProteins: [number]\nCarbs: [number]\nFat: [number]\n\nWith this info, call appendMealData.\n\nAfter appendMealData success, confirm naturally in a coach style: repeat the meal info using emojis (üî• Calories, üçó Protein, üåæ Carbs, ü•ë Fat).\n\nEnd confirmations with a quick motivational phrase like:\n\n‚ÄúGreat fuel for your body üí™üî•‚Äù\n\n‚ÄúAnother step closer to your goals ü•¶üèãÔ∏è‚Äç‚ôÇÔ∏è‚Äù\n\nAlways offer short next-step options:\nüëâ ‚ÄúView daily report üìë‚Äù\nüëâ ‚ÄúAnalyze another meal üì∏‚Äù\nüëâ ‚ÄúView or update profile targets ‚öôÔ∏è‚Äù\n\nüîÑ Profile Update Logic\n\nWhen the user wants to update their profile (Name, Calories_target, or Protein_target):\n\nFirst call getUserData to fetch current profile info.\n\nCompare the requested update with the existing values.\n\nOnly pass the changed fields to updateProfileData (never overwrite unchanged values).\n\nConfirm to the user in a friendly way, e.g.:\n\n‚Äú‚úÖ Your Calories_target is now 2200 üî•. Protein_target stays strong at 150 üçó.‚Äù\n\n‚ÄúProfile updated! Let‚Äôs crush it üí™ü•¶.‚Äù\n\nüìë Tool Usage Rules\n\ngetUserData ‚Üí always called first before updating the profile.\n\nupdateProfileData ‚Üí only include the fields that have changed.\n\ngetReport ‚Üí only pass the requested date.\n\nKeep all responses short, clear, motivational, and full of energy.\n\nüìÖ Date: {{ $today.format('yyyy-MM-dd') }}"
              },
              "promptType": "define"
            },
            "typeVersion": 2.2
          },
          {
            "id": "a2b7e00f-1e9b-4032-8ae1-6612b3ef6520",
            "name": "Update Profile Data",
            "type": "n8n-nodes-base.googleSheetsTool",
            "position": [
              3520,
              1392
            ],
            "parameters": {
              "columns": {
                "value": {
                  "Name": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Name', ``, 'string') }}",
                  "User_ID": "={{ $json.chat_id }}",
                  "Protein_target": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Protein_target', ``, 'string') }}",
                  "Calories_target": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Calories_target', ``, 'string') }}"
                },
                "schema": [
                  {
                    "id": "User_ID",
                    "type": "string",
                    "display": true,
                    "removed": false,
                    "required": false,
                    "displayName": "User_ID",
                    "defaultMatch": false,
                    "canBeUsedToMatch": true
                  },
                  {
                    "id": "Name",
                    "type": "string",
                    "display": true,
                    "removed": false,
                    "required": false,
                    "displayName": "Name",
                    "defaultMatch": false,
                    "canBeUsedToMatch": true
                  },
                  {
                    "id": "Calories_target",
                    "type": "string",
                    "display": true,
                    "removed": false,
                    "required": false,
                    "displayName": "Calories_target",
                    "defaultMatch": false,
                    "canBeUsedToMatch": true
                  },
                  {
                    "id": "Protein_target",
                    "type": "string",
                    "display": true,
                    "removed": false,
                    "required": false,
                    "displayName": "Protein_target",
                    "defaultMatch": false,
                    "canBeUsedToMatch": true
                  }
                ],
                "mappingMode": "defineBelow",
                "matchingColumns": [
                  "User_ID"
                ],
                "attemptToConvertTypes": false,
                "convertFieldsToString": false
              },
              "options": {},
              "operation": "appendOrUpdate",
              "sheetName": {
                "__rl": true,
                "mode": "list",
                "value": "gid=0",
                "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1Dm_PA5AUHaFe4qatsKmBBfLpuxUPLw8xHlNd8Tv9Wpw/edit#gid=0",
                "cachedResultName": "Profile"
              },
              "documentId": {
                "__rl": true,
                "mode": "list",
                "value": "1Dm_PA5AUHaFe4qatsKmBBfLpuxUPLw8xHlNd8Tv9Wpw",
                "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1Dm_PA5AUHaFe4qatsKmBBfLpuxUPLw8xHlNd8Tv9Wpw/edit?usp=drivesdk",
                "cachedResultName": "Cal AI"
              },
              "descriptionType": "manual",
              "toolDescription": "=updateProfileData\nPurpose: Update the user‚Äôs profile targets.\nFields that can be updated:\n\nName (string)\n\nCalories_target (string/number)\n\nProtein_target (string/number)\nWhen to use: When the user explicitly asks to update their name, calorie target, or protein target."
            },
            "credentials": {
              "googleSheetsOAuth2Api": {
                "id": "VBWEx4HAgL8zZHao",
                "name": "Google Sheets account"
              }
            },
            "typeVersion": 4.7
          },
          {
            "id": "83f1cb62-818d-4161-99e4-7c984552fde1",
            "name": "Get Profile Data",
            "type": "n8n-nodes-base.googleSheetsTool",
            "position": [
              3344,
              1392
            ],
            "parameters": {
              "options": {},
              "filtersUI": {
                "values": [
                  {
                    "lookupValue": "={{ $json.chat_id }}",
                    "lookupColumn": "User_ID"
                  }
                ]
              },
              "sheetName": {
                "__rl": true,
                "mode": "list",
                "value": "gid=0",
                "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1Dm_PA5AUHaFe4qatsKmBBfLpuxUPLw8xHlNd8Tv9Wpw/edit#gid=0",
                "cachedResultName": "Profile"
              },
              "documentId": {
                "__rl": true,
                "mode": "list",
                "value": "1Dm_PA5AUHaFe4qatsKmBBfLpuxUPLw8xHlNd8Tv9Wpw",
                "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1Dm_PA5AUHaFe4qatsKmBBfLpuxUPLw8xHlNd8Tv9Wpw/edit?usp=drivesdk",
                "cachedResultName": "Cal AI"
              },
              "descriptionType": "manual",
              "toolDescription": "=getUserData\nPurpose: Retrieve the user‚Äôs profile information.\nInputs: none.\nWhen to use: When the user asks about their profile info or targets."
            },
            "credentials": {
              "googleSheetsOAuth2Api": {
                "id": "VBWEx4HAgL8zZHao",
                "name": "Google Sheets account"
              }
            },
            "typeVersion": 4.7
          },
          {
            "id": "b4411d17-99e7-40c3-999b-21109d12e057",
            "name": "Get Report",
            "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
            "position": [
              2848,
              1808
            ],
            "parameters": {
              "workflowId": {
                "__rl": true,
                "mode": "id",
                "value": "={{ $workflow.id }}"
              },
              "description": "getReport\nPurpose: Generate or fetch the user‚Äôs daily nutrition report.\nInput required: date (string, format: YYYY-MM-DD).\nWhen to use: When the user asks to see their daily summary or report for a specific date.",
              "workflowInputs": {
                "value": {
                  "Date": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Date', ``, 'string') }}",
                  "User_ID": "={{ $json.chat_id }}"
                },
                "schema": [
                  {
                    "id": "User_ID",
                    "type": "string",
                    "display": true,
                    "removed": false,
                    "required": false,
                    "displayName": "User_ID",
                    "defaultMatch": false,
                    "canBeUsedToMatch": true
                  },
                  {
                    "id": "Date",
                    "type": "string",
                    "display": true,
                    "removed": false,
                    "required": false,
                    "displayName": "Date",
                    "defaultMatch": false,
                    "canBeUsedToMatch": true
                  }
                ],
                "mappingMode": "defineBelow",
                "matchingColumns": [],
                "attemptToConvertTypes": false,
                "convertFieldsToString": false
              }
            },
            "typeVersion": 2.2
          },
          {
            "id": "1df46a7c-3ef6-4698-93cc-75558e882ca9",
            "name": "Append Meal Data",
            "type": "n8n-nodes-base.googleSheetsTool",
            "position": [
              3424,
              1536
            ],
            "parameters": {
              "columns": {
                "value": {
                  "Date": "={{ $today.format(\"yyyy-LL-dd\") }}\n",
                  "Fats": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Fats', ``, 'string') }}",
                  "Carbs": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Carbs', ``, 'string') }}",
                  "User_ID": "={{ $json.chat_id }}",
                  "Calories": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Calories', ``, 'string') }}",
                  "Proteins": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Proteins', ``, 'string') }}",
                  "Meal_description": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Meal_description', ``, 'string') }}"
                },
                "schema": [
                  {
                    "id": "User_ID",
                    "type": "string",
                    "display": true,
                    "required": false,
                    "displayName": "User_ID",
                    "defaultMatch": false,
                    "canBeUsedToMatch": true
                  },
                  {
                    "id": "Date",
                    "type": "string",
                    "display": true,
                    "required": false,
                    "displayName": "Date",
                    "defaultMatch": false,
                    "canBeUsedToMatch": true
                  },
                  {
                    "id": "Meal_description",
                    "type": "string",
                    "display": true,
                    "required": false,
                    "displayName": "Meal_description",
                    "defaultMatch": false,
                    "canBeUsedToMatch": true
                  },
                  {
                    "id": "Calories",
                    "type": "string",
                    "display": true,
                    "required": false,
                    "displayName": "Calories",
                    "defaultMatch": false,
                    "canBeUsedToMatch": true
                  },
                  {
                    "id": "Proteins",
                    "type": "string",
                    "display": true,
                    "required": false,
                    "displayName": "Proteins",
                    "defaultMatch": false,
                    "canBeUsedToMatch": true
                  },
                  {
                    "id": "Carbs",
                    "type": "string",
                    "display": true,
                    "required": false,
                    "displayName": "Carbs",
                    "defaultMatch": false,
                    "canBeUsedToMatch": true
                  },
                  {
                    "id": "Fats",
                    "type": "string",
                    "display": true,
                    "required": false,
                    "displayName": "Fats",
                    "defaultMatch": false,
                    "canBeUsedToMatch": true
                  }
                ],
                "mappingMode": "defineBelow",
                "matchingColumns": [],
                "attemptToConvertTypes": false,
                "convertFieldsToString": false
              },
              "options": {},
              "operation": "append",
              "sheetName": {
                "__rl": true,
                "mode": "list",
                "value": 403788598,
                "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1Dm_PA5AUHaFe4qatsKmBBfLpuxUPLw8xHlNd8Tv9Wpw/edit#gid=403788598",
                "cachedResultName": "Meals"
              },
              "documentId": {
                "__rl": true,
                "mode": "list",
                "value": "1Dm_PA5AUHaFe4qatsKmBBfLpuxUPLw8xHlNd8Tv9Wpw",
                "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1Dm_PA5AUHaFe4qatsKmBBfLpuxUPLw8xHlNd8Tv9Wpw/edit?usp=drivesdk",
                "cachedResultName": "Cal AI"
              },
              "descriptionType": "manual",
              "toolDescription": "appendMealData\nPurpose: Store one meal entry into the Meals sheet.\nInputs required:\n\nMeal Description (string)\n\nCalories (number)\n\nProteins (number)\n\nCarbs (number)\n\nFat (number)\nWhen to use: Every time you receive structured meal information from image analysis."
            },
            "credentials": {
              "googleSheetsOAuth2Api": {
                "id": "VBWEx4HAgL8zZHao",
                "name": "Google Sheets account"
              }
            },
            "typeVersion": 4.7
          },
          {
            "id": "0e6b6065-de69-4ef8-af08-8f1c0016ca38",
            "name": "Sticky Note",
            "type": "n8n-nodes-base.stickyNote",
            "position": [
              368,
              240
            ],
            "parameters": {
              "width": 608,
              "height": 336,
              "content": "# üìò Cal AI Alternative ‚Äì Nutrition Assistant \n\nThis workflow implements a **Nutrition Assistant** that helps users log meals, track nutritional goals, and receive personalized reports.  \nThe system integrates **Telegram**, **Google Sheets**, and an **AI Agent (Gemini)** within **n8n**.\n\n‚úÖ **With this workflow, users can:**  \n- Register easily via Telegram.  \n- Log meals with text, voice, or images.  \n- Track nutrition goals automatically.  \n- Receive daily personalized reports.  "
            },
            "typeVersion": 1
          },
          {
            "id": "1d48fbab-a382-47f5-909a-4e1c2f4e8772",
            "name": "Get Data",
            "type": "n8n-nodes-base.set",
            "position": [
              3264,
              1808
            ],
            "parameters": {
              "options": {},
              "assignments": {
                "assignments": [
                  {
                    "id": "d3ff7d44-6241-41c6-ac56-4549ba0cbd6d",
                    "name": "Calories",
                    "type": "number",
                    "value": "={{ $json.Calories }}"
                  },
                  {
                    "id": "64afda83-d211-48fa-830e-c0b7ddb5d50e",
                    "name": "Proteins",
                    "type": "number",
                    "value": "={{ $json.Proteins }}"
                  },
                  {
                    "id": "ab3861af-5716-400b-a736-f5a2dc4713a7",
                    "name": "Carbs",
                    "type": "number",
                    "value": "={{ $json.Carbs }}"
                  },
                  {
                    "id": "cce6d192-9bc9-401e-98b0-697dc4ec8f08",
                    "name": "Fats",
                    "type": "number",
                    "value": "={{ $json.Fats }}"
                  }
                ]
              }
            },
            "typeVersion": 3.4
          },
          {
            "id": "2a40606e-6469-4081-8e22-8012b1c06d04",
            "name": "Get chart message",
            "type": "n8n-nodes-base.code",
            "position": [
              3776,
              2048
            ],
            "parameters": {
              "jsCode": "/**\n * Nutrition summary ‚Üí Telegram MarkdownV2 (n8n Code node)\n */\n\nconst MAX_TELEGRAM = 4096;\nconst SAFE_BUDGET = 4000; // margen de seguridad\n\n// ============ Helpers de barras ============\nfunction makeProgressBar(current, target, length = 20) {\n  const ratio = Math.min(current / target, 1);\n  const filled = Math.round(ratio * length);\n  const empty = length - filled;\n  return '‚ñà'.repeat(filled) + '‚ñë'.repeat(empty);\n}\n\nfunction percent(current, target) {\n  if (!target || target === 0) return 0;\n  return Math.round((current / target) * 100);\n}\n\n// ============ Helpers MarkdownV2 ============\nfunction escapeMarkdownV2(text) {\n  if (!text) return '';\n  return String(text).replace(/([\\\\_*[\\]()~`>#+\\-=|{}.!])/g, '\\\\$1');\n}\n\nfunction escapeForUrl(url) {\n  return String(url).replace(/[)\\\\]/g, '\\\\$&');\n}\n\nfunction normalizeAndValidateUrl(url) {\n  let raw = String(url || '').trim();\n  try {\n    const u = new URL(raw);\n    return u.toString();\n  } catch {}\n  const domainLike = /^[a-z0-9.-]+\\.[a-z]{2,}([/:?#].*)?$/i.test(raw);\n  if (domainLike) {\n    try {\n      const u2 = new URL('https://' + raw);\n      return u2.toString();\n    } catch {}\n  }\n  return null;\n}\n\nfunction normalizeHeadings(text) {\n  return text.replace(/^(#{1,6})\\s+(.*)$/gm, (m, hashes, title) => `*${title.trim()}*`);\n}\n\nfunction normalizeCommonMd(text) {\n  return String(text)\n    .replace(/\\*\\*([\\s\\S]*?)\\*\\*/g, '*$1*')\n    .replace(/__([\\s\\S]*?)__/g, '_$1_');\n}\n\nfunction processMarkdownV2Safe(inputText) {\n  if (!inputText) return '';\n\n  let text = normalizeCommonMd(String(inputText));\n  text = normalizeHeadings(text);\n\n  const placeholders = { links: [], bolds: [], italics: [], spoilers: [] };\n\n  // Links\n  text = text.replace(/\\[([^\\]\\n]+)\\]\\(([^)]+)\\)/g, (m, label, url) => {\n    const normalizedUrl = normalizeAndValidateUrl(url);\n    if (!normalizedUrl) return escapeMarkdownV2(label);\n    const idx = placeholders.links.length;\n    const ph = `‚ü¨L${idx}‚ü≠`;\n    const safeLabel = escapeMarkdownV2(label);\n    const safeUrl = escapeForUrl(normalizedUrl);\n    placeholders.links.push(`[${safeLabel}](${safeUrl})`);\n    return ph;\n  });\n\n  // Bold\n  text = text.replace(/\\*([\\s\\S]+?)\\*/g, (m, inner) => {\n    const idx = placeholders.bolds.length;\n    const ph = `‚ü¨B${idx}‚ü≠`;\n    placeholders.bolds.push(`*${escapeMarkdownV2(inner)}*`);\n    return ph;\n  });\n\n  // Italic\n  text = text.replace(/_([\\s\\S]+?)_/g, (m, inner) => {\n    const idx = placeholders.italics.length;\n    const ph = `‚ü¨I${idx}‚ü≠`;\n    placeholders.italics.push(`_${escapeMarkdownV2(inner)}_`);\n    return ph;\n  });\n\n  // Spoilers\n  text = text.replace(/\\|\\|([\\s\\S]+?)\\|\\|/g, (m, inner) => {\n    const idx = placeholders.spoilers.length;\n    const ph = `‚ü¨S${idx}‚ü≠`;\n    placeholders.spoilers.push(`||${escapeMarkdownV2(inner)}||`);\n    return ph;\n  });\n\n  text = escapeMarkdownV2(text);\n\n  placeholders.links.forEach((md, i) => { text = text.replace(`‚ü¨L${i}‚ü≠`, md); });\n  placeholders.bolds.forEach((md, i) => { text = text.replace(`‚ü¨B${i}‚ü≠`, md); });\n  placeholders.italics.forEach((md, i) => { text = text.replace(`‚ü¨I${i}‚ü≠`, md); });\n  placeholders.spoilers.forEach((md, i) => { text = text.replace(`‚ü¨S${i}‚ü≠`, md); });\n\n  return text;\n}\n\nfunction chunkForTelegram(text, maxLen = SAFE_BUDGET) {\n  if (!text || text.length <= maxLen) return [text || ''];\n\n  const parts = [];\n  let buffer = '';\n\n  const flush = () => {\n    if (buffer) {\n      parts.push(buffer);\n      buffer = '';\n    }\n  };\n\n  const paragraphs = text.split(/\\n{2,}/);\n  for (const p of paragraphs) {\n    const candidate = buffer ? buffer + '\\n\\n' + p : p;\n    if (candidate.length <= maxLen) {\n      buffer = candidate;\n      continue;\n    }\n    if (p.length <= maxLen) {\n      flush();\n      buffer = p;\n      continue;\n    }\n    flush();\n    const sentences = p.split(/(?<=[.!?‚Ä¶])\\s+(?=[^\\s])/u);\n    let sBuf = '';\n    for (const s of sentences) {\n      const sCandidate = sBuf ? sBuf + ' ' + s : s;\n      if (sCandidate.length <= maxLen) {\n        sBuf = sCandidate;\n        continue;\n      }\n      if (s.length <= maxLen) {\n        if (sBuf) parts.push(sBuf);\n        sBuf = s;\n        continue;\n      }\n      if (sBuf) { parts.push(sBuf); sBuf = ''; }\n      let wBuf = '';\n      const words = s.split(/\\s+/);\n      for (const w of words) {\n        const wCandidate = wBuf ? wBuf + ' ' + w : w;\n        if (wCandidate.length <= maxLen) {\n          wBuf = wCandidate;\n          continue;\n        }\n        if (w.length <= maxLen) {\n          if (wBuf) parts.push(wBuf);\n          wBuf = w;\n          continue;\n        }\n        if (wBuf) { parts.push(wBuf); wBuf = ''; }\n        const re = new RegExp(`.{1,${maxLen}}`, 'g');\n        const hardPieces = w.match(re) || [];\n        parts.push(...hardPieces);\n      }\n      if (wBuf) parts.push(wBuf);\n    }\n    if (sBuf) parts.push(sBuf);\n  }\n  if (buffer) parts.push(buffer);\n\n  return parts.flatMap(part => {\n    if (part.length <= MAX_TELEGRAM) return [part];\n    const re = new RegExp(`.{1,${SAFE_BUDGET}}`, 'g');\n    return part.match(re) || [];\n  });\n}\n\n// ============ MAIN ============\nconst inputItems = $input.all();\nconst out = [];\n\nfor (const item of inputItems) {\n  const j = item.json || {};\n\n  // Datos din√°micos\n  const name = j.Name || 'User';\n  const cal = j.Total_Calories || 0;\n  const calTarget = j.Calories_target || 1;\n\n  const prot = j.Total_Proteins || 0;\n  const protTarget = j.Protein_target || 1;\n\n  const carbs = j.Total_Carbs || 0;\n  const fats  = j.Total_Fats || 0;\n\n  // Construcci√≥n del mensaje\n  let msg = `*Hello ${name}*\\nHere is your nutrition summary:\\n\\n`;\n\n  msg += `üî• *Calories*: ${cal}/${calTarget} (${percent(cal, calTarget)}%)\\n`;\n  msg += makeProgressBar(cal, calTarget) + '\\n\\n';\n\n  msg += `üçó *Protein*: ${prot}/${protTarget} (${percent(prot, protTarget)}%)\\n`;\n  msg += makeProgressBar(prot, protTarget) + '\\n\\n';\n\n  msg += `üåæ *Carbs*: ${carbs} g\\n`;\n  msg += `ü•ë *Fats*: ${fats} g\\n`;\n\n  // Formateo seguro\n  const formatted = processMarkdownV2Safe(msg);\n  const chunks = chunkForTelegram(formatted, SAFE_BUDGET);\n\n  chunks.forEach((chunk, idx) => {\n    out.push({\n      json: {\n        ...j,\n        message: chunk,\n        message_part_index: idx + 1,\n        message_parts_total: chunks.length,\n      },\n      binary: item.binary,\n    });\n  });\n}\n\nreturn out;\n"
            },
            "typeVersion": 2
          },
          {
            "id": "dd89154b-8aa8-48dc-865a-6214e8ca0cd0",
            "name": "Unify data",
            "type": "n8n-nodes-base.code",
            "position": [
              3472,
              1808
            ],
            "parameters": {
              "jsCode": "// Get all input items\nconst items = $input.all();\n\n// Initialize accumulators\nlet totalCalories = 0;\nlet totalProteins = 0;\nlet totalCarbs = 0;\nlet totalFats = 0;\n\n// Sum up each field from every item\nfor (const item of items) {\n  const data = item.json;\n\n  totalCalories += Number(data.Calories || 0);\n  totalProteins += Number(data.Proteins || 0);\n  totalCarbs += Number(data.Carbs || 0);\n  totalFats += Number(data.Fats || 0);\n}\n\n// Return a single result with totals\nreturn [\n  {\n    json: {\n      Total_Calories: totalCalories,\n      Total_Proteins: totalProteins,\n      Total_Carbs: totalCarbs,\n      Total_Fats: totalFats,\n    }\n  }\n];\n"
            },
            "typeVersion": 2
          },
          {
            "id": "67260623-70d6-4e4b-aba6-9804c4396b67",
            "name": "Get report",
            "type": "n8n-nodes-base.executeWorkflowTrigger",
            "position": [
              2848,
              1920
            ],
            "parameters": {
              "workflowInputs": {
                "values": [
                  {
                    "name": "User_ID"
                  },
                  {
                    "name": "Date"
                  }
                ]
              }
            },
            "typeVersion": 1.1
          },
          {
            "id": "80fdb6f0-8d64-44aa-923c-9b94f9ce132f",
            "name": "Sticky Note1",
            "type": "n8n-nodes-base.stickyNote",
            "position": [
              1008,
              1024
            ],
            "parameters": {
              "color": 4,
              "width": 608,
              "height": 464,
              "content": ""
            },
            "typeVersion": 1
          },
          {
            "id": "d1917184-4c8e-42db-9bbf-a7ef28ca71f4",
            "name": "Sticky Note2",
            "type": "n8n-nodes-base.stickyNote",
            "position": [
              1744,
              880
            ],
            "parameters": {
              "color": 5,
              "width": 1104,
              "height": 720,
              "content": ""
            },
            "typeVersion": 1
          },
          {
            "id": "2ad00761-954b-4a7c-af46-25c74619176a",
            "name": "Sticky Note3",
            "type": "n8n-nodes-base.stickyNote",
            "position": [
              3024,
              1008
            ],
            "parameters": {
              "color": 6,
              "width": 896,
              "height": 720,
              "content": ""
            },
            "typeVersion": 1
          },
          {
            "id": "c7e182da-6f2a-4a8f-96df-8cbd0445b67e",
            "name": "Sticky Note4",
            "type": "n8n-nodes-base.stickyNote",
            "position": [
              1648,
              1696
            ],
            "parameters": {
              "color": 3,
              "width": 1104,
              "height": 528,
              "content": ""
            },
            "typeVersion": 1
          },
          {
            "id": "4ade95cd-0d9d-4ab3-bfbb-93d792a6d880",
            "name": "Sticky Note5",
            "type": "n8n-nodes-base.stickyNote",
            "position": [
              2784,
              1760
            ],
            "parameters": {
              "color": 2,
              "width": 1392,
              "height": 464,
              "content": ""
            },
            "typeVersion": 1
          },
          {
            "id": "659b06e0-1253-4f19-8e40-3f849515da68",
            "name": "Sticky Note6",
            "type": "n8n-nodes-base.stickyNote",
            "position": [
              2320,
              2272
            ],
            "parameters": {
              "color": 3,
              "width": 368,
              "height": 304,
              "content": "![](https://github.com/JarsRat/Images/blob/main/cal_ia_start.png?raw=true)\n"
            },
            "typeVersion": 1
          },
          {
            "id": "c1eebd5c-62fe-4794-badc-872a5e32dcd8",
            "name": "Sticky Note8",
            "type": "n8n-nodes-base.stickyNote",
            "position": [
              2432,
              512
            ],
            "parameters": {
              "color": 5,
              "width": 352,
              "height": 224,
              "content": "![](https://github.com/JarsRat/Images/blob/main/cal_ia_meal.png?raw=true)\n"
            },
            "typeVersion": 1
          },
          {
            "id": "80cf0536-6f63-4b7a-969e-245d8d5ca8cc",
            "name": "Send back message",
            "type": "n8n-nodes-base.set",
            "position": [
              3952,
              2048
            ],
            "parameters": {
              "options": {},
              "assignments": {
                "assignments": [
                  {
                    "id": "750d5bca-c08f-42bb-b9cc-5709c6fad4a9",
                    "name": "message",
                    "type": "string",
                    "value": "={{ $json.message }}"
                  }
                ]
              }
            },
            "typeVersion": 3.4
          },
          {
            "id": "e0da0385-fff5-4b95-a846-29bc9be1ffef",
            "name": "Sticky Note9",
            "type": "n8n-nodes-base.stickyNote",
            "position": [
              3456,
              2432
            ],
            "parameters": {
              "color": 2,
              "width": 368,
              "height": 208,
              "content": "![](https://github.com/JarsRat/Images/blob/main/cal_ia_report.png?raw=true)\n "
            },
            "typeVersion": 1
          },
          {
            "id": "af1fc6e8-f21b-49fc-8613-36522fbad32d",
            "name": "Sticky Note7",
            "type": "n8n-nodes-base.stickyNote",
            "position": [
              1008,
              624
            ],
            "parameters": {
              "color": 4,
              "width": 496,
              "height": 352,
              "content": "## Telegram Trigger & User Check\n\n**Purpose:** Handle incoming messages and validate user registration.\n\n1. **Telegram Trigger**  \n   - Captures user messages (text, voice, or images) from Telegram.\n\n2. **User Registration Check**  \n   - Verifies if the sender exists in the `Profile` table (Google Sheets).\n   - If the user **is not registered** ‚Üí Redirects to **Zone Red (Register Agent)**.  \n   - If the user **is registered** ‚Üí Forwards the message to **Zone Blue (Message Processing)**."
            },
            "typeVersion": 1
          },
          {
            "id": "f5d317bb-e0e1-4f7d-8ee4-e3b7d4262f36",
            "name": "Sticky Note10",
            "type": "n8n-nodes-base.stickyNote",
            "position": [
              1648,
              2256
            ],
            "parameters": {
              "color": 3,
              "width": 624,
              "height": 496,
              "content": "## Register Agent\n\n**Purpose:** Register new users and set up nutritional goals.\n\n1. **Register Agent**  \n   - Guides new users through the registration process.  \n   - Collects user details:\n     - **Name**\n     - **Calories_target**\n     - **Protein_target**\n\n2. **Target Assistance**  \n   - If the user is unsure about their targets, the agent asks simple questions to help determine suitable daily calorie and protein goals.  \n   - ‚ö†Ô∏è **Note:** No personal health data (e.g., weight, height) is stored.\n\n3. **Database Update**  \n   - Once confirmed, the new profile is added to the **Profile Table** in Google Sheets.  \n   - The user is now considered \"registered\" and future messages will be processed in **Zone Blue**.\n"
            },
            "typeVersion": 1
          },
          {
            "id": "6c68706c-0c00-4e44-8338-89a7c5e655c1",
            "name": "Sticky Note11",
            "type": "n8n-nodes-base.stickyNote",
            "position": [
              1744,
              336
            ],
            "parameters": {
              "color": 5,
              "width": 672,
              "height": 512,
              "content": "## Message Processing\n\n**Purpose:** Classify and process different types of user messages.\n\n1. **Message Routing**  \n   - Determines the type of message received:\n     - **Text** ‚Üí Sent directly to the AI Agent.  \n     - **Voice/Audio** ‚Üí Downloaded, transcribed, and converted into text.  \n     - **Image** ‚Üí Downloaded and analyzed by Google AI Vision.\n\n2. **Image Analysis (Food Recognition)**  \n   - Google AI receives a custom prompt to analyze food images.  \n   - The AI:\n     - Identifies food items.  \n     - Estimates nutritional values (Calories, Proteins, Carbs, Fats).  \n     - Returns the analysis in a structured, human-readable text format.  \n\n3. **Error Handling**  \n   - If processing fails, a fallback node (`get_error_message`) sends an error notification to the user.\n"
            },
            "typeVersion": 1
          },
          {
            "id": "18b4c021-2564-44eb-87db-cc64191777bf",
            "name": "Sticky Note12",
            "type": "n8n-nodes-base.stickyNote",
            "position": [
              2800,
              2288
            ],
            "parameters": {
              "color": 2,
              "width": 624,
              "height": 448,
              "content": "## Report Subworkflow\n\n**Purpose:** Generate personalized daily nutrition reports.\n\n1. **Get Meals & Targets**  \n   - Retrieves all logged meals for the selected day from the database.  \n   - Fetches the user‚Äôs nutrition targets from the profile.\n\n2. **Progress Calculation**  \n   - Runs a code node to calculate:\n     - Daily totals (Calories, Proteins, etc.)  \n     - Percentage progress toward targets.\n\n3. **Report Formatting**  \n   - Returns a **personalized message** with:\n     - Summary of meals logged.  \n     - Totals and percentages.  \n     - A **progress bar** visualization of calories and proteins.  \n"
            },
            "typeVersion": 1
          },
          {
            "id": "16a7e256-e252-4492-8e62-2f2044e4d95a",
            "name": "Sticky Note13",
            "type": "n8n-nodes-base.stickyNote",
            "position": [
              3024,
              464
            ],
            "parameters": {
              "color": 6,
              "width": 480,
              "height": 528,
              "content": "##  Main AI Agent\n\n**Purpose:** Central decision-making agent for all user interactions.\n\nThe AI Agent (Gemini) operates with **four key tools**:\n\n1. **getProfileData**  \n   - Retrieves user profile (calorie/protein targets).\n\n2. **updateProfileData**  \n   - Updates user goals upon request.\n\n3. **appendMealData**  \n   - Adds new meal entries to the **Meals Table** in Google Sheets.\n\n4. **getReport**  \n   - Triggers **Zone Yellow** to generate a daily progress report.\n\n**Conversation Flow:**  \n- Managed with the **Simple Memory node**, ensuring contextual and natural dialogue.  \n- All responses are returned to the user via Telegram.\n"
            },
            "typeVersion": 1
          },
          {
            "id": "b59a26f2-a478-4be8-a70c-7ba70face917",
            "name": "Sticky Note14",
            "type": "n8n-nodes-base.stickyNote",
            "position": [
              3536,
              512
            ],
            "parameters": {
              "color": 6,
              "width": 368,
              "content": "![](https://github.com/JarsRat/Images/blob/main/cal_ia_target.png?raw=true)\n"
            },
            "typeVersion": 1
          },
          {
            "id": "e1c875c3-2720-41b7-93d4-794ed182790d",
            "name": "Sticky Note15",
            "type": "n8n-nodes-base.stickyNote",
            "position": [
              3536,
              736
            ],
            "parameters": {
              "color": 2,
              "width": 368,
              "height": 208,
              "content": "## üí° Need Assistance?\n\nIf you‚Äôd like help customizing or extending this workflow, feel free to reach out:  \n\nüìß Email: [johnsilva11031@gmail.com](mailto:johnsilva11031@gmail.com)  \nüîó LinkedIn: [John Alejandro Silva Rodr√≠guez](https://www.linkedin.com/in/john-alejandro-silva-rodriguez-48093526b/)"
            },
            "typeVersion": 1
          },
          {
            "id": "4dc3eac9-6640-4cd8-b07d-44254df59f48",
            "name": "Telegram Trigger",
            "type": "n8n-nodes-base.telegramTrigger",
            "position": [
              1072,
              1200
            ],
            "webhookId": "8790c189-591f-4f66-8025-fa7737fd6484",
            "parameters": {
              "updates": [
                "message"
              ],
              "additionalFields": {}
            },
            "credentials": {
              "telegramApi": {
                "id": "yxDk2RnbewqwPdMO",
                "name": "Pruebas"
              }
            },
            "typeVersion": 1.2
          },
          {
            "id": "4c0c1bc0-6f7d-4470-ab98-15ac3afc422a",
            "name": "Sticky Note16",
            "type": "n8n-nodes-base.stickyNote",
            "position": [
              352,
              624
            ],
            "parameters": {
              "color": 7,
              "width": 608,
              "height": 2032,
              "content": "# **Documentation: Configuring the Telegram Nutrition AI Assistant Workflow**\n\nThis guide provides step-by-step instructions for setting up the Google Sheets database and configuring the required n8n nodes to make the workflow fully operational.\n\n---\n\n### **Important Notes on Errors and Customization**\n\n*   **Public Sheet Errors:** If you encounter persistent errors while using the pre-configured public Google Sheet, it is highly probable that another user has modified its structure (e.g., deleted or renamed a column header), causing the workflow to fail. The most reliable way to resolve this is to follow the instructions in **Step 1** to set up and connect your own private Google Sheet.\n\n*   **Connection Issues:** Please be aware that intermittent connection errors with Google services can occasionally occur. If a Google (Sheets or Gemini) node fails, simply re-executing the step or the entire workflow is often enough to resolve the issue.\n\n*   **Customizing the AI Model:** While this workflow is pre-configured with Google Gemini for all AI-driven tasks, n8n's modular design allows for easy customization. You can swap the Gemini nodes for any large language model (LLM) you prefer, such as those from OpenAI, Anthropic, or others, to better suit your specific needs or existing subscriptions.\n\n---\n\n## **Step 1: Setting Up Your Google Sheets**\n\nYou will need a Google Sheet with two specific tabs (\"Sheets\") to act as your database.\n\n1.  **Create a Copy of the Template**\n    The easiest way to start is by making a copy of the official template. Open the link below and go to `File > Make a copy`.\n    *   **Template Link:** [Google Sheets Nutrition Template](https://docs.google.com/spreadsheets/d/11kI8q0oB2vPzbVJOItdna5o0y7szuoprJSA8v0Bt-Ec/edit?usp=sharing)\n\n2.  **Verify Sheet Structure**\n    Ensure your copy has the following two tabs with the exact column headers:\n\n    *   **Sheet 1: `Profile`**\n        This sheet stores user information and their nutritional goals.\n        *   `User_ID`\n        *   `Name`\n        *   `Calories_target`\n        *   `Protein_target`\n\n    *   **Sheet 2: `Meals`**\n        This sheet logs every meal entry for all users.\n        *   `User_ID`\n        *   `Date`\n        *   `Meal_description`\n        *   `Calories`\n        *   `Proteins`\n        *   `Carbs`\n        *   `Fats`\n\n3.  **Get Your Spreadsheet ID**\n    Copy the ID from your new spreadsheet's URL. It is the long string of characters between `/d/` and `/edit`.\n    `https://docs.google.com/spreadsheets/d/`**`[YOUR_SPREADSHEET_ID]`**`/edit`\n\n---\n\n## **Step 2: Configuring the n8n Google Sheets Nodes**\n\n>Now it's time to connect the workflow to your new Google Sheet. The following documentation is organized to match the colored sections you see on the n8n canvas. Each part of this guide details the specific configuration for the Google Sheets nodes located within its corresponding colored section.\n\n---\n\nBy following these steps, you will have successfully reconfigured the workflow to use your own private and secure Google Sheet, ensuring its long-term stability and the privacy of your data."
            },
            "typeVersion": 1
          },
          {
            "id": "64dd86de-16fe-4e84-a65e-e43370d618a7",
            "name": "Sticky Note17",
            "type": "n8n-nodes-base.stickyNote",
            "position": [
              1008,
              1520
            ],
            "parameters": {
              "color": 7,
              "width": 608,
              "height": 1216,
              "content": "#### **üü© Green Section: Telegram Trigger & User Check**\n\nThis section checks if a user is already registered.\n\n**Node: `Registered?`**\n*   **Purpose:** Looks for the user's `chat.id` in the `Profile` sheet to see if they exist.\n*   **Configuration:**\n    1.  **Credential to connect with:** Select your Google Sheets account credential.\n    2.  **Operation:** `Get Row(s)`.\n    3.  **Document:** Select your Google Sheet document (\"Cal AI\" in the example).\n    4.  **Sheet:** Select `Profile`.\n    5.  **Filters > Column:** `User_ID`.\n    6.  **Filters > Value:** Set this to the following expression to get the chat ID from the Telegram trigger: `{{ $('Telegram Trigger').item.json.message.chat.id }}`.\n![](https://github.com/JarsRat/Images/blob/main/Documentation/Screenshot%202025-08-28%20070009.png?raw=true)"
            },
            "typeVersion": 1
          },
          {
            "id": "c864f199-349f-4d01-b014-45967763c3af",
            "name": "Sticky Note18",
            "type": "n8n-nodes-base.stickyNote",
            "position": [
              1648,
              2784
            ],
            "parameters": {
              "color": 7,
              "width": 608,
              "height": 1344,
              "content": "#### **üü• Red Section: Register Agent**\n\nThis section handles the creation of a new user profile.\n\n**Node: `Register User`**\n*   **Purpose:** Adds a new row with the new user's information to the `Profile` sheet after they complete the registration dialogue.\n*   **Configuration:**\n    1.  **Credential to connect with:** Select your Google Sheets account credential.\n    2.  **Operation:** `Append Row`.\n    3.  **Document:** Select your Google Sheet.\n    4.  **Sheet:** Select `Profile`.\n    5.  **Mapping Column Mode:** `Map Each Column Manually`.\n    6.  **Values to Send:**\n        *   **User\\_ID:** Set this to the expression that holds the user's chat ID, for example: `{{ $json.chat_id }}`.\n        *   **Name, Calories\\_target, Protein\\_target:** These fields will be populated dynamically by the AI model (`Register Agent`) that runs just before this node. You don't need to enter a static value here; the workflow will automatically pass the extracted information.\n![](https://github.com/JarsRat/Images/blob/main/Documentation/Screenshot%202025-08-28%20070403.png?raw=true)"
            },
            "typeVersion": 1
          },
          {
            "id": "801026e6-b6cf-42c1-9da9-3a6d689e2833",
            "name": "Sticky Note19",
            "type": "n8n-nodes-base.stickyNote",
            "position": [
              3952,
              416
            ],
            "parameters": {
              "color": 7,
              "width": 608,
              "height": 1328,
              "content": "#### **üü™ Purple Section: Main AI Agent**\n\nThis is the core section that handles user interactions, including retrieving data, logging meals, and updating profiles.\n\n**Node: `Get Profile Data`**\n*   **Purpose:** Retrieves the user's profile (including their goals) from the `Profile` sheet. This provides the AI Agent with the necessary context for the conversation.\n*   **Configuration:**\n    1.  **Credential to connect with:** Select your Google Sheets account credential.\n    2.  **Operation:** `Get Row(s)`.\n    3.  **Document:** Select your Google Sheet.\n    4.  **Sheet:** Select `Profile`.\n    5.  **Filters > Column:** `User_ID`.\n    6.  **Filters > Value:** Use an expression to reference the user's chat ID from the input, for example: `{{ $json.chat_id }}`.\n\n![](https://github.com/JarsRat/Images/blob/main/Documentation/Screenshot%202025-08-28%20070500.png?raw=true)\n\n\n\n"
            },
            "typeVersion": 1
          },
          {
            "id": "0324ea13-1eb3-439d-a206-4d717bb81136",
            "name": "Sticky Note20",
            "type": "n8n-nodes-base.stickyNote",
            "position": [
              4592,
              416
            ],
            "parameters": {
              "color": 7,
              "width": 608,
              "height": 1328,
              "content": "**Node: `Append Meal Data`**\n*   **Purpose:** Logs a new meal into the `Meals` sheet after the AI has analyzed the user's text, voice, or image input.\n*   **Configuration:**\n    1.  **Credential to connect with:** Select your Google Sheets account credential.\n    2.  **Operation:** `Append Row`.\n    3.  **Document:** Select your Google Sheet.\n    4.  **Sheet:** Select `Meals`.\n    5.  **Values to Send:**\n        *   **User\\_ID:** `{{ $json.chat_id }}`.\n        *   **Date:** `{{ $today.format(\"YYYY-LL-DD\") }}` (This sets the current date for the meal entry).\n        *   **Meal\\_description, Calories, Proteins, Carbs, Fats:** These fields are populated dynamically by the AI model. The workflow will pass the extracted nutritional data to this node.\n\n![](https://github.com/JarsRat/Images/blob/main/Documentation/Screenshot%202025-08-28%20070542.png?raw=true)"
            },
            "typeVersion": 1
          },
          {
            "id": "7d7772f4-d959-4820-8043-55cdbe71eb44",
            "name": "Sticky Note21",
            "type": "n8n-nodes-base.stickyNote",
            "position": [
              5232,
              416
            ],
            "parameters": {
              "color": 7,
              "width": 608,
              "height": 1328,
              "content": "**Node: `Update Profile Data`**\n*   **Purpose:** Modifies an existing user's record in the `Profile` sheet, typically used when a user asks to change their calorie or protein goals.\n*   **Configuration:**\n    1.  **Credential to connect with:** Select your Google Sheets account credential.\n    2.  **Operation:** `Update Row`.\n    3.  **Document:** Select your Google Sheet.\n    4.  **Sheet:** Select `Profile`.\n    5.  **Column to match on:** `User_ID`. This tells the node which column to use to find the correct row to update.\n    6.  **Values to Send:**\n        *   **User\\_ID (using to match):** `{{ $json.chat_id }}`. This value is used to find the right row.\n        *   **Name, Calories\\_target, Protein\\_target:** These are the fields to be updated. The AI Agent will provide the new values, which the workflow will pass into these fields.\n\n![](https://github.com/JarsRat/Images/blob/main/Documentation/Screenshot%202025-08-28%20070601.png?raw=truee)"
            },
            "typeVersion": 1
          },
          {
            "id": "1686d6af-3214-4fb2-9042-afee6b2942af",
            "name": "Sticky Note22",
            "type": "n8n-nodes-base.stickyNote",
            "position": [
              2800,
              2784
            ],
            "parameters": {
              "color": 7,
              "width": 608,
              "height": 1408,
              "content": "#### **üü® Yellow Section: Report Subworkflow**\n\nThis subworkflow is triggered to generate and send a daily nutrition report to the user.\n\n**Node: `Get Meals Info`**\n*   **Purpose:** Fetches all meals logged by a specific user for the current day from the `Meals` sheet.\n*   **Configuration:**\n    1.  **Credential to connect with:** Select your Google Sheets account credential.\n    2.  **Operation:** `Get Row(s)`.\n    3.  **Document:** Select your Google Sheet.\n    4.  **Sheet:** Select `Meals`.\n    5.  **Filters:**\n        *   **Filter 1:**\n            *   **Column:** `Date`.\n            *   **Value:** `{{ $json.Date }}` (or the expression representing the current date from the input).\n        *   **Filter 2 (Recommended):**\n            *   Click **Add Filter**.\n            *   **Combine Filters:** `AND`.\n            *   **Column:** `User_ID`.\n            *   **Value:** `{{ $json.User_ID }}` (or the expression for the user's ID from the input). This is critical to ensure you only get meals for the correct user.\n\n![](https://github.com/JarsRat/Images/blob/main/Documentation/Screenshot%202025-08-28%20070616.png?raw=true)\n\n\n\n---"
            },
            "typeVersion": 1
          },
          {
            "id": "80401901-9a63-46a8-863d-7851b523904e",
            "name": "Sticky Note23",
            "type": "n8n-nodes-base.stickyNote",
            "position": [
              3456,
              2784
            ],
            "parameters": {
              "color": 7,
              "width": 608,
              "height": 1408,
              "content": "**Node: `Get User Info`**\n*   **Purpose:** Retrieves the user's goals from the `Profile` sheet to calculate their progress in the daily report.\n*   **Configuration:**\n    1.  **Credential to connect with:** Select your Google Sheets account credential.\n    2.  **Operation:** `Get Row(s)`.\n    3.  **Document:** Select your Google Sheet.\n    4.  **Sheet:** Select `Profile`.\n    5.  **Filters > Add Filter:**\n        *   **Column:** `User_ID`.\n        *   **Value:** Use an expression that references the User ID passed into the subworkflow, for example: `{{ $json.User_ID }}`.\n\n![](https://github.com/JarsRat/Images/blob/main/Documentation/Correction.png?raw=true)"
            },
            "typeVersion": 1
          },
          {
            "id": "d0d1277d-ede9-475c-9df9-a12a7587b8ff",
            "name": "Merge",
            "type": "n8n-nodes-base.merge",
            "position": [
              3616,
              2048
            ],
            "parameters": {
              "mode": "combine",
              "options": {},
              "combineBy": "combineByPosition"
            },
            "typeVersion": 3.2
          }
        ],
        "pinData": {},
        "connections": {
          "If": {
            "main": [
              [
                {
                  "node": "Input Message Router1",
                  "type": "main",
                  "index": 0
                }
              ],
              [
                {
                  "node": "get_message (register)",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          },
          "Merge": {
            "main": [
              [
                {
                  "node": "Get chart message",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          },
          "Fix mime": {
            "main": [
              [
                {
                  "node": "Analyze voice message",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          },
          "Get Data": {
            "main": [
              [
                {
                  "node": "Unify data",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          },
          "Fix mime5": {
            "main": [
              [
                {
                  "node": "Analyze image",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          },
          "MarkdownV": {
            "main": [
              [
                {
                  "node": "Send a text message1",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          },
          "Typing‚Ä¶": {
            "main": [
              []
            ]
          },
          "Get Report": {
            "ai_tool": [
              [
                {
                  "node": "Cal IA Agent",
                  "type": "ai_tool",
                  "index": 0
                }
              ]
            ]
          },
          "Get report": {
            "main": [
              [
                {
                  "node": "Get Meals Info",
                  "type": "main",
                  "index": 0
                },
                {
                  "node": "Get User Info",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          },
          "MarkdownV2": {
            "main": [
              [
                {
                  "node": "Send a text message",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          },
          "Unify data": {
            "main": [
              [
                {
                  "node": "Merge",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          },
          "Registered?": {
            "main": [
              [
                {
                  "node": "If",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          },
          "Cal IA Agent": {
            "main": [
              [
                {
                  "node": "MarkdownV2",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          },
          "Analyze image": {
            "main": [
              [
                {
                  "node": "get_message (Media  message)",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          },
          "Get User Info": {
            "main": [
              [
                {
                  "node": "Merge",
                  "type": "main",
                  "index": 1
                }
              ]
            ]
          },
          "Register User": {
            "ai_tool": [
              [
                {
                  "node": "Register Agent",
                  "type": "ai_tool",
                  "index": 0
                }
              ]
            ]
          },
          "Simple Memory": {
            "ai_memory": [
              [
                {
                  "node": "Cal IA Agent",
                  "type": "ai_memory",
                  "index": 0
                }
              ]
            ]
          },
          "Download IMAGE": {
            "main": [
              [
                {
                  "node": "Fix mime5",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          },
          "Get Meals Info": {
            "main": [
              [
                {
                  "node": "Get Data",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          },
          "Register Agent": {
            "main": [
              [
                {
                  "node": "MarkdownV",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          },
          "Simple Memory1": {
            "ai_memory": [
              [
                {
                  "node": "Register Agent",
                  "type": "ai_memory",
                  "index": 0
                }
              ]
            ]
          },
          "Append Meal Data": {
            "ai_tool": [
              [
                {
                  "node": "Cal IA Agent",
                  "type": "ai_tool",
                  "index": 0
                }
              ]
            ]
          },
          "Get Profile Data": {
            "ai_tool": [
              [
                {
                  "node": "Cal IA Agent",
                  "type": "ai_tool",
                  "index": 0
                }
              ]
            ]
          },
          "Telegram Trigger": {
            "main": [
              [
                {
                  "node": "Registered?",
                  "type": "main",
                  "index": 0
                },
                {
                  "node": "Typing‚Ä¶",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          },
          "Get chart message": {
            "main": [
              [
                {
                  "node": "Send back message",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          },
          "get_error_message1": {
            "main": [
              [
                {
                  "node": "Cal IA Agent",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          },
          "get_message (text)": {
            "main": [
              [
                {
                  "node": "Cal IA Agent",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          },
          "Update Profile Data": {
            "ai_tool": [
              [
                {
                  "node": "Cal IA Agent",
                  "type": "ai_tool",
                  "index": 0
                }
              ]
            ]
          },
          "Analyze voice message": {
            "main": [
              [
                {
                  "node": "get_message (Audio/Video message)",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          },
          "Input Message Router1": {
            "main": [
              [
                {
                  "node": "get_message (text)",
                  "type": "main",
                  "index": 0
                }
              ],
              [
                {
                  "node": "Download Voice Message",
                  "type": "main",
                  "index": 0
                }
              ],
              [
                {
                  "node": "Download IMAGE",
                  "type": "main",
                  "index": 0
                }
              ],
              [
                {
                  "node": "get_error_message1",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          },
          "Download Voice Message": {
            "main": [
              [
                {
                  "node": "Fix mime",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          },
          "get_message (register)": {
            "main": [
              [
                {
                  "node": "Register Agent",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          },
          "Google Gemini Chat Model": {
            "ai_languageModel": [
              [
                {
                  "node": "Cal IA Agent",
                  "type": "ai_languageModel",
                  "index": 0
                }
              ]
            ]
          },
          "Google Gemini Chat Model1": {
            "ai_languageModel": [
              [
                {
                  "node": "Register Agent",
                  "type": "ai_languageModel",
                  "index": 0
                }
              ]
            ]
          },
          "get_message (Media  message)": {
            "main": [
              [
                {
                  "node": "Cal IA Agent",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          },
          "get_message (Audio/Video message)": {
            "main": [
              [
                {
                  "node": "Cal IA Agent",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          }
        }
      }
    },
    {
      "id": 5148,
      "name": "Local Chatbot with Retrieval Augmented Generation (RAG)",
      "description": "## Build a 100% local RAG with n8n, Ollama and Qdrant. This agent uses a semantic database (Qdrant) to answer questions about PDF files.\n\n## Tutorial\n![thumbnail.png](fileId:1589)\n[Click here to view the YouTube Tutorial](https://youtu.be/maZ_fF57yhE)\n\n## How it works\nBuild a chatbot that answers based on documents you provide it (Retrieval Augmented Generation). You can upload as many PDF files as you want to the Qdrant database. The chatbot will use its retrieval tool to fetch the chunks and use them to answer questions.\n\n## Installation\n1. Install n8n + Ollama + Qdrant using the [Self-hosted AI starter kit](https://github.com/n8n-io/self-hosted-ai-starter-kit)\n2. Make sure to install Llama 3.2 and mxbai-embed-large as embeddings model.\n\n## How to use it\n1. First run the \"Data Ingestion\" part and upload as many PDF files as you want\n2. Run the Chatbot and start asking questions about the documents you uploaded\n",
      "totalViews": 64997,
      "createdAt": "2025-06-23T10:40:17.187Z",
      "author": "thomasjanssen-tech",
      "nodeTypes": [
        "n8n-nodes-base.formTrigger",
        "@n8n/n8n-nodes-langchain.vectorStoreQdrant",
        "@n8n/n8n-nodes-langchain.embeddingsOllama",
        "@n8n/n8n-nodes-langchain.documentDefaultDataLoader",
        "@n8n/n8n-nodes-langchain.textSplitterRecursiveCharacterTextSplitter",
        "@n8n/n8n-nodes-langchain.chatTrigger",
        "@n8n/n8n-nodes-langchain.agent",
        "@n8n/n8n-nodes-langchain.lmChatOllama",
        "@n8n/n8n-nodes-langchain.memoryBufferWindow"
      ],
      "nodeCount": 13,
      "connectionCount": 9,
      "categories": [
        "Internal Wiki",
        "AI RAG"
      ],
      "workflowJson": {
        "id": "L9nteAq0NLYqIGxH",
        "meta": {
          "instanceId": "558d88703fb65b2d0e44613bc35916258b0f0bf983c5d4730c00c424b77ca36a",
          "templateCredsSetupCompleted": true
        },
        "name": "RAG Pipeline",
        "tags": [],
        "nodes": [
          {
            "id": "a00e5b5b-1cc1-4272-9790-8ffde3c92efb",
            "name": "On form submission",
            "type": "n8n-nodes-base.formTrigger",
            "position": [
              0,
              0
            ],
            "webhookId": "4e1e20d4-f759-42c8-8439-87b93f43aa7c",
            "parameters": {
              "options": {},
              "formTitle": "Add your file here",
              "formFields": {
                "values": [
                  {
                    "fieldType": "file",
                    "fieldLabel": "File",
                    "requiredField": true,
                    "acceptFileTypes": ".pdf"
                  }
                ]
              }
            },
            "typeVersion": 2.2
          },
          {
            "id": "1218186e-a93e-4e05-b47e-a395f28cf5f9",
            "name": "Qdrant Vector Store",
            "type": "@n8n/n8n-nodes-langchain.vectorStoreQdrant",
            "position": [
              220,
              0
            ],
            "parameters": {
              "mode": "insert",
              "options": {},
              "qdrantCollection": {
                "__rl": true,
                "mode": "id",
                "value": "rag_collection"
              }
            },
            "credentials": {
              "qdrantApi": {
                "id": "sFfERYppMeBnFNeA",
                "name": "Local QdrantApi database"
              }
            },
            "typeVersion": 1.2
          },
          {
            "id": "9c7fb858-b571-4626-b976-d3e1995c464b",
            "name": "Embeddings Ollama",
            "type": "@n8n/n8n-nodes-langchain.embeddingsOllama",
            "position": [
              60,
              220
            ],
            "parameters": {
              "model": "mxbai-embed-large:latest"
            },
            "credentials": {
              "ollamaApi": {
                "id": "xHuYe0MDGOs9IpBW",
                "name": "Local Ollama service"
              }
            },
            "typeVersion": 1
          },
          {
            "id": "af14443b-ae01-48dc-8552-5ded7a27fce2",
            "name": "Default Data Loader",
            "type": "@n8n/n8n-nodes-langchain.documentDefaultDataLoader",
            "position": [
              360,
              220
            ],
            "parameters": {
              "options": {},
              "dataType": "binary"
            },
            "typeVersion": 1
          },
          {
            "id": "660380c5-63da-4404-98e6-f9c0ee9aaa90",
            "name": "Recursive Character Text Splitter",
            "type": "@n8n/n8n-nodes-langchain.textSplitterRecursiveCharacterTextSplitter",
            "position": [
              460,
              440
            ],
            "parameters": {
              "options": {},
              "chunkSize": 200,
              "chunkOverlap": 50
            },
            "typeVersion": 1
          },
          {
            "id": "49dbe387-751f-4a2e-8803-290bc2c06ec5",
            "name": "Sticky Note",
            "type": "n8n-nodes-base.stickyNote",
            "position": [
              -140,
              -100
            ],
            "parameters": {
              "color": 3,
              "width": 840,
              "height": 700,
              "content": "## Data Ingestion\n**Add data to the semantic database"
            },
            "typeVersion": 1
          },
          {
            "id": "45683271-af59-41d0-9e69-af721d566661",
            "name": "When chat message received",
            "type": "@n8n/n8n-nodes-langchain.chatTrigger",
            "position": [
              940,
              -20
            ],
            "webhookId": "5e56a263-3a40-44bd-bc9d-1cfb3bc2a87d",
            "parameters": {
              "options": {}
            },
            "typeVersion": 1.1
          },
          {
            "id": "af562588-2e8c-4c0b-b041-d6fc8c0affd0",
            "name": "AI Agent",
            "type": "@n8n/n8n-nodes-langchain.agent",
            "position": [
              1220,
              -20
            ],
            "parameters": {
              "options": {
                "systemMessage": "You are a helpful assistant. You have access to a tool to retrieve data from a semantic database to answer questions. Always provide arguments when you execute the tool"
              }
            },
            "typeVersion": 2
          },
          {
            "id": "4d924b4a-fe07-4606-8385-613d6ea14991",
            "name": "Ollama Chat Model",
            "type": "@n8n/n8n-nodes-langchain.lmChatOllama",
            "position": [
              1060,
              220
            ],
            "parameters": {
              "options": {}
            },
            "credentials": {
              "ollamaApi": {
                "id": "xHuYe0MDGOs9IpBW",
                "name": "Local Ollama service"
              }
            },
            "typeVersion": 1
          },
          {
            "id": "de87b7bb-6fec-4d8f-a77a-25bc3a30a038",
            "name": "Simple Memory",
            "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
            "position": [
              1260,
              220
            ],
            "parameters": {},
            "typeVersion": 1.3
          },
          {
            "id": "16261539-5218-4df1-8b14-915dd3377167",
            "name": "Qdrant Vector Store1",
            "type": "@n8n/n8n-nodes-langchain.vectorStoreQdrant",
            "position": [
              1540,
              240
            ],
            "parameters": {
              "mode": "retrieve-as-tool",
              "options": {},
              "toolName": "retriever",
              "toolDescription": "Retrieve data from a semantic database to answer questions",
              "qdrantCollection": {
                "__rl": true,
                "mode": "id",
                "value": "rag_collection"
              }
            },
            "credentials": {
              "qdrantApi": {
                "id": "sFfERYppMeBnFNeA",
                "name": "Local QdrantApi database"
              }
            },
            "typeVersion": 1.2
          },
          {
            "id": "57d3be1d-73cd-4464-a3f3-7dd4a3157cdf",
            "name": "Embeddings Ollama1",
            "type": "@n8n/n8n-nodes-langchain.embeddingsOllama",
            "position": [
              1460,
              440
            ],
            "parameters": {
              "model": "mxbai-embed-large:latest"
            },
            "credentials": {
              "ollamaApi": {
                "id": "xHuYe0MDGOs9IpBW",
                "name": "Local Ollama service"
              }
            },
            "typeVersion": 1
          },
          {
            "id": "5919cc58-05f4-42c8-aada-3782a16574d9",
            "name": "Sticky Note1",
            "type": "n8n-nodes-base.stickyNote",
            "position": [
              740,
              -100
            ],
            "parameters": {
              "color": 4,
              "width": 1200,
              "height": 700,
              "content": "## RAG Chatbot\n**Chat with your data"
            },
            "typeVersion": 1
          }
        ],
        "active": false,
        "pinData": {},
        "settings": {
          "executionOrder": "v1"
        },
        "versionId": "895c0261-fbf5-4bb6-9581-4cea3c4d20bd",
        "connections": {
          "Simple Memory": {
            "ai_memory": [
              [
                {
                  "node": "AI Agent",
                  "type": "ai_memory",
                  "index": 0
                }
              ]
            ]
          },
          "Embeddings Ollama": {
            "ai_embedding": [
              [
                {
                  "node": "Qdrant Vector Store",
                  "type": "ai_embedding",
                  "index": 0
                }
              ]
            ]
          },
          "Ollama Chat Model": {
            "ai_languageModel": [
              [
                {
                  "node": "AI Agent",
                  "type": "ai_languageModel",
                  "index": 0
                }
              ]
            ]
          },
          "Embeddings Ollama1": {
            "ai_embedding": [
              [
                {
                  "node": "Qdrant Vector Store1",
                  "type": "ai_embedding",
                  "index": 0
                }
              ]
            ]
          },
          "On form submission": {
            "main": [
              [
                {
                  "node": "Qdrant Vector Store",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          },
          "Default Data Loader": {
            "ai_document": [
              [
                {
                  "node": "Qdrant Vector Store",
                  "type": "ai_document",
                  "index": 0
                }
              ]
            ]
          },
          "Qdrant Vector Store1": {
            "ai_tool": [
              [
                {
                  "node": "AI Agent",
                  "type": "ai_tool",
                  "index": 0
                }
              ]
            ]
          },
          "When chat message received": {
            "main": [
              [
                {
                  "node": "AI Agent",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          },
          "Recursive Character Text Splitter": {
            "ai_textSplitter": [
              [
                {
                  "node": "Default Data Loader",
                  "type": "ai_textSplitter",
                  "index": 0
                }
              ]
            ]
          }
        }
      }
    },
    {
      "id": 5110,
      "name": "Create & Upload AI-Generated ASMR YouTube Shorts with Seedance, Fal AI, and GPT-4",
      "description": "![Workflow_Screenshot.png](fileId:1559)\n\n//ASMR AI Workflow \n### Who is this for?\n\nContent Creators, YouTube Automation Enthusiasts, and AI Hobbyists looking to autonomously generate and publish unique, satisfying ASMR-style YouTube Shorts without manual effort.\n\n### What problem does this solve?\n\nThis workflow solves the creative bottleneck and time-consuming nature of daily content creation. It fully automates the entire production pipeline, from brainstorming trendy ideas to publishing a finished video, turning your n8n instance into a 24/7 content factory.\n\n### What this workflow does\n\n**1. Two-Stage AI Ideation & Planning:**\n*   Uses an initial AI agent to brainstorm a short, viral ASMR concept based on current trends.\n*   A second \"Planning\" AI agent then takes this concept and expands it into a detailed, structured production plan, complete with a viral-optimized caption, hashtags, and descriptions for the environment and sound.\n\n**2. Multi-Modal Asset Generation:**\n*   **Video:** Feeds detailed scene prompts to the **ByteDance Seedance** text-to-video model (via Wavespeed AI) to generate high-quality video clips.\n*   **Audio:** Simultaneously calls the **Fal AI** text-to-audio model to create custom, soothing ASMR sound effects that match the video's theme.\n*   **Assembly:** Automatically sequences the video clips and sound into a single, cohesive final video file using an FFMPEG API call.\n\n**3. Closed-Loop Publishing & Logging:**\n*   **Logging:** Initially logs the new idea to a Google Sheet with a status of \"In Progress\".\n*   **Publishing:** Automatically uploads the final, assembled video directly to your YouTube channel, setting the title and description from the AI's plan.\n*   **Updating:** Finds the original row in the Google Sheet and updates its status to \"Done\", adding a direct link to the newly published YouTube video.\n*   **Notifications:** Sends real-time alerts to Telegram and/or Gmail with the video title and link, confirming the successful publication.\n\n### Setup\n\n**Credentials:**\nYou will need to create credentials in your n8n instance for the following services:\n*   OpenAI API\n*   Wavespeed AI API (for Seedance)\n*   Fal AI API\n*   Google OAuth Credential (enable **YouTube Data API v3** and **Google Sheets API** in your Google Cloud Project)\n*   Telegram Bot Credential\n*   (Optional) Gmail OAuth Credential\n\n**Configuration:**\nThis is an advanced workflow. The initial setup should take approximately 15-20 minutes.\n*   **Google Sheet:** Create a Google Sheet with these columns: `idea`, `caption`, `production_status`, `youtube_url`. Add the **Sheet ID** to the Google Sheets nodes in the workflow.\n*   **Node Configuration:** In the `Telegram Notification` node, enter your own `Chat ID`. In the `Gmail Notification` node, update the recipient email address.\n*   **Activate:** Once configured, save and set the workflow to \"Active\" to let it run on its schedule.\n\n### How to customize\n\n*   **Creative Direction:** To change the style or theme of the videos (e.g., from kinetic sand to soap cutting), simply edit the `systemMessage` in the **\"2. Enrich Idea into Plan\"** and **\"Prompts AI Agent\"** nodes.\n\n*   **Initial Ideas:** To influence the AI's starting concepts, modify the prompt in the **\"1. Generate Trendy Idea\"** node.\n*   **Video & Sound:** To change the video duration or sound style, adjust the parameters in the **\"Create Clips\"** and **\"Create Sounds\"** nodes.\n*   **Notifications:** Add or remove notification channels (like Slack or Discord) after the **\"Upload to YouTube\"** node.\n",
      "totalViews": 76670,
      "createdAt": "2025-06-21T22:27:33.109Z",
      "author": "bilsimaging",
      "nodeTypes": [
        "n8n-nodes-base.code",
        "n8n-nodes-base.httpRequest",
        "n8n-nodes-base.wait",
        "@n8n/n8n-nodes-langchain.toolThink",
        "@n8n/n8n-nodes-langchain.lmChatOpenAi",
        "@n8n/n8n-nodes-langchain.agent",
        "@n8n/n8n-nodes-langchain.outputParserStructured",
        "n8n-nodes-base.scheduleTrigger",
        "n8n-nodes-base.youTube",
        "n8n-nodes-base.telegram",
        "n8n-nodes-base.gmail",
        "n8n-nodes-base.googleSheets"
      ],
      "nodeCount": 32,
      "connectionCount": 24,
      "categories": [
        "Content Creation",
        "Multimodal AI"
      ],
      "workflowJson": {
        "id": "LPUpZtHK7gGRA5wa",
        "meta": {
          "instanceId": "1d871c7857f6a0f6093c24e2cd2fa1fa755b3826859fe85548d66cefd9f0e0ed"
        },
        "name": "Automated AI YouTube Shorts Factory for ASMR (Seedance)",
        "tags": [
          {
            "id": "1",
            "name": "AI"
          },
          {
            "id": "2",
            "name": "YouTube"
          },
          {
            "id": "3",
            "name": "Content Creation"
          }
        ],
        "nodes": [
          {
            "id": "25a59939-f6b6-4fae-8ed0-7808e008331c",
            "name": "Unbundle Prompts",
            "type": "n8n-nodes-base.code",
            "position": [
              3060,
              220
            ],
            "parameters": {
              "jsCode": "function findSceneEntries(obj) {\n  const scenes = [];\n\n  for (const [key, value] of Object.entries(obj)) {\n    if (key.toLowerCase().startsWith(\"scene\") && typeof value === \"string\") {\n      scenes.push(value);\n    } else if (typeof value === \"object\" && value !== null) {\n      scenes.push(...findSceneEntries(value));\n    }\n  }\n\n  return scenes;\n}\n\nlet output = [];\n\ntry {\n  const inputData = items[0].json;\n  const scenes = findSceneEntries(inputData);\n\n  if (scenes.length === 0) {\n    throw new Error(\"No scene keys found at any level.\");\n  }\n\n  output = scenes.map(scene => ({ description: scene }));\n} catch (e) {\n  throw new Error(\"Could not extract scenes properly. Details: \" + e.message);\n}\n\nreturn output;\n"
            },
            "typeVersion": 2
          },
          {
            "id": "c15a3956-bf4f-446e-b14b-1304d5b37f3d",
            "name": "Create Sounds",
            "type": "n8n-nodes-base.httpRequest",
            "position": [
              3260,
              440
            ],
            "parameters": {
              "url": "https://queue.fal.run/fal-ai/mmaudio-v2 ",
              "body": "= {\n        \"prompt\": \"ASMR Soothing sound effects. {{ $('Prompts AI Agent').item.json.output.Sound }}\",\n        \"duration\": 10,\n        \"video_url\": \"{{ $json.data.outputs[0] }}\"\n  }\n",
              "method": "POST",
              "options": {
                "batching": {
                  "batch": {
                    "batchSize": 1,
                    "batchInterval": 2000
                  }
                }
              },
              "sendBody": true,
              "contentType": "raw",
              "authentication": "genericCredentialType",
              "rawContentType": "application/json",
              "genericAuthType": "httpHeaderAuth"
            },
            "credentials": {},
            "typeVersion": 4.2
          },
          {
            "id": "d277a432-e3b3-4069-837c-6e68def03672",
            "name": "Get Sounds",
            "type": "n8n-nodes-base.httpRequest",
            "position": [
              3780,
              440
            ],
            "parameters": {
              "url": "=https://queue.fal.run/fal-ai/mmaudio-v2/requests/{{ $json.request_id }}",
              "options": {},
              "authentication": "genericCredentialType",
              "genericAuthType": "httpHeaderAuth"
            },
            "credentials": {},
            "typeVersion": 4.2
          },
          {
            "id": "2734cc8e-416a-41fd-a20b-40c079889907",
            "name": "Wait for Sounds",
            "type": "n8n-nodes-base.wait",
            "position": [
              3480,
              440
            ],
            "parameters": {
              "amount": 60
            },
            "typeVersion": 1.1
          },
          {
            "id": "70f2ebeb-1ef1-439c-88b5-3c6094dca6a3",
            "name": "List Elements",
            "type": "n8n-nodes-base.code",
            "position": [
              3060,
              640
            ],
            "parameters": {
              "jsCode": "return [\n  {\n    video_urls: items.map(item => item.json.video.url)\n  }\n];"
            },
            "typeVersion": 2
          },
          {
            "id": "8892adcd-e2da-476c-998d-b814b12184e0",
            "name": "Sequence Video",
            "type": "n8n-nodes-base.httpRequest",
            "position": [
              3260,
              640
            ],
            "parameters": {
              "url": "https://queue.fal.run/fal-ai/ffmpeg-api/compose",
              "body": "={\n  \"tracks\": [\n    {\n      \"id\": \"1\",\n      \"type\": \"video\",\n      \"keyframes\": [\n        { \"url\": \"{{ $json.video_urls[0] }}\", \"timestamp\": 0, \"duration\": 10 },\n        { \"url\": \"{{ $json.video_urls[1] }}\", \"timestamp\": 10, \"duration\": 10 },\n        { \"url\": \"{{ $json.video_urls[2] }}\", \"timestamp\": 20, \"duration\": 10 }\n      ]\n    }\n  ]\n}",
              "method": "POST",
              "options": {
                "batching": {
                  "batch": {
                    "batchSize": 1,
                    "batchInterval": 2000
                  }
                }
              },
              "sendBody": true,
              "contentType": "raw",
              "authentication": "genericCredentialType",
              "rawContentType": "application/json",
              "genericAuthType": "httpHeaderAuth"
            },
            "credentials": {},
            "typeVersion": 4.2
          },
          {
            "id": "9063eb02-8cd4-4b75-87f2-fdd59f56f26c",
            "name": "Get Final Video",
            "type": "n8n-nodes-base.httpRequest",
            "position": [
              3780,
              640
            ],
            "parameters": {
              "url": "=https://queue.fal.run/fal-ai/ffmpeg-api/requests/{{ $json.request_id }}",
              "options": {},
              "authentication": "genericCredentialType",
              "genericAuthType": "httpHeaderAuth"
            },
            "credentials": {},
            "typeVersion": 4.2
          },
          {
            "id": "b3c4c19c-2caa-454c-ae56-a6c00117a6d4",
            "name": "Wait for Final Video",
            "type": "n8n-nodes-base.wait",
            "position": [
              3480,
              640
            ],
            "parameters": {
              "amount": 60
            },
            "typeVersion": 1.1
          },
          {
            "id": "7edea676-00ad-4c17-8fd9-54e55e06dbc5",
            "name": "Think",
            "type": "@n8n/n8n-nodes-langchain.toolThink",
            "position": [
              2580,
              520
            ],
            "parameters": {},
            "typeVersion": 1
          },
          {
            "id": "9d61496d-66a5-454f-b60a-6d997a4d75e8",
            "name": "OpenAI Chat Model",
            "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
            "position": [
              2220,
              440
            ],
            "parameters": {
              "model": {
                "__rl": true,
                "value": "gpt-4.1"
              }
            },
            "credentials": {
              "openAiApi": {}
            },
            "typeVersion": 1.2
          },
          {
            "id": "da01687e-ad98-42c0-bab5-057882d6709b",
            "name": "Prompts AI Agent",
            "type": "@n8n/n8n-nodes-langchain.agent",
            "position": [
              2720,
              220
            ],
            "parameters": {
              "text": "=Give me 3 video prompts based on the previous \n\nUse the Think tool to review your output",
              "options": {
                "systemMessage": "=Role: You are a prompt-generation AI specializing in satisfying, ASMR-style video prompts for kinetic sand. Your task is to generate a multi-scene video sequence that vividly shows a tool (like a knife, scoop, or press) interacting with kinetic sand in a clean, high-detail setting.\n\nYour writing must follow this style:\n\nSatisfying, tactile realism.\nMacro-level detail with a tight focus on the tool interacting with the sand's unique texture.\nThe tool must always be in motion ‚Äî slicing, scooping, pressing, or crumbling the sand. Never idle or static.\nCamera terms are allowed (e.g. macro view, top-down shot, slow-motion).\n\nEach scene must contain all of the following, expressed through detailed visual language:\n\n‚úÖ The kinetic sand (from the Idea)\n‚úÖ The environment or surface (from the Environment)\n‚úÖ The texture, structure, and behavior of the sand as it's being manipulated\n‚úÖ A visible tool (knife, scoop, mold) actively interacting with the sand\n\nDescriptions should show:\n\nThe physical makeup of the sand ‚Äî is it layered with different colors, sparkly, smooth, or matte? Emphasize its granular, yet cohesive structure.\nHow the sand responds to the tool ‚Äî clean slicing, soft crumbling, perfect imprints, satisfying deformation, or a cascading collapse.\nThe interaction between the tool and the sand ‚Äî sand grains momentarily sticking to the tool, the smooth surface left behind, the crisp edges of a cut.\nAny ASMR-relevant sensory cues like the satisfying crunch, the soft hiss of falling grains, or the shimmer of glitter, but always shown visually ‚Äî not narrated.\n\nTone:\n\nSatisfying, mesmerizing, tactile.\nNo poetic metaphors, emotion, or storytelling.\nAvoid fantasy or surreal imagery.\nAll description must feel physically grounded and visually appealing.\n\nLength:\n\nEach scene must be between 1,000 and 2,000 characters.\nNo shallow or repetitive scenes ‚Äî each must be immersive, descriptive, and specific.\nEach scene should explore a distinct phase of the action, a different camera perspective, or a new behavior of the sand.\n\nInputs:\n\nIdea: \"{{ $json.idea }}\"\nEnvironment: \"{{ $json.environment_prompt }}\"\nSound: \"{{ $json.sound_prompt }}\"\n\nFormat:\n\nIdea: \"...\"\nEnvironment: \"...\"\nSound: \"...\"\n\nScene 1: \"...\"\nScene 2: \"...\"\nScene 3: \"...\"\n(and so on)"
              },
              "promptType": "define",
              "hasOutputParser": true
            },
            "typeVersion": 1.9
          },
          {
            "id": "64abf568-4e09-4e5c-bd12-7475e721a54c",
            "name": "Parser",
            "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
            "position": [
              2380,
              440
            ],
            "parameters": {
              "jsonSchemaExample": "[\n  {\n    \"Caption\": \"Diver Removes Nets Off Whale üêã #whalerescue #marinelife #oceanrescue #seahelpers #love #nature #instagood #explore #viral #savenature #oceanguardians #cleanoceans\",\n    \"Idea\": \"Diver carefully cuts tangled net from distressed whale in open sea\",\n    \"Environment\": \"Open ocean, sunlight beams through water, diver and whale, cinematic realism\",\n    \"Sound\": \"Primary sound description under 15 words\",\n    \"Status\": \"for production\"\n  }\n]\n"
            },
            "typeVersion": 1.2
          },
          {
            "id": "d8c29c02-f396-4150-aa2c-550d7b123f9e",
            "name": "Schedule Trigger",
            "type": "n8n-nodes-base.scheduleTrigger",
            "position": [
              1500,
              220
            ],
            "parameters": {
              "rule": {
                "interval": [
                  {
                    "field": "minutes",
                    "minutesInterval": 30
                  }
                ]
              }
            },
            "typeVersion": 1.2
          },
          {
            "id": "f2e85826-3416-4a1e-8f26-5a8538087174",
            "name": "Parser2",
            "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
            "position": [
              2900,
              440
            ],
            "parameters": {
              "jsonSchemaExample": "{\n  \"Idea\": \"An obsidian rock being sliced with a shimmering knife\",\n  \"Environment\": \"Clean studio table, subtle light reflections\",\n  \"Sound\": \"Crisp slicing, deep grinding, and delicate crumbling\",\n  \"Scene 1\": \"Extreme macro shot: a razor-sharp, polished knife blade presses into the dark, granular surface of an obsidian rock, just beginning to indent.\",\n  \"Scene 2\": \"Close-up: fine, iridescent dust particles erupt from the point of contact as the blade cuts deeper into the obsidian, catching the studio light.\",\n  \"Scene 3\": \"Mid-shot: the knife, held perfectly steady, has formed a shallow, clean groove across the obsidian's shimmering surface, revealing a new, smooth texture.\"\n}"
            },
            "typeVersion": 1.2
          },
          {
            "id": "790aee60-38b8-4939-834c-bd468b0f240b",
            "name": "Create Clips",
            "type": "n8n-nodes-base.httpRequest",
            "position": [
              3260,
              220
            ],
            "parameters": {
              "url": "https://api.wavespeed.ai/api/v3/bytedance/seedance-v1-lite-t2v-480p",
              "body": "={\n  \"aspect_ratio\": \"9:16\",\n  \"duration\": 10,\n  \"prompt\": \"VIDEO THEME: {{ $('Prompts AI Agent').item.json.output.Idea }} | WHAT HAPPENS IN THE VIDEO: {{ $json.description }} | WHERE THE VIDEO IS SHOT: {{ $('Prompts AI Agent').item.json.output.Environment }}\"\n}\n",
              "method": "POST",
              "options": {
                "batching": {
                  "batch": {
                    "batchSize": 1,
                    "batchInterval": 3000
                  }
                }
              },
              "sendBody": true,
              "contentType": "raw",
              "authentication": "genericCredentialType",
              "rawContentType": "application/json",
              "genericAuthType": "httpHeaderAuth"
            },
            "credentials": {},
            "typeVersion": 4.2
          },
          {
            "id": "ba98805d-7d8b-476e-86b3-94017f79454b",
            "name": "Wait for Clips",
            "type": "n8n-nodes-base.wait",
            "position": [
              3480,
              220
            ],
            "parameters": {
              "amount": 120
            },
            "typeVersion": 1.1
          },
          {
            "id": "7fc24bd4-8740-4633-b15a-868ff3cdacf5",
            "name": "Get Clips",
            "type": "n8n-nodes-base.httpRequest",
            "position": [
              3780,
              220
            ],
            "parameters": {
              "url": "=https://api.wavespeed.ai/api/v3/predictions/{{ $json.data.id }}/result",
              "options": {},
              "authentication": "genericCredentialType",
              "genericAuthType": "httpHeaderAuth"
            },
            "credentials": {},
            "typeVersion": 4.2
          },
          {
            "id": "614d8a4b-1319-4c0a-9b52-de284c232a6d",
            "name": "Download Final Video",
            "type": "n8n-nodes-base.httpRequest",
            "position": [
              4120,
              820
            ],
            "parameters": {
              "url": "={{ $('Get Final Video').item.json.video_url }}",
              "options": {
                "response": {
                  "response": "file"
                }
              }
            },
            "typeVersion": 4.2
          },
          {
            "id": "f916f4e9-9634-4863-bdb9-b56e3401165e",
            "name": "Upload to YouTube",
            "type": "n8n-nodes-base.youTube",
            "position": [
              4320,
              820
            ],
            "parameters": {
              "title": "=AI ASMR : {{ $('Update Final Video to Sheet').item.json.idea }}",
              "options": {
                "tags": "=asmr, viral, asmrai, n8n, automation",
                "description": "=AI-Generated Video Idea: {{ $('Update Final Video to Sheet').item.json.idea }}\n\nThis video was created automatically using our automated workflow #asmrai #asmr #n8n",
                "privacyStatus": "public",
                "notifySubscribers": true
              },
              "resource": "video",
              "operation": "upload"
            },
            "credentials": {
              "youTubeOAuth2Api": {}
            },
            "typeVersion": 1
          },
          {
            "id": "f9c33085-e6e4-41c9-a463-62cb52c6e71c",
            "name": "Telegram Notification",
            "type": "n8n-nodes-base.telegram",
            "position": [
              4600,
              820
            ],
            "parameters": {
              "text": "=‚úÖ Your new video is ready!  **Title:** {{ $('Update Final Video to Sheet').item.json.idea }}  \nWatch it here: \nhttps://www.youtube.com/watch?v={{ $('Upload to YouTube').item.json.id }}",
              "chatId": "YOUR_CHAT_ID",
              "additionalFields": {
                "parse_mode": "HTML"
              }
            },
            "credentials": {
              "telegramApi": {}
            },
            "typeVersion": 1.2
          },
          {
            "id": "acbdb550-278a-4f0a-a3c2-b3f1e9183dec",
            "name": "OpenAI Chat Model1",
            "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
            "position": [
              1800,
              420
            ],
            "parameters": {
              "model": {
                "__rl": true,
                "value": "gpt-4.1"
              }
            },
            "credentials": {
              "openAiApi": {}
            },
            "typeVersion": 1.2
          },
          {
            "id": "708c4602-2d5c-49f1-84a8-3117a83ce2cc",
            "name": "Gmail Notification",
            "type": "n8n-nodes-base.gmail",
            "position": [
              4600,
              1000
            ],
            "parameters": {
              "sendTo": "your-email@gmail.com",
              "message": "=‚úÖ Your new video is ready!  **Title:** {{ $('Update Final Video to Sheet').item.json.idea }}  Watch it here: https://www.youtube.com/watch?v={{ $('Upload to YouTube').item.json.id }}",
              "options": {
                "senderName": "Bilsimaging -n8n Automation"
              },
              "subject": "‚úÖ Your new video is ready!"
            },
            "credentials": {
              "gmailOAuth2": {}
            },
            "typeVersion": 2.1
          },
          {
            "id": "86188a74-2ca4-4e15-a151-f5a2ae927763",
            "name": "1. Generate Trendy Idea",
            "type": "@n8n/n8n-nodes-langchain.agent",
            "position": [
              1800,
              220
            ],
            "parameters": {
              "text": "Generate one short, trendy, and viral ASMR video idea. Describe the core concept in less than 10 words. Do not explain it, just state the idea.",
              "options": {
                "systemMessage": "You are an AI that specializes in identifying viral trends on platforms like TikTok and YouTube Shorts. Your job is to brainstorm a single, simple, and satisfying ASMR video concept. You must only return the idea as a single line of plain text. Do not add any extra words, formatting, or explanation."
              },
              "promptType": "define",
              "hasOutputParser": true
            },
            "typeVersion": 1.9
          },
          {
            "id": "2d8da7d8-c7a0-48b6-b999-59832b543e91",
            "name": "Note: AI Ideation",
            "type": "n8n-nodes-base.stickyNote",
            "position": [
              1520,
              0
            ],
            "parameters": {
              "color": 3,
              "width": 940,
              "height": 180,
              "content": "### Step 1: AI Brainstorms an Idea\nThis workflow starts with a Schedule Trigger. The first AI agent generates a simple, trendy ASMR concept. The second agent expands this into a full production plan (caption, environment, etc.)."
            },
            "typeVersion": 1
          },
          {
            "id": "692c4c92-7d16-482f-8bca-cc951ab772e4",
            "name": "Note: Asset Generation",
            "type": "n8n-nodes-base.stickyNote",
            "position": [
              2560,
              0
            ],
            "parameters": {
              "color": 3,
              "width": 600,
              "height": 180,
              "content": "### Step 2: Scene Generation & Video Creation\nThe plan is used to generate detailed scene descriptions. Then, we call the Wavespeed AI (Seedance) and Fal AI APIs to create the video clips and sound effects in parallel."
            },
            "typeVersion": 1
          },
          {
            "id": "211c2810-58c9-4246-ba27-561c3e57a74c",
            "name": "Note: Final Assembly",
            "type": "n8n-nodes-base.stickyNote",
            "position": [
              3260,
              0
            ],
            "parameters": {
              "color": 3,
              "width": 660,
              "height": 180,
              "content": "### Step 3: Final Assembly\nThe video clips are stitched together."
            },
            "typeVersion": 1
          },
          {
            "id": "c76e5236-b71b-4705-b30c-89d5ae5dd0f5",
            "name": "Note: Distribution",
            "type": "n8n-nodes-base.stickyNote",
            "position": [
              4040,
              0
            ],
            "parameters": {
              "color": 3,
              "width": 960,
              "height": 180,
              "content": "### Step 4: Distribution & Logging\nThe final video is uploaded to YouTube, the Google Sheet is updated, and notifications are sent."
            },
            "typeVersion": 1
          },
          {
            "id": "57e8010f-7184-4d88-84fd-d2b85782a09b",
            "name": "SUBMISSION GUIDE",
            "type": "n8n-nodes-base.stickyNote",
            "position": [
              0,
              0
            ],
            "parameters": {
              "width": 1320,
              "height": 1240,
              "content": "//ASMR AI Workflow By Bilsimaging.com\n### How It Works\n\nThis workflow is a fully autonomous content factory that creates and publishes satisfying ASMR-style YouTube Shorts without any human intervention. It's a powerful example of chaining multiple AI services together to generate unique media.\n\nThe process runs in four main stages:\n\n1.  **AI Ideation:** A schedule trigger kicks off the workflow. The first AI agent brainstorms a simple, trendy ASMR concept. A second agent then enriches this concept into a detailed JSON production plan, including a viral-style caption, environment description, and sound profile.\n\n2.  **Asset Generation:** The workflow generates detailed scene-by-scene prompts. It then calls the ByteDance Seedance API (via Wavespeed) to create the video clips and the Fal AI API to generate corresponding sound effects.\n\n3.  **Final Assembly:** The clips are sequenced into a final video. \n\n4.  **Distribution & Logging:** The final video is downloaded, uploaded to a designated YouTube channel, the original row in a Google Sheet is updated with the new YouTube link and a \"Done\" status, and notifications are sent via Telegram and Gmail.\n\n### Set Up Steps\n\nThis is an advanced workflow that requires several credentials. \n\nYou will need to create credentials for the following services:\n\n*   **OpenAI:** For the AI agents.\n*   **Wavespeed AI:** For the Seedance video model.\n*   **Fal AI:** For sound generation and video sequencing.\n*   **Google OAuth:** For both the Google Sheets and YouTube nodes. You will need to enable the Google Sheets API and YouTube Data API v3 in your Google Cloud project.\n*   **Telegram Bot:** For the final notification.\n*   **Gmail (Optional):** If you want email notifications.\n\nYou will also need to create a **Google Sheet** to log the ideas and final outputs. A template can be easily created with columns for `id`, `idea`, `caption`, `production_status`, `environment_prompt`, `sound_prompt`, `final_output`, and `youtube_url`.\n\n### Features\n\n*   **Fully Autonomous Content Creation:** Runs on a schedule to generate and publish content without any manual input.\n*   **Two-Stage AI Ideation:** Uses a \"creative\" AI and a \"planning\" AI to produce more dynamic and well-structured ideas.\n*   **Multi-Modal AI:** Chains together text-to-text, text-to-video, and text-to-audio models in a single, cohesive flow.\n*   **Closed-Loop System:** Logs the initial idea to a Google Sheet and updates the *same row* with the final links and status, creating a perfect production log.\n*   **Spreadsheet as a CMS:** Manage your entire content pipeline from a simple Google Sheet.\n*   **Real-time Notifications:** Get immediate alerts on Telegram or Gmail as soon as a new video is live.\n\n### Pro-Tips & How to Handle APIs\n\n*   **API Rate Limits:** If you run the workflow very frequently, some APIs might temporarily block you. To avoid this, you can adjust the **Schedule Trigger** to run less often (e.g., every 30 minutes instead of every 10). For more advanced control, you can add a `batchInterval` in the settings of the HTTP Request nodes.\n\n\n*   **Cost Management:** Remember that AI API calls cost money. It is highly recommended to set up **budget alerts** in your OpenAI, Fal AI, and Wavespeed AI account dashboards to avoid any surprise bills.\n\n*   **Customization:** The creative core of this workflow is in the **Prompts AI Agent** and **Enrich Idea into Plan** nodes. To change the style, tone, or type of videos created, simply edit the `systemMessage` in the options of these nodes.\n\nFor any help or tips on handling the APIs, don't hesitate to contact me at **bilsimaging@gmail.com**."
            },
            "typeVersion": 1
          },
          {
            "id": "62e10519-d31e-4012-8dcf-7e2e82ab35cd",
            "name": "2. Enrich Idea into Plan",
            "type": "@n8n/n8n-nodes-langchain.agent",
            "position": [
              2200,
              220
            ],
            "parameters": {
              "text": "=Take the following trendy ASMR idea and expand it into a full production plan using your required JSON format. Use the examples below for inspiration on how to format the \"Idea\" field.\n\nThe short ASMR idea is:\n[[\n{{ $json.output }}\n]]\n\nHave your final expanded \"Idea\" field be in this format: \"(color/style) (object) being (action)\". \nExamples for your inspiration: layered rainbow kinetic sand being sliced, sparkly purple soap being scooped, neon green slime being pressed.\n\nUse the Think tool to review your output.",
              "options": {
                "systemMessage": "=**Role**: You are an AI designed to generate 1 immersive, satisfying idea based on a user-provided topic. Your output must be formatted as a JSON array (single line) and follow all the rules below exactly.\n\n***\nRULES:\n\nOnly return 1 idea at a time.\n\nThe user will provide a key topic (e.g. \"kinetic sand slicing,\" \"satisfying sand scooping,\" \"ASMR sand sounds\").\n\nThe Idea must:\n\nBe under 13 words.\n\nDescribe an interesting and viral-worthy moment, action, or event related to the provided topic.\n\nThe Caption must be:\n\nShort, punchy, and viral-friendly.\n\nInclude one relevant emoji.\n\nInclude exactly 12 hashtags in this order:\n** 4 topic-relevant hashtags\n** 4 all-time most popular hashtags\n** 4 currently trending hashtags\n\nAll hashtags must be lowercase.\n\nSet Status to \"for production\" (always).\n\nThe Environment must:\n\nBe under 20 words.\n\nMatch the action in the Idea exactly.\n\nClearly describe:\n\nWhere the event is happening (e.g. minimalist white surface, clean studio table)\nKey visuals or background details (e.g. bright lighting, subtle glitter)\nStyle of scene (e.g. macro close-up, cinematic slow-motion)\n\nThe Sound must:\n\nBe under 15 words.\n\nDescribe the primary sound that makes sense to happen in the video. This will be fed to a sound model later on.\n\n\n***\nOUTPUT FORMAT (single-line JSON array):\n\n[\n  {\n    \"Caption\": \"That crunch! ü§§ #kineticsand #satisfyingvideos #asmrsand #sand #oddlysatisfying #viral #fyp #explore #trending #tiktok #diy #crafts\",\n    \"Idea\": \"Slicing through a block of layered rainbow kinetic sand\",\n    \"Environment\": \"Macro close-up on a clean, bright white surface, cinematic slow-motion\",\n    \"Sound\": \"Crisp, crunchy slicing sounds with a soft, gentle hiss\",\n    \"Status\": \"for production\"\n  }\n]"
              },
              "promptType": "define",
              "hasOutputParser": true
            },
            "typeVersion": 1.9
          },
          {
            "id": "06ccc97f-aa87-4c64-860b-0da4739d3de5",
            "name": "3. Log New Idea to Sheet",
            "type": "n8n-nodes-base.googleSheets",
            "position": [
              2560,
              220
            ],
            "parameters": {
              "columns": {
                "value": {
                  "idea": "={{ $json.output[0].Idea }}",
                  "caption": "={{ $json.output[0].Caption }}",
                  "production": "In Progress",
                  "sound_prompt": "={{ $json.output[0].Sound }}",
                  "environment_prompt": "={{ $json.output[0].Environment }}"
                },
                "mappingMode": "defineBelow"
              },
              "options": {},
              "operation": "append",
              "sheetName": {
                "__rl": true,
                "value": "YOUR_SHEET_NAME"
              },
              "documentId": {
                "__rl": true,
                "value": "YOUR_GOOGLE_SHEET_ID"
              }
            },
            "credentials": {
              "googleSheetsOAuth2Api": {}
            },
            "typeVersion": 4.5
          },
          {
            "id": "58b1f682-2752-4995-b05e-7598353d7a61",
            "name": "Update Final Video to Sheet",
            "type": "n8n-nodes-base.googleSheets",
            "position": [
              4120,
              640
            ],
            "parameters": {
              "key": "idea",
              "value": "={{ $('Update Final Video to Sheet').item.json.idea }}",
              "columns": {
                "value": {
                  "production": "Done",
                  "youtube_url": "=",
                  "final_output": "={{ $json.video_url }}"
                },
                "mappingMode": "defineBelow"
              },
              "operation": "update",
              "sheetName": {
                "__rl": true,
                "value": "YOUR_SHEET_NAME"
              },
              "documentId": {
                "__rl": true,
                "value": "YOUR_GOOGLE_SHEET_ID"
              }
            },
            "credentials": {
              "googleSheetsOAuth2Api": {}
            },
            "typeVersion": 4.5
          },
          {
            "id": "fbf64920-6e9c-4dfa-b75a-bbf022ea597b",
            "name": "Update Sheet with Youtube Link",
            "type": "n8n-nodes-base.googleSheets",
            "position": [
              4600,
              640
            ],
            "parameters": {
              "key": "idea",
              "value": "={{ $('Update Final Video to Sheet').item.json.idea }}",
              "columns": {
                "value": {
                  "youtube_url": "=https://www.youtube.com/watch?v={{ $('Upload to YouTube').item.json.id }}"
                },
                "mappingMode": "defineBelow"
              },
              "operation": "update",
              "sheetName": {
                "__rl": true,
                "value": "YOUR_SHEET_NAME"
              },
              "documentId": {
                "__rl": true,
                "value": "YOUR_GOOGLE_SHEET_ID"
              }
            },
            "credentials": {
              "googleSheetsOAuth2Api": {}
            },
            "typeVersion": 4.5
          }
        ],
        "active": false,
        "pinData": {},
        "settings": {
          "executionOrder": "v1"
        },
        "versionId": "final_submission_v1",
        "connections": {
          "Think": {
            "ai_tool": [
              [
                {
                  "node": "2. Enrich Idea into Plan",
                  "type": "ai_tool",
                  "index": 0
                },
                {
                  "node": "Prompts AI Agent",
                  "type": "ai_tool",
                  "index": 0
                }
              ]
            ]
          },
          "Parser": {
            "ai_outputParser": [
              [
                {
                  "node": "2. Enrich Idea into Plan",
                  "type": "ai_outputParser",
                  "index": 0
                }
              ]
            ]
          },
          "Parser2": {
            "ai_outputParser": [
              [
                {
                  "node": "Prompts AI Agent",
                  "type": "ai_outputParser",
                  "index": 0
                }
              ]
            ]
          },
          "Get Clips": {
            "main": [
              [
                {
                  "node": "Create Sounds",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          },
          "Get Sounds": {
            "main": [
              [
                {
                  "node": "List Elements",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          },
          "Create Clips": {
            "main": [
              [
                {
                  "node": "Wait for Clips",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          },
          "Create Sounds": {
            "main": [
              [
                {
                  "node": "Wait for Sounds",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          },
          "List Elements": {
            "main": [
              [
                {
                  "node": "Sequence Video",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          },
          "Sequence Video": {
            "main": [
              [
                {
                  "node": "Wait for Final Video",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          },
          "Wait for Clips": {
            "main": [
              [
                {
                  "node": "Get Clips",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          },
          "Get Final Video": {
            "main": [
              [
                {
                  "node": "Update Final Video to Sheet",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          },
          "Wait for Sounds": {
            "main": [
              [
                {
                  "node": "Get Sounds",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          },
          "Prompts AI Agent": {
            "main": [
              [
                {
                  "node": "Unbundle Prompts",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          },
          "Schedule Trigger": {
            "main": [
              [
                {
                  "node": "1. Generate Trendy Idea",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          },
          "Unbundle Prompts": {
            "main": [
              [
                {
                  "node": "Create Clips",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          },
          "OpenAI Chat Model": {
            "ai_languageModel": [
              [
                {
                  "node": "2. Enrich Idea into Plan",
                  "type": "ai_languageModel",
                  "index": 0
                },
                {
                  "node": "Prompts AI Agent",
                  "type": "ai_languageModel",
                  "index": 0
                }
              ]
            ]
          },
          "Upload to YouTube": {
            "main": [
              [
                {
                  "node": "Gmail Notification",
                  "type": "main",
                  "index": 0
                },
                {
                  "node": "Telegram Notification",
                  "type": "main",
                  "index": 0
                },
                {
                  "node": "Update Sheet with Youtube Link",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          },
          "OpenAI Chat Model1": {
            "ai_languageModel": [
              [
                {
                  "node": "1. Generate Trendy Idea",
                  "type": "ai_languageModel",
                  "index": 0
                }
              ]
            ]
          },
          "Download Final Video": {
            "main": [
              [
                {
                  "node": "Upload to YouTube",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          },
          "Wait for Final Video": {
            "main": [
              [
                {
                  "node": "Get Final Video",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          },
          "1. Generate Trendy Idea": {
            "main": [
              [
                {
                  "node": "2. Enrich Idea into Plan",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          },
          "2. Enrich Idea into Plan": {
            "main": [
              [
                {
                  "node": "3. Log New Idea to Sheet",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          },
          "3. Log New Idea to Sheet": {
            "main": [
              [
                {
                  "node": "Prompts AI Agent",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          },
          "Update Final Video to Sheet": {
            "main": [
              [
                {
                  "node": "Download Final Video",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          }
        }
      }
    },
    {
      "id": 7990,
      "name": "Receipt Scanning & Analysis Workflow",
      "description": "### How it works:\n- Automatically detects when a new receipt is uploaded to Google Drive.\n- Extracts text from the receipt using OCR.\n- Uses an AI Agent to analyze the extracted data and structure it (e.g., vendor, date, total, tax).\n- Saves the organized receipt data into a Google Sheet for easy tracking.\n\n### Set up steps:\n- Setup takes around 15‚Äì20 minutes.\n- You'll need a Google Drive folder for receipts and a Google Sheet to store results.\n- Configure your Google Drive Trigger, OCR extraction, AI Agent, and Google Sheets connection.\n\nDetailed instructions and explanations are included in [this n8n Starter Session tutorial series](https://www.youtube.com/playlist?list=PLWYu7XaUG3XOJwOOGiX89SQ_w67vw3dq7).",
      "totalViews": 2712,
      "createdAt": "2025-08-28T10:47:11.676Z",
      "author": "aemal",
      "nodeTypes": [
        "n8n-nodes-base.googleDriveTrigger",
        "n8n-nodes-base.httpRequest",
        "n8n-nodes-base.mistralAi",
        "@n8n/n8n-nodes-langchain.agent",
        "@n8n/n8n-nodes-langchain.lmChatOpenAi",
        "@n8n/n8n-nodes-langchain.outputParserStructured",
        "n8n-nodes-base.googleSheets"
      ],
      "nodeCount": 8,
      "connectionCount": 6,
      "categories": [],
      "workflowJson": {
        "meta": {
          "instanceId": "61d1ceb8b60d551b2bd6cb318774870200f11403fbfe4e124bc9e07f08b20486",
          "templateCredsSetupCompleted": true
        },
        "nodes": [
          {
            "id": "2c4bad91-3320-4906-af4d-7095733a9ebb",
            "name": "Google Drive Trigger",
            "type": "n8n-nodes-base.googleDriveTrigger",
            "position": [
              0,
              0
            ],
            "parameters": {
              "event": "fileCreated",
              "options": {},
              "pollTimes": {
                "item": [
                  {
                    "mode": "everyMinute"
                  }
                ]
              },
              "triggerOn": "specificFolder",
              "folderToWatch": {
                "__rl": true,
                "mode": "list",
                "value": "12aSoGo009rsrhyJ_a4VP84m_NrWCsA3O",
                "cachedResultUrl": "https://drive.google.com/drive/folders/12aSoGo009rsrhyJ_a4VP84m_NrWCsA3O",
                "cachedResultName": "Invoices"
              }
            },
            "credentials": {
              "googleDriveOAuth2Api": {
                "id": "2tC63bJyUD0P4Sfr",
                "name": "Google Drive account"
              }
            },
            "typeVersion": 1
          },
          {
            "id": "4e7873cf-4bf0-49cc-8961-b6822ddb7534",
            "name": "HTTP Request",
            "type": "n8n-nodes-base.httpRequest",
            "position": [
              208,
              0
            ],
            "parameters": {
              "url": "=https://www.googleapis.com/drive/v3/files/{{ $json.id }}?alt=media",
              "options": {
                "response": {
                  "response": {
                    "responseFormat": "file"
                  }
                }
              },
              "authentication": "predefinedCredentialType",
              "nodeCredentialType": "googleDriveOAuth2Api"
            },
            "credentials": {
              "googleDriveOAuth2Api": {
                "id": "OOGqeioeW18cDpAp",
                "name": "Invoice GDrive"
              }
            },
            "typeVersion": 4.2
          },
          {
            "id": "8f95087b-ed1e-4724-b626-2e4e569b87db",
            "name": "Extract text",
            "type": "n8n-nodes-base.mistralAi",
            "position": [
              416,
              0
            ],
            "parameters": {
              "options": {}
            },
            "credentials": {
              "mistralCloudApi": {
                "id": "KRAIZJkm1m3QoGG9",
                "name": "Mistral Cloud account"
              }
            },
            "typeVersion": 1
          },
          {
            "id": "fa981161-1090-44b0-ba3f-c94fe81c39a9",
            "name": "AI Agent",
            "type": "@n8n/n8n-nodes-langchain.agent",
            "position": [
              624,
              0
            ],
            "parameters": {
              "text": "=You are an expert in analyzing invoices.\n\nHere is an invoice that you should analyze: {{ $json.pages[0].markdown }}",
              "options": {},
              "promptType": "define",
              "hasOutputParser": true
            },
            "typeVersion": 2.2
          },
          {
            "id": "891a6ece-adf2-43a0-8eaf-71d856abdf80",
            "name": "OpenAI Chat Model",
            "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
            "position": [
              528,
              208
            ],
            "parameters": {
              "model": {
                "__rl": true,
                "mode": "list",
                "value": "gpt-4.1-mini"
              },
              "options": {}
            },
            "credentials": {
              "openAiApi": {
                "id": "Ld35iNfL5HwS3VlA",
                "name": "OpenAi account 7"
              }
            },
            "typeVersion": 1.2
          },
          {
            "id": "442bba12-af49-4490-97d7-3d1f691bcfc2",
            "name": "Structured Output Parser",
            "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
            "position": [
              832,
              208
            ],
            "parameters": {
              "jsonSchemaExample": "{\n\t\"invoiceNumber\": \"INV123\",\n\t\"From\": \"John street 23, 12443 Berlin, Germany\",\n    \"To\": \"Smith street 33, 23222 Berlin, Germany\",\n    \"invoiceDate\": \"20/08/2025\",\n    \"dueDate\": \"25/08/2025\",\n    \"shortDescription\": \"It is an invoice about web development costs\"\n}"
            },
            "typeVersion": 1.3
          },
          {
            "id": "a1c817d0-dccc-4666-9728-5f74107d5c1e",
            "name": "Append row in sheet",
            "type": "n8n-nodes-base.googleSheets",
            "position": [
              976,
              0
            ],
            "parameters": {
              "columns": {
                "value": {
                  "To": "={{ $json.output.To }}",
                  "From": "={{ $json.output.From }}",
                  "Due Date": "={{ $json.output.dueDate }}",
                  "Invoice Date": "={{ $json.output.invoiceDate }}",
                  "Link to File": "={{ $('Google Drive Trigger').item.json.webViewLink }}",
                  "Invoice Number": "={{ $json.output.invoiceNumber }}",
                  "Short Description": "={{ $json.output.shortDescription }}"
                },
                "schema": [
                  {
                    "id": "Invoice Number",
                    "type": "string",
                    "display": true,
                    "required": false,
                    "displayName": "Invoice Number",
                    "defaultMatch": false,
                    "canBeUsedToMatch": true
                  },
                  {
                    "id": "From",
                    "type": "string",
                    "display": true,
                    "required": false,
                    "displayName": "From",
                    "defaultMatch": false,
                    "canBeUsedToMatch": true
                  },
                  {
                    "id": "To",
                    "type": "string",
                    "display": true,
                    "required": false,
                    "displayName": "To",
                    "defaultMatch": false,
                    "canBeUsedToMatch": true
                  },
                  {
                    "id": "Invoice Date",
                    "type": "string",
                    "display": true,
                    "required": false,
                    "displayName": "Invoice Date",
                    "defaultMatch": false,
                    "canBeUsedToMatch": true
                  },
                  {
                    "id": "Due Date",
                    "type": "string",
                    "display": true,
                    "required": false,
                    "displayName": "Due Date",
                    "defaultMatch": false,
                    "canBeUsedToMatch": true
                  },
                  {
                    "id": "Short Description",
                    "type": "string",
                    "display": true,
                    "required": false,
                    "displayName": "Short Description",
                    "defaultMatch": false,
                    "canBeUsedToMatch": true
                  },
                  {
                    "id": "Link to File",
                    "type": "string",
                    "display": true,
                    "required": false,
                    "displayName": "Link to File",
                    "defaultMatch": false,
                    "canBeUsedToMatch": true
                  }
                ],
                "mappingMode": "defineBelow",
                "matchingColumns": [],
                "attemptToConvertTypes": false,
                "convertFieldsToString": false
              },
              "options": {},
              "operation": "append",
              "sheetName": {
                "__rl": true,
                "mode": "list",
                "value": "gid=0",
                "cachedResultUrl": "https://docs.google.com/spreadsheets/d/14tyy2at8ZtfoQq4zGYph4DG7omv9uA9aXGH5KnQbPgs/edit#gid=0",
                "cachedResultName": "Sheet1"
              },
              "documentId": {
                "__rl": true,
                "mode": "list",
                "value": "14tyy2at8ZtfoQq4zGYph4DG7omv9uA9aXGH5KnQbPgs",
                "cachedResultUrl": "https://docs.google.com/spreadsheets/d/14tyy2at8ZtfoQq4zGYph4DG7omv9uA9aXGH5KnQbPgs/edit?usp=drivesdk",
                "cachedResultName": "Invoices from Google Drive"
              }
            },
            "credentials": {
              "googleSheetsOAuth2Api": {
                "id": "Heyjvh3DnLP9bR1B",
                "name": "Google Sheets account 3"
              }
            },
            "typeVersion": 4.7
          },
          {
            "id": "276a2c56-5abe-41a4-87ab-4fa773c975a7",
            "name": "Sticky Note",
            "type": "n8n-nodes-base.stickyNote",
            "position": [
              -16,
              -208
            ],
            "parameters": {
              "width": 352,
              "content": "## n8n Starter Session Tutorial\n\n[Watch the Tutorials](https://www.youtube.com/playlist?list=PLWYu7XaUG3XOJwOOGiX89SQ_w67vw3dq7)\n\nTutor: [Aemal Sayer](https://aemalsayer.com)"
            },
            "typeVersion": 1
          }
        ],
        "pinData": {
          "Google Drive Trigger": [
            {
              "id": "183ASCNGT8PPaktW3LsW7AuEx7lOPwNxf",
              "kind": "drive#file",
              "name": "Scanned 26. Aug 2025 at 14:57:04.pdf",
              "size": "616505",
              "owners": [
                {
                  "me": true,
                  "kind": "drive#user",
                  "photoLink": "https://lh3.googleusercontent.com/a-/ALV-UjU3rGCBgLqN5suqepH1gVA9F-LgxKUnosIKwMTy9CdipsIOJUdyboXV5pHl_6VEC3S5odm5Ga1FNI9j95vj-IiFU-e5tCZ0C75qAFKRZ2-kMdWL7S769AhvsIAvlSQmm73cnIox1QfiV8slkP9yWVHPImEzgQj4O8faynPLmbR7CoVICMvNANlgdNkIyZ6XOr4KH5QTFvoYH1XCYF0SpznuUmrSx74jcZHmHvcB1SC7lhaxrW9mw30XOGTbaVnZUgnziG5Ep9N4S1JUtTsxK5yaCviOsJrePC20FA5E_Hpx2GjxkxwU6wkmqEmoGjJWm_7Fu_lH9y9tRbWN6W7-ZxdkSr3HLOUnkQK1JC7WxrSUuS-9W0_FHcxg9iAR5Nh0rHF-oAPpyQtDtm6WPbI3J2HaOSbmAthGDSrOW9562wp9ephXwneVdrzBuyelu_0Y5fHaEnSKTzBKL2EGWciO97WfIWET_uruCUMRk08LE0EvN1_-RRC8sRfmjSRzID0R59XIZ7F8-tSxGvkmSOdpKasbGgY3PtBLvwsgP4FtvrZLnmV22Umevr90CcoC-Ri9cp75mb9rMXUBMvGDD99fJzcZBIewX-awTVwKvMQHKZXeLkCwtbjUfki0qa8B3kcm1OVkTxLf2Y6SGBhQ4F5tugfy9skuWt2F-v_wWiBnP4vveY1_2ljmzY0Q9_hYBbGNf8AkJO7XTchcJ2LY7yPPQiD2kukORccq7_swpgT13rnwrBWn7jYOxmSFGOqEmi1nwWA2YtY3Gpnc7nH9XRBeoUt0DUkHrPXYOsEtb_Hv5mKz4o8NAFJ8Sh4Vnwojr134nk6HLROtAj1_q2A6uCUhkhipRLHSIht2gFcdAWSagkcOz2DTXLNlBBd_oPGEnbnQp0a5ryQ9sw4ZNDihit2L1cFtgI1hm5xmLa6NxpS_QbT0NJNH-TELiI4DBV2H_khf5pVQwt0QJqJ_h5kBbgessjCJfA4bHpKR=s64",
                  "displayName": "Aemal Sayer",
                  "emailAddress": "a@aemalsayer.com",
                  "permissionId": "16808739443574860847"
                }
              ],
              "shared": false,
              "spaces": [
                "drive"
              ],
              "parents": [
                "12aSoGo009rsrhyJ_a4VP84m_NrWCsA3O"
              ],
              "starred": false,
              "trashed": false,
              "version": "5",
              "iconLink": "https://drive-thirdparty.googleusercontent.com/16/type/application/pdf",
              "mimeType": "application/pdf",
              "ownedByMe": true,
              "viewedByMe": true,
              "createdTime": "2025-08-26T12:57:17.619Z",
              "md5Checksum": "a990e489170c3cb2d0ca0d7b300bdc47",
              "permissions": [
                {
                  "id": "16808739443574860847",
                  "kind": "drive#permission",
                  "role": "owner",
                  "type": "user",
                  "deleted": false,
                  "photoLink": "https://lh3.googleusercontent.com/a-/ALV-UjWuKFw8DRgWqBLpNd_iWpacVH39hr0AxUgrGi2gOFzzz_sSTCaSgxq3-XQs7Aw9cPhQVbMJRbUYD3qywRHSNiqIijYY9bUOSrlDbYlJDMafzVT3ltbGMaRL4dRfaDNwPk2hH1YRsIIiWAwxUP4OsgnlhlBLimF9fDM0fMIj0zzFiGwZSCIfYpDiVS-DOFQapM3e55ziAUxYobA4vOV5uQMDhcdXWmZbZOMlQNE0ss_nE50_YfFCxqAUqPozBUeh3VHv8mUTIsRbTkBmqVdZVrn_w9lgCjLAYTbFxNPnI_TWVatHK426loyJOPq5ig_OTm4tWbHpljK7KyOH5KsEVA7DEWe-Xdq9DYEbtUa4eae62vOuYATtmLcRSZxYfob9rDv33fTab9XK9Q84lrrBthv-tUsdT_NvlCZxzyOImjBFNJiD_8BMog19B5L-27cB68WHhszY-7X2vWjTJYbK4fr5fa8Kbm1I9JUnenT7UMqWPAbJWRAYss4xLhFd_RXGaKOhK20yBf1slFW5DQa6RE_nLeyeN7uvQJMvgnxeKxunVYNt5wFqcpYb5-avh1YFnZVK2EzdAK8bSdptw4qsbYzNwiNiftDgSiSgfP-rRuAklDqs_knEM_JjdpmM4gC6ytXp1AdLcQl7ApHxMQaZGq1eWpStYmDSQ1uYqW-SAuMKFhPr6_ORyMPWijI5mRooPaJx4QuEk_jGEw79_N6v5KainTp0KC64k_6KZI05ul0gbjL9Ip5qWa_OS640TAo6a93OL1oGZkDSCm991QNqn8-ILfKPwdWCGX71J4Nf45vU4L0GvBhe6sdtMomH24tFimJZXviz3ggQw4p-59560sqidB0Acc2NZ5JRw8wOTRnD33af2l2GzfyUwnKXe96NA_r0eCj4CGFzDUpnsu38d_0vAJiGd31x4I3fgsJHACZj8ycphZD5N330bNjuXfJw2_nGpawl1XNRp50wn6hQrXLCD2QBLDNu=s64",
                  "displayName": "Aemal Sayer",
                  "emailAddress": "a@aemalsayer.com",
                  "pendingOwner": false
                }
              ],
              "webViewLink": "https://drive.google.com/file/d/183ASCNGT8PPaktW3LsW7AuEx7lOPwNxf/view?usp=drivesdk",
              "capabilities": {
                "canCopy": true,
                "canEdit": true,
                "canShare": true,
                "canTrash": true,
                "canDelete": true,
                "canRename": true,
                "canComment": true,
                "canUntrash": true,
                "canDownload": true,
                "canReadLabels": false,
                "canAddChildren": false,
                "canListChildren": false,
                "canModifyLabels": false,
                "canModifyContent": true,
                "canReadRevisions": true,
                "canRemoveChildren": false,
                "canAcceptOwnership": false,
                "canAddMyDriveParent": false,
                "canMoveItemOutOfDrive": true,
                "canMoveItemWithinDrive": true,
                "canRemoveMyDriveParent": true,
                "canMoveItemIntoTeamDrive": true,
                "canMoveChildrenWithinDrive": false,
                "canModifyContentRestriction": true,
                "canRemoveContentRestriction": false,
                "canEnableInheritedPermissions": true,
                "canChangeSecurityUpdateEnabled": false,
                "canChangeViewersCanCopyContent": true,
                "canDisableInheritedPermissions": false,
                "canChangeItemDownloadRestriction": true,
                "canModifyOwnerContentRestriction": true,
                "canModifyEditorContentRestriction": true,
                "canChangeCopyRequiresWriterPermission": true
              },
              "hasThumbnail": true,
              "modifiedByMe": true,
              "modifiedTime": "2025-08-26T12:57:17.619Z",
              "sha1Checksum": "722d6381ba4b6bbf664772fce7c8adb5c14b13ed",
              "fileExtension": "pdf",
              "permissionIds": [
                "16808739443574860847"
              ],
              "thumbnailLink": "https://lh3.googleusercontent.com/drive-storage/AJQWtBMCeb0uv0MKAgLmX5EUbnMQ621M4QvXyJ1jY3WfetG59AeMYBus8idzS5QkwCMWlOWwU9Bhy3BoxHwuXW_jtIWNdzTZ9zTkR5_iLRZC9wbpZT4=s220",
              "headRevisionId": "0B33RssZRhj7COWFnVFlhRFU2V2tWMDYyVXFtUlYwczcwSm5vPQ",
              "quotaBytesUsed": "616505",
              "sha256Checksum": "c71b7d2c7ccf9dd1dd8e709c69980e331ff24b19e17fcf5c61d4e73b04cc4e6f",
              "viewedByMeTime": "2025-08-26T13:49:02.572Z",
              "webContentLink": "https://drive.google.com/uc?id=183ASCNGT8PPaktW3LsW7AuEx7lOPwNxf&export=download",
              "isAppAuthorized": false,
              "writersCanShare": true,
              "modifiedByMeTime": "2025-08-26T12:57:17.619Z",
              "originalFilename": "Scanned 26. Aug 2025 at 14:57:04.pdf",
              "thumbnailVersion": "1",
              "explicitlyTrashed": false,
              "fullFileExtension": "pdf",
              "lastModifyingUser": {
                "me": true,
                "kind": "drive#user",
                "photoLink": "https://lh3.googleusercontent.com/a-/ALV-UjU3rGCBgLqN5suqepH1gVA9F-LgxKUnosIKwMTy9CdipsIOJUdyboXV5pHl_6VEC3S5odm5Ga1FNI9j95vj-IiFU-e5tCZ0C75qAFKRZ2-kMdWL7S769AhvsIAvlSQmm73cnIox1QfiV8slkP9yWVHPImEzgQj4O8faynPLmbR7CoVICMvNANlgdNkIyZ6XOr4KH5QTFvoYH1XCYF0SpznuUmrSx74jcZHmHvcB1SC7lhaxrW9mw30XOGTbaVnZUgnziG5Ep9N4S1JUtTsxK5yaCviOsJrePC20FA5E_Hpx2GjxkxwU6wkmqEmoGjJWm_7Fu_lH9y9tRbWN6W7-ZxdkSr3HLOUnkQK1JC7WxrSUuS-9W0_FHcxg9iAR5Nh0rHF-oAPpyQtDtm6WPbI3J2HaOSbmAthGDSrOW9562wp9ephXwneVdrzBuyelu_0Y5fHaEnSKTzBKL2EGWciO97WfIWET_uruCUMRk08LE0EvN1_-RRC8sRfmjSRzID0R59XIZ7F8-tSxGvkmSOdpKasbGgY3PtBLvwsgP4FtvrZLnmV22Umevr90CcoC-Ri9cp75mb9rMXUBMvGDD99fJzcZBIewX-awTVwKvMQHKZXeLkCwtbjUfki0qa8B3kcm1OVkTxLf2Y6SGBhQ4F5tugfy9skuWt2F-v_wWiBnP4vveY1_2ljmzY0Q9_hYBbGNf8AkJO7XTchcJ2LY7yPPQiD2kukORccq7_swpgT13rnwrBWn7jYOxmSFGOqEmi1nwWA2YtY3Gpnc7nH9XRBeoUt0DUkHrPXYOsEtb_Hv5mKz4o8NAFJ8Sh4Vnwojr134nk6HLROtAj1_q2A6uCUhkhipRLHSIht2gFcdAWSagkcOz2DTXLNlBBd_oPGEnbnQp0a5ryQ9sw4ZNDihit2L1cFtgI1hm5xmLa6NxpS_QbT0NJNH-TELiI4DBV2H_khf5pVQwt0QJqJ_h5kBbgessjCJfA4bHpKR=s64",
                "displayName": "Aemal Sayer",
                "emailAddress": "a@aemalsayer.com",
                "permissionId": "16808739443574860847"
              },
              "linkShareMetadata": {
                "securityUpdateEnabled": true,
                "securityUpdateEligible": false
              },
              "downloadRestrictions": {
                "itemDownloadRestriction": {
                  "restrictedForReaders": false,
                  "restrictedForWriters": false
                },
                "effectiveDownloadRestrictionWithContext": {
                  "restrictedForReaders": false,
                  "restrictedForWriters": false
                }
              },
              "viewersCanCopyContent": true,
              "copyRequiresWriterPermission": false,
              "inheritedPermissionsDisabled": false
            }
          ]
        },
        "connections": {
          "AI Agent": {
            "main": [
              [
                {
                  "node": "Append row in sheet",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          },
          "Extract text": {
            "main": [
              [
                {
                  "node": "AI Agent",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          },
          "HTTP Request": {
            "main": [
              [
                {
                  "node": "Extract text",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          },
          "OpenAI Chat Model": {
            "ai_languageModel": [
              [
                {
                  "node": "AI Agent",
                  "type": "ai_languageModel",
                  "index": 0
                }
              ]
            ]
          },
          "Google Drive Trigger": {
            "main": [
              [
                {
                  "node": "HTTP Request",
                  "type": "main",
                  "index": 0
                }
              ]
            ]
          },
          "Structured Output Parser": {
            "ai_outputParser": [
              [
                {
                  "node": "AI Agent",
                  "type": "ai_outputParser",
                  "index": 0
                }
              ]
            ]
          }
        }
      }
    }
  ]
}